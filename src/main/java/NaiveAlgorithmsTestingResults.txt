# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 1000000, maxSize = 250)

# Run progress: 0,00% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 49.93543038819529---
77430,429 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 49.93543038819529---
37182,042 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 49.93543038819529---
21177,638 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 49.93543038819529---
16253,971 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 49.93543038819529---
16265,519 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 49.93543038819529---
15954,042 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 49.93543038819529---
15946,663 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 49.93543038819529---
15699,021 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 49.93543038819529---
15960,136 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 49.93543038819529---
15959,816 us/op
Iteration   1: Naive solution ---ACCURACY : 49.93543038819529---
15885,714 us/op
Iteration   2: Naive solution ---ACCURACY : 49.93543038819529---
15877,374 us/op
Iteration   3: Naive solution ---ACCURACY : 49.93543038819529---
15779,857 us/op
Iteration   4: Naive solution ---ACCURACY : 49.93543038819529---
15608,880 us/op
Iteration   5: Naive solution ---ACCURACY : 49.93543038819529---
15705,115 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  15771,388 ±(99.9%) 452,251 us/op

  Histogram, us/op:
    [15600,000, 15625,000) = 1 
    [15625,000, 15650,000) = 0 
    [15650,000, 15675,000) = 0 
    [15675,000, 15700,000) = 0 
    [15700,000, 15725,000) = 1 
    [15725,000, 15750,000) = 0 
    [15750,000, 15775,000) = 0 
    [15775,000, 15800,000) = 1 
    [15800,000, 15825,000) = 0 
    [15825,000, 15850,000) = 0 
    [15850,000, 15875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  15608,880 us/op
     p(50,0000) =  15779,857 us/op
     p(90,0000) =  15885,714 us/op
     p(95,0000) =  15885,714 us/op
     p(99,0000) =  15885,714 us/op
     p(99,9000) =  15885,714 us/op
     p(99,9900) =  15885,714 us/op
     p(99,9990) =  15885,714 us/op
     p(99,9999) =  15885,714 us/op
    p(100,0000) =  15885,714 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 1000000, maxSize = 500)

# Run progress: 0,83% complete, ETA 00:01:19
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.071060476371464---
77756,664 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.071060476371464---
36033,326 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.071060476371464---
21009,870 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.071060476371464---
16445,798 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.071060476371464---
16515,408 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.071060476371464---
16277,388 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.071060476371464---
16117,639 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.071060476371464---
15977,138 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.071060476371464---
15935,436 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.071060476371464---
15568,142 us/op
Iteration   1: Naive solution ---ACCURACY : 50.071060476371464---
15762,535 us/op
Iteration   2: Naive solution ---ACCURACY : 50.071060476371464---
15843,051 us/op
Iteration   3: Naive solution ---ACCURACY : 50.071060476371464---
15957,569 us/op
Iteration   4: Naive solution ---ACCURACY : 50.071060476371464---
15868,072 us/op
Iteration   5: Naive solution ---ACCURACY : 50.071060476371464---
15569,104 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  15800,066 ±(99.9%) 564,719 us/op

  Histogram, us/op:
    [15500,000, 15550,000) = 0 
    [15550,000, 15600,000) = 1 
    [15600,000, 15650,000) = 0 
    [15650,000, 15700,000) = 0 
    [15700,000, 15750,000) = 0 
    [15750,000, 15800,000) = 1 
    [15800,000, 15850,000) = 1 
    [15850,000, 15900,000) = 1 
    [15900,000, 15950,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  15569,104 us/op
     p(50,0000) =  15843,051 us/op
     p(90,0000) =  15957,569 us/op
     p(95,0000) =  15957,569 us/op
     p(99,0000) =  15957,569 us/op
     p(99,9000) =  15957,569 us/op
     p(99,9900) =  15957,569 us/op
     p(99,9990) =  15957,569 us/op
     p(99,9999) =  15957,569 us/op
    p(100,0000) =  15957,569 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 1000000, maxSize = 750)

# Run progress: 1,67% complete, ETA 00:01:22
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.193546556417903---
79332,981 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.193546556417903---
40337,564 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.193546556417903---
16499,369 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.193546556417903---
16129,188 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.193546556417903---
16178,267 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.193546556417903---
16104,808 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.193546556417903---
16179,871 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.193546556417903---
16265,840 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.193546556417903---
16239,215 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.193546556417903---
16644,362 us/op
Iteration   1: Naive solution ---ACCURACY : 28.193546556417903---
16161,266 us/op
Iteration   2: Naive solution ---ACCURACY : 28.193546556417903---
16146,188 us/op
Iteration   3: Naive solution ---ACCURACY : 28.193546556417903---
15934,474 us/op
Iteration   4: Naive solution ---ACCURACY : 28.193546556417903---
15859,090 us/op
Iteration   5: Naive solution ---ACCURACY : 28.193546556417903---
15805,199 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  15981,243 ±(99.9%) 631,891 us/op

  Histogram, us/op:
    [15800,000, 15825,000) = 1 
    [15825,000, 15850,000) = 0 
    [15850,000, 15875,000) = 1 
    [15875,000, 15900,000) = 0 
    [15900,000, 15925,000) = 0 
    [15925,000, 15950,000) = 1 
    [15950,000, 15975,000) = 0 
    [15975,000, 16000,000) = 0 
    [16000,000, 16025,000) = 0 
    [16025,000, 16050,000) = 0 
    [16050,000, 16075,000) = 0 
    [16075,000, 16100,000) = 0 
    [16100,000, 16125,000) = 0 
    [16125,000, 16150,000) = 1 
    [16150,000, 16175,000) = 1 

  Percentiles, us/op:
      p(0,0000) =  15805,199 us/op
     p(50,0000) =  15934,474 us/op
     p(90,0000) =  16161,266 us/op
     p(95,0000) =  16161,266 us/op
     p(99,0000) =  16161,266 us/op
     p(99,9000) =  16161,266 us/op
     p(99,9900) =  16161,266 us/op
     p(99,9990) =  16161,266 us/op
     p(99,9999) =  16161,266 us/op
    p(100,0000) =  16161,266 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 2000000, maxSize = 250)

# Run progress: 2,50% complete, ETA 00:01:19
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.046243676581106---
596998,710 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.046243676581106---
53879,011 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.046243676581106---
37456,310 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.046243676581106---
32696,882 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.046243676581106---
33240,927 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.046243676581106---
32998,737 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.046243676581106---
34451,875 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.046243676581106---
31909,686 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.046243676581106---
32285,642 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.046243676581106---
31793,563 us/op
Iteration   1: Naive solution ---ACCURACY : 50.046243676581106---
31819,226 us/op
Iteration   2: Naive solution ---ACCURACY : 50.046243676581106---
31958,124 us/op
Iteration   3: Naive solution ---ACCURACY : 50.046243676581106---
32787,022 us/op
Iteration   4: Naive solution ---ACCURACY : 50.046243676581106---
33364,748 us/op
Iteration   5: Naive solution ---ACCURACY : 50.046243676581106---
32108,249 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  32407,474 ±(99.9%) 2508,774 us/op

  Histogram, us/op:
    [31000,000, 31250,000) = 0 
    [31250,000, 31500,000) = 0 
    [31500,000, 31750,000) = 0 
    [31750,000, 32000,000) = 2 
    [32000,000, 32250,000) = 1 
    [32250,000, 32500,000) = 0 
    [32500,000, 32750,000) = 0 
    [32750,000, 33000,000) = 1 
    [33000,000, 33250,000) = 0 
    [33250,000, 33500,000) = 1 
    [33500,000, 33750,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  31819,226 us/op
     p(50,0000) =  32108,249 us/op
     p(90,0000) =  33364,748 us/op
     p(95,0000) =  33364,748 us/op
     p(99,0000) =  33364,748 us/op
     p(99,9000) =  33364,748 us/op
     p(99,9900) =  33364,748 us/op
     p(99,9990) =  33364,748 us/op
     p(99,9999) =  33364,748 us/op
    p(100,0000) =  33364,748 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 2000000, maxSize = 500)

# Run progress: 3,33% complete, ETA 00:01:42
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.03427242317782---
717907,790 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.03427242317782---
53910,769 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.03427242317782---
37794,092 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.03427242317782---
33718,249 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.03427242317782---
33994,762 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.03427242317782---
32997,134 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.03427242317782---
32862,727 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.03427242317782---
33107,162 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.03427242317782---
35323,116 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.03427242317782---
34775,864 us/op
Iteration   1: Naive solution ---ACCURACY : 50.03427242317782---
33398,110 us/op
Iteration   2: Naive solution ---ACCURACY : 50.03427242317782---
32818,138 us/op
Iteration   3: Naive solution ---ACCURACY : 50.03427242317782---
33215,585 us/op
Iteration   4: Naive solution ---ACCURACY : 50.03427242317782---
32637,538 us/op
Iteration   5: Naive solution ---ACCURACY : 50.03427242317782---
33310,216 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  33075,917 ±(99.9%) 1272,516 us/op

  Histogram, us/op:
    [32600,000, 32650,000) = 1 
    [32650,000, 32700,000) = 0 
    [32700,000, 32750,000) = 0 
    [32750,000, 32800,000) = 0 
    [32800,000, 32850,000) = 1 
    [32850,000, 32900,000) = 0 
    [32900,000, 32950,000) = 0 
    [32950,000, 33000,000) = 0 
    [33000,000, 33050,000) = 0 
    [33050,000, 33100,000) = 0 
    [33100,000, 33150,000) = 0 
    [33150,000, 33200,000) = 0 
    [33200,000, 33250,000) = 1 
    [33250,000, 33300,000) = 0 
    [33300,000, 33350,000) = 1 

  Percentiles, us/op:
      p(0,0000) =  32637,538 us/op
     p(50,0000) =  33215,585 us/op
     p(90,0000) =  33398,110 us/op
     p(95,0000) =  33398,110 us/op
     p(99,0000) =  33398,110 us/op
     p(99,9000) =  33398,110 us/op
     p(99,9900) =  33398,110 us/op
     p(99,9990) =  33398,110 us/op
     p(99,9999) =  33398,110 us/op
    p(100,0000) =  33398,110 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 2000000, maxSize = 750)

# Run progress: 4,17% complete, ETA 00:01:58
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.15017531543814---
582710,163 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.15017531543814---
57525,650 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.15017531543814---
32840,271 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.15017531543814---
33471,889 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.15017531543814---
32308,738 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.15017531543814---
32204,163 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.15017531543814---
32092,210 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.15017531543814---
32421,652 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.15017531543814---
32267,357 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.15017531543814---
32426,784 us/op
Iteration   1: Naive solution ---ACCURACY : 28.15017531543814---
33986,101 us/op
Iteration   2: Naive solution ---ACCURACY : 28.15017531543814---
33346,464 us/op
Iteration   3: Naive solution ---ACCURACY : 28.15017531543814---
32481,318 us/op
Iteration   4: Naive solution ---ACCURACY : 28.15017531543814---
32658,389 us/op
Iteration   5: Naive solution ---ACCURACY : 28.15017531543814---
32060,453 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  32906,545 ±(99.9%) 2930,819 us/op

  Histogram, us/op:
    [32000,000, 32125,000) = 1 
    [32125,000, 32250,000) = 0 
    [32250,000, 32375,000) = 0 
    [32375,000, 32500,000) = 1 
    [32500,000, 32625,000) = 0 
    [32625,000, 32750,000) = 1 
    [32750,000, 32875,000) = 0 
    [32875,000, 33000,000) = 0 
    [33000,000, 33125,000) = 0 
    [33125,000, 33250,000) = 0 
    [33250,000, 33375,000) = 1 
    [33375,000, 33500,000) = 0 
    [33500,000, 33625,000) = 0 
    [33625,000, 33750,000) = 0 
    [33750,000, 33875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  32060,453 us/op
     p(50,0000) =  32658,389 us/op
     p(90,0000) =  33986,101 us/op
     p(95,0000) =  33986,101 us/op
     p(99,0000) =  33986,101 us/op
     p(99,9000) =  33986,101 us/op
     p(99,9900) =  33986,101 us/op
     p(99,9990) =  33986,101 us/op
     p(99,9999) =  33986,101 us/op
    p(100,0000) =  33986,101 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 3000000, maxSize = 250)

# Run progress: 5,00% complete, ETA 00:02:05
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.04871391854121---
602275,876 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.04871391854121---
68729,566 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.04871391854121---
53665,371 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.04871391854121---
47827,479 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.04871391854121---
47798,930 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.04871391854121---
47762,040 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.04871391854121---
48515,554 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.04871391854121---
48309,613 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.04871391854121---
47982,416 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.04871391854121---
47558,985 us/op
Iteration   1: Naive solution ---ACCURACY : 50.04871391854121---
47961,245 us/op
Iteration   2: Naive solution ---ACCURACY : 50.04871391854121---
47602,932 us/op
Iteration   3: Naive solution ---ACCURACY : 50.04871391854121---
48990,951 us/op
Iteration   4: Naive solution ---ACCURACY : 50.04871391854121---
47742,152 us/op
Iteration   5: Naive solution ---ACCURACY : 50.04871391854121---
47665,163 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  47992,489 ±(99.9%) 2211,581 us/op

  Histogram, us/op:
    [47000,000, 47125,000) = 0 
    [47125,000, 47250,000) = 0 
    [47250,000, 47375,000) = 0 
    [47375,000, 47500,000) = 0 
    [47500,000, 47625,000) = 1 
    [47625,000, 47750,000) = 2 
    [47750,000, 47875,000) = 0 
    [47875,000, 48000,000) = 1 
    [48000,000, 48125,000) = 0 
    [48125,000, 48250,000) = 0 
    [48250,000, 48375,000) = 0 
    [48375,000, 48500,000) = 0 
    [48500,000, 48625,000) = 0 
    [48625,000, 48750,000) = 0 
    [48750,000, 48875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  47602,932 us/op
     p(50,0000) =  47742,152 us/op
     p(90,0000) =  48990,951 us/op
     p(95,0000) =  48990,951 us/op
     p(99,0000) =  48990,951 us/op
     p(99,9000) =  48990,951 us/op
     p(99,9900) =  48990,951 us/op
     p(99,9990) =  48990,951 us/op
     p(99,9999) =  48990,951 us/op
    p(100,0000) =  48990,951 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 3000000, maxSize = 500)

# Run progress: 5,83% complete, ETA 00:02:27
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.06461726763764---
630157,195 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.06461726763764---
66474,155 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.06461726763764---
54930,532 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.06461726763764---
49737,729 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.06461726763764---
49436,836 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.06461726763764---
48753,573 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.06461726763764---
49664,271 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.06461726763764---
49352,471 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.06461726763764---
49141,719 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.06461726763764---
49722,332 us/op
Iteration   1: Naive solution ---ACCURACY : 50.06461726763764---
48987,743 us/op
Iteration   2: Naive solution ---ACCURACY : 50.06461726763764---
49835,888 us/op
Iteration   3: Naive solution ---ACCURACY : 50.06461726763764---
48873,867 us/op
Iteration   4: Naive solution ---ACCURACY : 50.06461726763764---
48625,903 us/op
Iteration   5: Naive solution ---ACCURACY : 50.06461726763764---
48645,150 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  48993,710 ±(99.9%) 1906,397 us/op

  Histogram, us/op:
    [48000,000, 48125,000) = 0 
    [48125,000, 48250,000) = 0 
    [48250,000, 48375,000) = 0 
    [48375,000, 48500,000) = 0 
    [48500,000, 48625,000) = 0 
    [48625,000, 48750,000) = 2 
    [48750,000, 48875,000) = 1 
    [48875,000, 49000,000) = 1 
    [49000,000, 49125,000) = 0 
    [49125,000, 49250,000) = 0 
    [49250,000, 49375,000) = 0 
    [49375,000, 49500,000) = 0 
    [49500,000, 49625,000) = 0 
    [49625,000, 49750,000) = 0 
    [49750,000, 49875,000) = 1 

  Percentiles, us/op:
      p(0,0000) =  48625,903 us/op
     p(50,0000) =  48873,867 us/op
     p(90,0000) =  49835,888 us/op
     p(95,0000) =  49835,888 us/op
     p(99,0000) =  49835,888 us/op
     p(99,9000) =  49835,888 us/op
     p(99,9900) =  49835,888 us/op
     p(99,9990) =  49835,888 us/op
     p(99,9999) =  49835,888 us/op
    p(100,0000) =  49835,888 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 3000000, maxSize = 750)

# Run progress: 6,67% complete, ETA 00:02:42
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.15070273170919---
627938,033 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.15070273170919---
68711,282 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.15070273170919---
54098,747 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.15070273170919---
49237,311 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.15070273170919---
49173,155 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.15070273170919---
49054,466 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.15070273170919---
50681,468 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.15070273170919---
49132,095 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.15070273170919---
50187,465 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.15070273170919---
49692,820 us/op
Iteration   1: Naive solution ---ACCURACY : 28.15070273170919---
49724,256 us/op
Iteration   2: Naive solution ---ACCURACY : 28.15070273170919---
50618,273 us/op
Iteration   3: Naive solution ---ACCURACY : 28.15070273170919---
49186,949 us/op
Iteration   4: Naive solution ---ACCURACY : 28.15070273170919---
49142,681 us/op
Iteration   5: Naive solution ---ACCURACY : 28.15070273170919---
49512,221 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  49636,876 ±(99.9%) 2304,746 us/op

  Histogram, us/op:
    [49000,000, 49125,000) = 0 
    [49125,000, 49250,000) = 2 
    [49250,000, 49375,000) = 0 
    [49375,000, 49500,000) = 0 
    [49500,000, 49625,000) = 1 
    [49625,000, 49750,000) = 1 
    [49750,000, 49875,000) = 0 
    [49875,000, 50000,000) = 0 
    [50000,000, 50125,000) = 0 
    [50125,000, 50250,000) = 0 
    [50250,000, 50375,000) = 0 
    [50375,000, 50500,000) = 0 
    [50500,000, 50625,000) = 1 
    [50625,000, 50750,000) = 0 
    [50750,000, 50875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  49142,681 us/op
     p(50,0000) =  49512,221 us/op
     p(90,0000) =  50618,273 us/op
     p(95,0000) =  50618,273 us/op
     p(99,0000) =  50618,273 us/op
     p(99,9000) =  50618,273 us/op
     p(99,9900) =  50618,273 us/op
     p(99,9990) =  50618,273 us/op
     p(99,9999) =  50618,273 us/op
    p(100,0000) =  50618,273 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 4000000, maxSize = 250)

# Run progress: 7,50% complete, ETA 00:02:54
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.12901597456379---
1771820,162 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.12901597456379---
91024,806 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.12901597456379---
65407,559 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.12901597456379---
65668,995 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.12901597456379---
65767,795 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.12901597456379---
64900,083 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.12901597456379---
64663,026 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.12901597456379---
65583,026 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.12901597456379---
65579,498 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.12901597456379---
64690,292 us/op
Iteration   1: Naive solution ---ACCURACY : 50.12901597456379---
65815,593 us/op
Iteration   2: Naive solution ---ACCURACY : 50.12901597456379---
64824,379 us/op
Iteration   3: Naive solution ---ACCURACY : 50.12901597456379---
65453,110 us/op
Iteration   4: Naive solution ---ACCURACY : 50.12901597456379---
64967,447 us/op
Iteration   5: Naive solution ---ACCURACY : 50.12901597456379---
66191,227 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  65450,351 ±(99.9%) 2201,396 us/op

  Histogram, us/op:
    [64000,000, 64250,000) = 0 
    [64250,000, 64500,000) = 0 
    [64500,000, 64750,000) = 0 
    [64750,000, 65000,000) = 2 
    [65000,000, 65250,000) = 0 
    [65250,000, 65500,000) = 1 
    [65500,000, 65750,000) = 0 
    [65750,000, 66000,000) = 1 
    [66000,000, 66250,000) = 1 
    [66250,000, 66500,000) = 0 
    [66500,000, 66750,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  64824,379 us/op
     p(50,0000) =  65453,110 us/op
     p(90,0000) =  66191,227 us/op
     p(95,0000) =  66191,227 us/op
     p(99,0000) =  66191,227 us/op
     p(99,9000) =  66191,227 us/op
     p(99,9900) =  66191,227 us/op
     p(99,9990) =  66191,227 us/op
     p(99,9999) =  66191,227 us/op
    p(100,0000) =  66191,227 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 4000000, maxSize = 500)

# Run progress: 8,33% complete, ETA 00:03:19
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.09748671069774---
1945690,180 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.09748671069774---
86445,016 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.09748671069774---
70030,012 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.09748671069774---
68378,311 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.09748671069774---
65257,433 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.09748671069774---
65974,379 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.09748671069774---
64908,423 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.09748671069774---
65930,753 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.09748671069774---
64798,396 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.09748671069774---
64602,719 us/op
Iteration   1: Naive solution ---ACCURACY : 50.09748671069774---
71124,196 us/op
Iteration   2: Naive solution ---ACCURACY : 50.09748671069774---
68108,534 us/op
Iteration   3: Naive solution ---ACCURACY : 50.09748671069774---
64848,117 us/op
Iteration   4: Naive solution ---ACCURACY : 50.09748671069774---
64804,811 us/op
Iteration   5: Naive solution ---ACCURACY : 50.09748671069774---
66375,034 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  67052,138 ±(99.9%) 10199,535 us/op

  Histogram, us/op:
    [64000,000, 64500,000) = 0 
    [64500,000, 65000,000) = 2 
    [65000,000, 65500,000) = 0 
    [65500,000, 66000,000) = 0 
    [66000,000, 66500,000) = 1 
    [66500,000, 67000,000) = 0 
    [67000,000, 67500,000) = 0 
    [67500,000, 68000,000) = 0 
    [68000,000, 68500,000) = 1 
    [68500,000, 69000,000) = 0 
    [69000,000, 69500,000) = 0 
    [69500,000, 70000,000) = 0 
    [70000,000, 70500,000) = 0 
    [70500,000, 71000,000) = 0 
    [71000,000, 71500,000) = 1 

  Percentiles, us/op:
      p(0,0000) =  64804,811 us/op
     p(50,0000) =  66375,034 us/op
     p(90,0000) =  71124,196 us/op
     p(95,0000) =  71124,196 us/op
     p(99,0000) =  71124,196 us/op
     p(99,9000) =  71124,196 us/op
     p(99,9900) =  71124,196 us/op
     p(99,9990) =  71124,196 us/op
     p(99,9999) =  71124,196 us/op
    p(100,0000) =  71124,196 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 4000000, maxSize = 750)

# Run progress: 9,17% complete, ETA 00:03:40
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.171880062598525---
1934017,602 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.171880062598525---
86596,424 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.171880062598525---
73187,459 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.171880062598525---
69939,873 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.171880062598525---
69041,044 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.171880062598525---
69289,008 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.171880062598525---
69870,584 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.171880062598525---
70712,634 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.171880062598525---
69283,555 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.171880062598525---
68645,843 us/op
Iteration   1: Naive solution ---ACCURACY : 28.171880062598525---
68771,910 us/op
Iteration   2: Naive solution ---ACCURACY : 28.171880062598525---
69830,808 us/op
Iteration   3: Naive solution ---ACCURACY : 28.171880062598525---
69082,105 us/op
Iteration   4: Naive solution ---ACCURACY : 28.171880062598525---
69860,320 us/op
Iteration   5: Naive solution ---ACCURACY : 28.171880062598525---
82217,123 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  71952,453 ±(99.9%) 22170,197 us/op

  Histogram, us/op:
    [60000,000, 62500,000) = 0 
    [62500,000, 65000,000) = 0 
    [65000,000, 67500,000) = 0 
    [67500,000, 70000,000) = 4 
    [70000,000, 72500,000) = 0 
    [72500,000, 75000,000) = 0 
    [75000,000, 77500,000) = 0 
    [77500,000, 80000,000) = 0 
    [80000,000, 82500,000) = 1 
    [82500,000, 85000,000) = 0 
    [85000,000, 87500,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  68771,910 us/op
     p(50,0000) =  69830,808 us/op
     p(90,0000) =  82217,123 us/op
     p(95,0000) =  82217,123 us/op
     p(99,0000) =  82217,123 us/op
     p(99,9000) =  82217,123 us/op
     p(99,9900) =  82217,123 us/op
     p(99,9990) =  82217,123 us/op
     p(99,9999) =  82217,123 us/op
    p(100,0000) =  82217,123 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 5000000, maxSize = 250)

# Run progress: 10,00% complete, ETA 00:03:58
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.075411691198134---
1027238,795 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.075411691198134---
104404,900 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.075411691198134---
84775,993 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.075411691198134---
81653,831 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.075411691198134---
81066,481 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.075411691198134---
80322,269 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.075411691198134---
80788,364 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.075411691198134---
80966,077 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.075411691198134---
80150,651 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.075411691198134---
79643,176 us/op
Iteration   1: Naive solution ---ACCURACY : 50.075411691198134---
80337,346 us/op
Iteration   2: Naive solution ---ACCURACY : 50.075411691198134---
80248,490 us/op
Iteration   3: Naive solution ---ACCURACY : 50.075411691198134---
80792,214 us/op
Iteration   4: Naive solution ---ACCURACY : 50.075411691198134---
81064,235 us/op
Iteration   5: Naive solution ---ACCURACY : 50.075411691198134---
84712,799 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  81431,017 ±(99.9%) 7179,974 us/op

  Histogram, us/op:
    [80000,000, 80500,000) = 2 
    [80500,000, 81000,000) = 1 
    [81000,000, 81500,000) = 1 
    [81500,000, 82000,000) = 0 
    [82000,000, 82500,000) = 0 
    [82500,000, 83000,000) = 0 
    [83000,000, 83500,000) = 0 
    [83500,000, 84000,000) = 0 
    [84000,000, 84500,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  80248,490 us/op
     p(50,0000) =  80792,214 us/op
     p(90,0000) =  84712,799 us/op
     p(95,0000) =  84712,799 us/op
     p(99,0000) =  84712,799 us/op
     p(99,9000) =  84712,799 us/op
     p(99,9900) =  84712,799 us/op
     p(99,9990) =  84712,799 us/op
     p(99,9999) =  84712,799 us/op
    p(100,0000) =  84712,799 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 5000000, maxSize = 500)

# Run progress: 10,83% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.08597291048967---
1017085,756 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.08597291048967---
101468,792 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.08597291048967---
86363,216 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.08597291048967---
82708,559 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.08597291048967---
80408,881 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.08597291048967---
80227,960 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.08597291048967---
80495,811 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.08597291048967---
80484,584 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.08597291048967---
81445,323 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.08597291048967---
80797,988 us/op
Iteration   1: Naive solution ---ACCURACY : 50.08597291048967---
81762,576 us/op
Iteration   2: Naive solution ---ACCURACY : 50.08597291048967---
82779,131 us/op
Iteration   3: Naive solution ---ACCURACY : 50.08597291048967---
81593,204 us/op
Iteration   4: Naive solution ---ACCURACY : 50.08597291048967---
81330,484 us/op
Iteration   5: Naive solution ---ACCURACY : 50.08597291048967---
94684,916 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  84430,062 ±(99.9%) 22175,349 us/op

  Histogram, us/op:
    [ 80000,000,  81250,000) = 0 
    [ 81250,000,  82500,000) = 3 
    [ 82500,000,  83750,000) = 1 
    [ 83750,000,  85000,000) = 0 
    [ 85000,000,  86250,000) = 0 
    [ 86250,000,  87500,000) = 0 
    [ 87500,000,  88750,000) = 0 
    [ 88750,000,  90000,000) = 0 
    [ 90000,000,  91250,000) = 0 
    [ 91250,000,  92500,000) = 0 
    [ 92500,000,  93750,000) = 0 
    [ 93750,000,  95000,000) = 1 
    [ 95000,000,  96250,000) = 0 
    [ 96250,000,  97500,000) = 0 
    [ 97500,000,  98750,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  81330,484 us/op
     p(50,0000) =  81762,576 us/op
     p(90,0000) =  94684,916 us/op
     p(95,0000) =  94684,916 us/op
     p(99,0000) =  94684,916 us/op
     p(99,9000) =  94684,916 us/op
     p(99,9900) =  94684,916 us/op
     p(99,9990) =  94684,916 us/op
     p(99,9999) =  94684,916 us/op
    p(100,0000) =  94684,916 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 5000000, maxSize = 750)

# Run progress: 11,67% complete, ETA 00:04:24
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.16178738233682---
1278650,873 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.16178738233682---
106866,252 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.16178738233682---
82864,137 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.16178738233682---
83749,494 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.16178738233682---
83523,021 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.16178738233682---
82807,681 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.16178738233682---
84202,435 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.16178738233682---
82844,250 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.16178738233682---
82770,149 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.16178738233682---
83964,416 us/op
Iteration   1: Naive solution ---ACCURACY : 28.16178738233682---
83643,956 us/op
Iteration   2: Naive solution ---ACCURACY : 28.16178738233682---
82575,756 us/op
Iteration   3: Naive solution ---ACCURACY : 28.16178738233682---
82228,029 us/op
Iteration   4: Naive solution ---ACCURACY : 28.16178738233682---
81918,475 us/op
Iteration   5: Naive solution ---ACCURACY : 28.16178738233682---
82334,529 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  82540,149 ±(99.9%) 2543,929 us/op

  Histogram, us/op:
    [81000,000, 81250,000) = 0 
    [81250,000, 81500,000) = 0 
    [81500,000, 81750,000) = 0 
    [81750,000, 82000,000) = 1 
    [82000,000, 82250,000) = 1 
    [82250,000, 82500,000) = 1 
    [82500,000, 82750,000) = 1 
    [82750,000, 83000,000) = 0 
    [83000,000, 83250,000) = 0 
    [83250,000, 83500,000) = 0 
    [83500,000, 83750,000) = 1 

  Percentiles, us/op:
      p(0,0000) =  81918,475 us/op
     p(50,0000) =  82334,529 us/op
     p(90,0000) =  83643,956 us/op
     p(95,0000) =  83643,956 us/op
     p(99,0000) =  83643,956 us/op
     p(99,9000) =  83643,956 us/op
     p(99,9900) =  83643,956 us/op
     p(99,9990) =  83643,956 us/op
     p(99,9999) =  83643,956 us/op
    p(100,0000) =  83643,956 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 6000000, maxSize = 250)

# Run progress: 12,50% complete, ETA 00:04:36
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.07291312785889---
1408677,831 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.07291312785889---
121965,732 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.07291312785889---
100626,741 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.07291312785889---
97931,540 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.07291312785889---
97311,150 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.07291312785889---
97736,505 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.07291312785889---
95928,905 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.07291312785889---
106285,639 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.07291312785889---
95985,683 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.07291312785889---
97437,858 us/op
Iteration   1: Naive solution ---ACCURACY : 50.07291312785889---
96371,903 us/op
Iteration   2: Naive solution ---ACCURACY : 50.07291312785889---
97305,697 us/op
Iteration   3: Naive solution ---ACCURACY : 50.07291312785889---
96344,637 us/op
Iteration   4: Naive solution ---ACCURACY : 50.07291312785889---
95893,939 us/op
Iteration   5: Naive solution ---ACCURACY : 50.07291312785889---
96992,293 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  96581,694 ±(99.9%) 2166,297 us/op

  Histogram, us/op:
    [95000,000, 95250,000) = 0 
    [95250,000, 95500,000) = 0 
    [95500,000, 95750,000) = 0 
    [95750,000, 96000,000) = 1 
    [96000,000, 96250,000) = 0 
    [96250,000, 96500,000) = 2 
    [96500,000, 96750,000) = 0 
    [96750,000, 97000,000) = 1 
    [97000,000, 97250,000) = 0 
    [97250,000, 97500,000) = 1 
    [97500,000, 97750,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  95893,939 us/op
     p(50,0000) =  96371,903 us/op
     p(90,0000) =  97305,697 us/op
     p(95,0000) =  97305,697 us/op
     p(99,0000) =  97305,697 us/op
     p(99,9000) =  97305,697 us/op
     p(99,9900) =  97305,697 us/op
     p(99,9990) =  97305,697 us/op
     p(99,9999) =  97305,697 us/op
    p(100,0000) =  97305,697 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 6000000, maxSize = 500)

# Run progress: 13,33% complete, ETA 00:04:47
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.047018097686255---
1447183,736 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.047018097686255---
120346,430 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.047018097686255---
102556,561 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.047018097686255---
98020,717 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.047018097686255---
96529,086 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.047018097686255---
97359,908 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.047018097686255---
96242,949 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.047018097686255---
98182,070 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.047018097686255---
111836,753 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.047018097686255---
96627,886 us/op
Iteration   1: Naive solution ---ACCURACY : 50.047018097686255---
96642,642 us/op
Iteration   2: Naive solution ---ACCURACY : 50.047018097686255---
96466,855 us/op
Iteration   3: Naive solution ---ACCURACY : 50.047018097686255---
98512,154 us/op
Iteration   4: Naive solution ---ACCURACY : 50.047018097686255---
96692,043 us/op
Iteration   5: Naive solution ---ACCURACY : 50.047018097686255---
97887,914 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  97240,322 ±(99.9%) 3493,817 us/op

  Histogram, us/op:
    [96000,000, 96250,000) = 0 
    [96250,000, 96500,000) = 1 
    [96500,000, 96750,000) = 2 
    [96750,000, 97000,000) = 0 
    [97000,000, 97250,000) = 0 
    [97250,000, 97500,000) = 0 
    [97500,000, 97750,000) = 0 
    [97750,000, 98000,000) = 1 
    [98000,000, 98250,000) = 0 
    [98250,000, 98500,000) = 0 
    [98500,000, 98750,000) = 1 

  Percentiles, us/op:
      p(0,0000) =  96466,855 us/op
     p(50,0000) =  96692,043 us/op
     p(90,0000) =  98512,154 us/op
     p(95,0000) =  98512,154 us/op
     p(99,0000) =  98512,154 us/op
     p(99,9000) =  98512,154 us/op
     p(99,9900) =  98512,154 us/op
     p(99,9990) =  98512,154 us/op
     p(99,9999) =  98512,154 us/op
    p(100,0000) =  98512,154 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 6000000, maxSize = 750)

# Run progress: 14,17% complete, ETA 00:04:57
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.15624202064406---
1434867,672 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.15624202064406---
120253,725 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.15624202064406---
109169,780 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.15624202064406---
99599,281 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.15624202064406---
100925,068 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.15624202064406---
99708,025 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.15624202064406---
98218,960 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.15624202064406---
99211,456 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.15624202064406---
112487,939 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.15624202064406---
99004,232 us/op
Iteration   1: Naive solution ---ACCURACY : 28.15624202064406---
98280,871 us/op
Iteration   2: Naive solution ---ACCURACY : 28.15624202064406---
98093,535 us/op
Iteration   3: Naive solution ---ACCURACY : 28.15624202064406---
98354,330 us/op
Iteration   4: Naive solution ---ACCURACY : 28.15624202064406---
99169,433 us/op
Iteration   5: Naive solution ---ACCURACY : 28.15624202064406---
100117,021 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =  98803,038 ±(99.9%) 3243,575 us/op

  Histogram, us/op:
    [ 98000,000,  98250,000) = 1 
    [ 98250,000,  98500,000) = 2 
    [ 98500,000,  98750,000) = 0 
    [ 98750,000,  99000,000) = 0 
    [ 99000,000,  99250,000) = 1 
    [ 99250,000,  99500,000) = 0 
    [ 99500,000,  99750,000) = 0 
    [ 99750,000, 100000,000) = 0 
    [100000,000, 100250,000) = 1 
    [100250,000, 100500,000) = 0 
    [100500,000, 100750,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  98093,535 us/op
     p(50,0000) =  98354,330 us/op
     p(90,0000) = 100117,021 us/op
     p(95,0000) = 100117,021 us/op
     p(99,0000) = 100117,021 us/op
     p(99,9000) = 100117,021 us/op
     p(99,9900) = 100117,021 us/op
     p(99,9990) = 100117,021 us/op
     p(99,9999) = 100117,021 us/op
    p(100,0000) = 100117,021 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 7000000, maxSize = 250)

# Run progress: 15,00% complete, ETA 00:05:05
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.0855912692014---
1513549,147 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.0855912692014---
133464,447 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.0855912692014---
118893,293 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.0855912692014---
114191,606 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.0855912692014---
112970,393 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.0855912692014---
115077,283 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.0855912692014---
114231,383 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.0855912692014---
114190,964 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.0855912692014---
114644,549 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.0855912692014---
114281,746 us/op
Iteration   1: Naive solution ---ACCURACY : 50.0855912692014---
113930,491 us/op
Iteration   2: Naive solution ---ACCURACY : 50.0855912692014---
112497,241 us/op
Iteration   3: Naive solution ---ACCURACY : 50.0855912692014---
114122,318 us/op
Iteration   4: Naive solution ---ACCURACY : 50.0855912692014---
112439,501 us/op
Iteration   5: Naive solution ---ACCURACY : 50.0855912692014---
115323,000 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 113662,510 ±(99.9%) 4674,239 us/op

  Histogram, us/op:
    [112000,000, 112250,000) = 0 
    [112250,000, 112500,000) = 2 
    [112500,000, 112750,000) = 0 
    [112750,000, 113000,000) = 0 
    [113000,000, 113250,000) = 0 
    [113250,000, 113500,000) = 0 
    [113500,000, 113750,000) = 0 
    [113750,000, 114000,000) = 1 
    [114000,000, 114250,000) = 1 
    [114250,000, 114500,000) = 0 
    [114500,000, 114750,000) = 0 
    [114750,000, 115000,000) = 0 
    [115000,000, 115250,000) = 0 
    [115250,000, 115500,000) = 1 
    [115500,000, 115750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 112439,501 us/op
     p(50,0000) = 113930,491 us/op
     p(90,0000) = 115323,000 us/op
     p(95,0000) = 115323,000 us/op
     p(99,0000) = 115323,000 us/op
     p(99,9000) = 115323,000 us/op
     p(99,9900) = 115323,000 us/op
     p(99,9990) = 115323,000 us/op
     p(99,9999) = 115323,000 us/op
    p(100,0000) = 115323,000 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 7000000, maxSize = 500)

# Run progress: 15,83% complete, ETA 00:05:20
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.05144269399893---
531330,034 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.05144269399893---
138057,710 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.05144269399893---
118010,503 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.05144269399893---
113312,987 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.05144269399893---
113340,254 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.05144269399893---
120946,611 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.05144269399893---
112446,237 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.05144269399893---
117036,292 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.05144269399893---
112027,297 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.05144269399893---
114366,432 us/op
Iteration   1: Naive solution ---ACCURACY : 50.05144269399893---
113439,054 us/op
Iteration   2: Naive solution ---ACCURACY : 50.05144269399893---
112627,479 us/op
Iteration   3: Naive solution ---ACCURACY : 50.05144269399893---
113810,518 us/op
Iteration   4: Naive solution ---ACCURACY : 50.05144269399893---
113762,081 us/op
Iteration   5: Naive solution ---ACCURACY : 50.05144269399893---
113331,592 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 113394,145 ±(99.9%) 1829,005 us/op

  Histogram, us/op:
    [112000,000, 112125,000) = 0 
    [112125,000, 112250,000) = 0 
    [112250,000, 112375,000) = 0 
    [112375,000, 112500,000) = 0 
    [112500,000, 112625,000) = 0 
    [112625,000, 112750,000) = 1 
    [112750,000, 112875,000) = 0 
    [112875,000, 113000,000) = 0 
    [113000,000, 113125,000) = 0 
    [113125,000, 113250,000) = 0 
    [113250,000, 113375,000) = 1 
    [113375,000, 113500,000) = 1 
    [113500,000, 113625,000) = 0 
    [113625,000, 113750,000) = 0 
    [113750,000, 113875,000) = 2 

  Percentiles, us/op:
      p(0,0000) = 112627,479 us/op
     p(50,0000) = 113439,054 us/op
     p(90,0000) = 113810,518 us/op
     p(95,0000) = 113810,518 us/op
     p(99,0000) = 113810,518 us/op
     p(99,9000) = 113810,518 us/op
     p(99,9900) = 113810,518 us/op
     p(99,9990) = 113810,518 us/op
     p(99,9999) = 113810,518 us/op
    p(100,0000) = 113810,518 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 7000000, maxSize = 750)

# Run progress: 16,67% complete, ETA 00:05:27
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.163896571434176---
530107,859 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.163896571434176---
134645,563 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.163896571434176---
120328,146 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.163896571434176---
113057,325 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.163896571434176---
113665,847 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.163896571434176---
128858,032 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.163896571434176---
115068,621 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.163896571434176---
113374,577 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.163896571434176---
115520,923 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.163896571434176---
113789,026 us/op
Iteration   1: Naive solution ---ACCURACY : 28.163896571434176---
113701,774 us/op
Iteration   2: Naive solution ---ACCURACY : 28.163896571434176---
115329,737 us/op
Iteration   3: Naive solution ---ACCURACY : 28.163896571434176---
113716,530 us/op
Iteration   4: Naive solution ---ACCURACY : 28.163896571434176---
113115,065 us/op
Iteration   5: Naive solution ---ACCURACY : 28.163896571434176---
114831,244 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 114138,870 ±(99.9%) 3505,538 us/op

  Histogram, us/op:
    [113000,000, 113250,000) = 1 
    [113250,000, 113500,000) = 0 
    [113500,000, 113750,000) = 2 
    [113750,000, 114000,000) = 0 
    [114000,000, 114250,000) = 0 
    [114250,000, 114500,000) = 0 
    [114500,000, 114750,000) = 0 
    [114750,000, 115000,000) = 1 
    [115000,000, 115250,000) = 0 
    [115250,000, 115500,000) = 1 
    [115500,000, 115750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 113115,065 us/op
     p(50,0000) = 113716,530 us/op
     p(90,0000) = 115329,737 us/op
     p(95,0000) = 115329,737 us/op
     p(99,0000) = 115329,737 us/op
     p(99,9000) = 115329,737 us/op
     p(99,9900) = 115329,737 us/op
     p(99,9990) = 115329,737 us/op
     p(99,9999) = 115329,737 us/op
    p(100,0000) = 115329,737 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 8000000, maxSize = 250)

# Run progress: 17,50% complete, ETA 00:05:34
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.08624347247347---
2360201,733 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.08624347247347---
152210,887 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.08624347247347---
139314,850 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.08624347247347---
129031,896 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.08624347247347---
127187,726 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.08624347247347---
127530,000 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.08624347247347---
128796,443 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.08624347247347---
128854,504 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.08624347247347---
128747,684 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.08624347247347---
126975,369 us/op
Iteration   1: Naive solution ---ACCURACY : 50.08624347247347---
128952,022 us/op
Iteration   2: Naive solution ---ACCURACY : 50.08624347247347---
129018,102 us/op
Iteration   3: Naive solution ---ACCURACY : 50.08624347247347---
127802,022 us/op
Iteration   4: Naive solution ---ACCURACY : 50.08624347247347---
127909,162 us/op
Iteration   5: Naive solution ---ACCURACY : 50.08624347247347---
128291,213 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 128394,504 ±(99.9%) 2192,638 us/op

  Histogram, us/op:
    [127000,000, 127250,000) = 0 
    [127250,000, 127500,000) = 0 
    [127500,000, 127750,000) = 0 
    [127750,000, 128000,000) = 2 
    [128000,000, 128250,000) = 0 
    [128250,000, 128500,000) = 1 
    [128500,000, 128750,000) = 0 
    [128750,000, 129000,000) = 1 
    [129000,000, 129250,000) = 1 
    [129250,000, 129500,000) = 0 
    [129500,000, 129750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 127802,022 us/op
     p(50,0000) = 128291,213 us/op
     p(90,0000) = 129018,102 us/op
     p(95,0000) = 129018,102 us/op
     p(99,0000) = 129018,102 us/op
     p(99,9000) = 129018,102 us/op
     p(99,9900) = 129018,102 us/op
     p(99,9990) = 129018,102 us/op
     p(99,9999) = 129018,102 us/op
    p(100,0000) = 129018,102 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 8000000, maxSize = 500)

# Run progress: 18,33% complete, ETA 00:05:48
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.07505985813416---
2146571,878 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.07505985813416---
151603,328 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.07505985813416---
133679,370 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.07505985813416---
129643,304 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.07505985813416---
128139,162 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.07505985813416---
131963,513 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.07505985813416---
129233,346 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.07505985813416---
128097,782 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.07505985813416---
127869,386 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.07505985813416---
128345,425 us/op
Iteration   1: Naive solution ---ACCURACY : 50.07505985813416---
129046,331 us/op
Iteration   2: Naive solution ---ACCURACY : 50.07505985813416---
128258,493 us/op
Iteration   3: Naive solution ---ACCURACY : 50.07505985813416---
130250,863 us/op
Iteration   4: Naive solution ---ACCURACY : 50.07505985813416---
129397,265 us/op
Iteration   5: Naive solution ---ACCURACY : 50.07505985813416---
129932,649 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 129377,120 ±(99.9%) 3003,251 us/op

  Histogram, us/op:
    [128000,000, 128250,000) = 0 
    [128250,000, 128500,000) = 1 
    [128500,000, 128750,000) = 0 
    [128750,000, 129000,000) = 0 
    [129000,000, 129250,000) = 1 
    [129250,000, 129500,000) = 1 
    [129500,000, 129750,000) = 0 
    [129750,000, 130000,000) = 1 
    [130000,000, 130250,000) = 0 
    [130250,000, 130500,000) = 1 
    [130500,000, 130750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 128258,493 us/op
     p(50,0000) = 129397,265 us/op
     p(90,0000) = 130250,863 us/op
     p(95,0000) = 130250,863 us/op
     p(99,0000) = 130250,863 us/op
     p(99,9000) = 130250,863 us/op
     p(99,9900) = 130250,863 us/op
     p(99,9990) = 130250,863 us/op
     p(99,9999) = 130250,863 us/op
    p(100,0000) = 130250,863 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 8000000, maxSize = 750)

# Run progress: 19,17% complete, ETA 00:06:00
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.156699855882337---
2542523,045 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.156699855882337---
152653,885 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.156699855882337---
137503,721 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.156699855882337---
132531,296 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.156699855882337---
131072,704 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.156699855882337---
131103,820 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.156699855882337---
133300,849 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.156699855882337---
130809,022 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.156699855882337---
131374,560 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.156699855882337---
133141,742 us/op
Iteration   1: Naive solution ---ACCURACY : 28.156699855882337---
132555,354 us/op
Iteration   2: Naive solution ---ACCURACY : 28.156699855882337---
132032,161 us/op
Iteration   3: Naive solution ---ACCURACY : 28.156699855882337---
132645,493 us/op
Iteration   4: Naive solution ---ACCURACY : 28.156699855882337---
132830,263 us/op
Iteration   5: Naive solution ---ACCURACY : 28.156699855882337---
131849,635 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 132382,581 ±(99.9%) 1617,979 us/op

  Histogram, us/op:
    [131800,000, 131900,000) = 1 
    [131900,000, 132000,000) = 0 
    [132000,000, 132100,000) = 1 
    [132100,000, 132200,000) = 0 
    [132200,000, 132300,000) = 0 
    [132300,000, 132400,000) = 0 
    [132400,000, 132500,000) = 0 
    [132500,000, 132600,000) = 1 
    [132600,000, 132700,000) = 1 
    [132700,000, 132800,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 131849,635 us/op
     p(50,0000) = 132555,354 us/op
     p(90,0000) = 132830,263 us/op
     p(95,0000) = 132830,263 us/op
     p(99,0000) = 132830,263 us/op
     p(99,9000) = 132830,263 us/op
     p(99,9900) = 132830,263 us/op
     p(99,9990) = 132830,263 us/op
     p(99,9999) = 132830,263 us/op
    p(100,0000) = 132830,263 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 9000000, maxSize = 250)

# Run progress: 20,00% complete, ETA 00:06:13
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.129086104787845---
2621552,888 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.129086104787845---
174824,982 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.129086104787845---
146782,310 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.129086104787845---
143682,604 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.129086104787845---
144531,712 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.129086104787845---
143892,074 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.129086104787845---
143272,967 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.129086104787845---
147590,999 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.129086104787845---
146095,518 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.129086104787845---
144217,346 us/op
Iteration   1: Naive solution ---ACCURACY : 50.129086104787845---
143165,505 us/op
Iteration   2: Naive solution ---ACCURACY : 50.129086104787845---
148970,036 us/op
Iteration   3: Naive solution ---ACCURACY : 50.129086104787845---
144863,719 us/op
Iteration   4: Naive solution ---ACCURACY : 50.129086104787845---
145182,897 us/op
Iteration   5: Naive solution ---ACCURACY : 50.129086104787845---
144032,896 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 145243,011 ±(99.9%) 8571,165 us/op

  Histogram, us/op:
    [143000,000, 143500,000) = 1 
    [143500,000, 144000,000) = 0 
    [144000,000, 144500,000) = 1 
    [144500,000, 145000,000) = 1 
    [145000,000, 145500,000) = 1 
    [145500,000, 146000,000) = 0 
    [146000,000, 146500,000) = 0 
    [146500,000, 147000,000) = 0 
    [147000,000, 147500,000) = 0 
    [147500,000, 148000,000) = 0 
    [148000,000, 148500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 143165,505 us/op
     p(50,0000) = 144863,719 us/op
     p(90,0000) = 148970,036 us/op
     p(95,0000) = 148970,036 us/op
     p(99,0000) = 148970,036 us/op
     p(99,9000) = 148970,036 us/op
     p(99,9900) = 148970,036 us/op
     p(99,9990) = 148970,036 us/op
     p(99,9999) = 148970,036 us/op
    p(100,0000) = 148970,036 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 9000000, maxSize = 500)

# Run progress: 20,83% complete, ETA 00:06:25
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.08045692674741---
3346041,498 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.08045692674741---
169372,347 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.08045692674741---
148471,222 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.08045692674741---
146310,121 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.08045692674741---
145851,404 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.08045692674741---
144881,363 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.08045692674741---
145752,282 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.08045692674741---
145374,403 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.08045692674741---
146344,445 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.08045692674741---
144892,911 us/op
Iteration   1: Naive solution ---ACCURACY : 50.08045692674741---
145714,752 us/op
Iteration   2: Naive solution ---ACCURACY : 50.08045692674741---
145939,298 us/op
Iteration   3: Naive solution ---ACCURACY : 50.08045692674741---
144606,132 us/op
Iteration   4: Naive solution ---ACCURACY : 50.08045692674741---
145291,320 us/op
Iteration   5: Naive solution ---ACCURACY : 50.08045692674741---
146289,590 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 145568,218 ±(99.9%) 2496,863 us/op

  Histogram, us/op:
    [144000,000, 144250,000) = 0 
    [144250,000, 144500,000) = 0 
    [144500,000, 144750,000) = 1 
    [144750,000, 145000,000) = 0 
    [145000,000, 145250,000) = 0 
    [145250,000, 145500,000) = 1 
    [145500,000, 145750,000) = 1 
    [145750,000, 146000,000) = 1 
    [146000,000, 146250,000) = 0 
    [146250,000, 146500,000) = 1 
    [146500,000, 146750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 144606,132 us/op
     p(50,0000) = 145714,752 us/op
     p(90,0000) = 146289,590 us/op
     p(95,0000) = 146289,590 us/op
     p(99,0000) = 146289,590 us/op
     p(99,9000) = 146289,590 us/op
     p(99,9900) = 146289,590 us/op
     p(99,9990) = 146289,590 us/op
     p(99,9999) = 146289,590 us/op
    p(100,0000) = 146289,590 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 9000000, maxSize = 750)

# Run progress: 21,67% complete, ETA 00:06:38
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.165876698524755---
2585699,520 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.165876698524755---
166950,130 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.165876698524755---
150380,831 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.165876698524755---
146143,315 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.165876698524755---
145021,864 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.165876698524755---
146427,205 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.165876698524755---
146907,414 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.165876698524755---
146324,235 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.165876698524755---
147581,375 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.165876698524755---
146266,495 us/op
Iteration   1: Naive solution ---ACCURACY : 28.165876698524755---
146185,017 us/op
Iteration   2: Naive solution ---ACCURACY : 28.165876698524755---
144408,211 us/op
Iteration   3: Naive solution ---ACCURACY : 28.165876698524755---
147506,313 us/op
Iteration   4: Naive solution ---ACCURACY : 28.165876698524755---
147039,898 us/op
Iteration   5: Naive solution ---ACCURACY : 28.165876698524755---
145725,017 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 146172,891 ±(99.9%) 4654,563 us/op

  Histogram, us/op:
    [144000,000, 144250,000) = 0 
    [144250,000, 144500,000) = 1 
    [144500,000, 144750,000) = 0 
    [144750,000, 145000,000) = 0 
    [145000,000, 145250,000) = 0 
    [145250,000, 145500,000) = 0 
    [145500,000, 145750,000) = 1 
    [145750,000, 146000,000) = 0 
    [146000,000, 146250,000) = 1 
    [146250,000, 146500,000) = 0 
    [146500,000, 146750,000) = 0 
    [146750,000, 147000,000) = 0 
    [147000,000, 147250,000) = 1 
    [147250,000, 147500,000) = 0 
    [147500,000, 147750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 144408,211 us/op
     p(50,0000) = 146185,017 us/op
     p(90,0000) = 147506,313 us/op
     p(95,0000) = 147506,313 us/op
     p(99,0000) = 147506,313 us/op
     p(99,9000) = 147506,313 us/op
     p(99,9900) = 147506,313 us/op
     p(99,9990) = 147506,313 us/op
     p(99,9999) = 147506,313 us/op
    p(100,0000) = 147506,313 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 10000000, maxSize = 250)

# Run progress: 22,50% complete, ETA 00:06:47
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.118800874085856---
2494258,663 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.118800874085856---
183262,163 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.118800874085856---
169137,214 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.118800874085856---
166907,787 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.118800874085856---
158702,210 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.118800874085856---
160767,718 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.118800874085856---
163793,325 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.118800874085856---
158192,810 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.118800874085856---
159023,312 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.118800874085856---
158953,381 us/op
Iteration   1: Naive solution ---ACCURACY : 50.118800874085856---
159150,662 us/op
Iteration   2: Naive solution ---ACCURACY : 50.118800874085856---
160001,373 us/op
Iteration   3: Naive solution ---ACCURACY : 50.118800874085856---
158647,357 us/op
Iteration   4: Naive solution ---ACCURACY : 50.118800874085856---
159378,416 us/op
Iteration   5: Naive solution ---ACCURACY : 50.118800874085856---
159782,921 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 159392,146 ±(99.9%) 2053,044 us/op

  Histogram, us/op:
    [158000,000, 158250,000) = 0 
    [158250,000, 158500,000) = 0 
    [158500,000, 158750,000) = 1 
    [158750,000, 159000,000) = 0 
    [159000,000, 159250,000) = 1 
    [159250,000, 159500,000) = 1 
    [159500,000, 159750,000) = 0 
    [159750,000, 160000,000) = 1 
    [160000,000, 160250,000) = 1 
    [160250,000, 160500,000) = 0 
    [160500,000, 160750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 158647,357 us/op
     p(50,0000) = 159378,416 us/op
     p(90,0000) = 160001,373 us/op
     p(95,0000) = 160001,373 us/op
     p(99,0000) = 160001,373 us/op
     p(99,9000) = 160001,373 us/op
     p(99,9900) = 160001,373 us/op
     p(99,9990) = 160001,373 us/op
     p(99,9999) = 160001,373 us/op
    p(100,0000) = 160001,373 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 10000000, maxSize = 500)

# Run progress: 23,33% complete, ETA 00:06:55
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.07949919898764---
4674983,768 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.07949919898764---
183778,941 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.07949919898764---
169771,719 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.07949919898764---
165127,132 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.07949919898764---
165346,867 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.07949919898764---
163831,497 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.07949919898764---
164251,400 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.07949919898764---
162533,618 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.07949919898764---
164653,659 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.07949919898764---
165383,436 us/op
Iteration   1: Naive solution ---ACCURACY : 50.07949919898764---
164930,814 us/op
Iteration   2: Naive solution ---ACCURACY : 50.07949919898764---
164592,711 us/op
Iteration   3: Naive solution ---ACCURACY : 50.07949919898764---
163375,989 us/op
Iteration   4: Naive solution ---ACCURACY : 50.07949919898764---
168544,091 us/op
Iteration   5: Naive solution ---ACCURACY : 50.07949919898764---
163664,050 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 165021,531 ±(99.9%) 7973,508 us/op

  Histogram, us/op:
    [163000,000, 163500,000) = 1 
    [163500,000, 164000,000) = 1 
    [164000,000, 164500,000) = 0 
    [164500,000, 165000,000) = 2 
    [165000,000, 165500,000) = 0 
    [165500,000, 166000,000) = 0 
    [166000,000, 166500,000) = 0 
    [166500,000, 167000,000) = 0 
    [167000,000, 167500,000) = 0 
    [167500,000, 168000,000) = 0 
    [168000,000, 168500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 163375,989 us/op
     p(50,0000) = 164592,711 us/op
     p(90,0000) = 168544,091 us/op
     p(95,0000) = 168544,091 us/op
     p(99,0000) = 168544,091 us/op
     p(99,9000) = 168544,091 us/op
     p(99,9900) = 168544,091 us/op
     p(99,9990) = 168544,091 us/op
     p(99,9999) = 168544,091 us/op
    p(100,0000) = 168544,091 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 10000000, maxSize = 750)

# Run progress: 24,17% complete, ETA 00:07:10
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.16319803506344---
4328331,182 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.16319803506344---
186037,881 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.16319803506344---
171377,869 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.16319803506344---
165382,474 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.16319803506344---
166456,448 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.16319803506344---
165384,719 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.16319803506344---
166533,756 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.16319803506344---
166288,359 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.16319803506344---
168744,899 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.16319803506344---
164506,741 us/op
Iteration   1: Naive solution ---ACCURACY : 28.16319803506344---
166940,827 us/op
Iteration   2: Naive solution ---ACCURACY : 28.16319803506344---
164159,335 us/op
Iteration   3: Naive solution ---ACCURACY : 28.16319803506344---
165958,917 us/op
Iteration   4: Naive solution ---ACCURACY : 28.16319803506344---
165804,621 us/op
Iteration   5: Naive solution ---ACCURACY : 28.16319803506344---
165328,262 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 165638,392 ±(99.9%) 3903,466 us/op

  Histogram, us/op:
    [164000,000, 164250,000) = 1 
    [164250,000, 164500,000) = 0 
    [164500,000, 164750,000) = 0 
    [164750,000, 165000,000) = 0 
    [165000,000, 165250,000) = 0 
    [165250,000, 165500,000) = 1 
    [165500,000, 165750,000) = 0 
    [165750,000, 166000,000) = 2 
    [166000,000, 166250,000) = 0 
    [166250,000, 166500,000) = 0 
    [166500,000, 166750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 164159,335 us/op
     p(50,0000) = 165804,621 us/op
     p(90,0000) = 166940,827 us/op
     p(95,0000) = 166940,827 us/op
     p(99,0000) = 166940,827 us/op
     p(99,9000) = 166940,827 us/op
     p(99,9900) = 166940,827 us/op
     p(99,9990) = 166940,827 us/op
     p(99,9999) = 166940,827 us/op
    p(100,0000) = 166940,827 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 11000000, maxSize = 250)

# Run progress: 25,00% complete, ETA 00:07:21
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.0929546165777---
4902161,807 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.0929546165777---
203373,204 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.0929546165777---
184755,398 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.0929546165777---
181133,460 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.0929546165777---
181662,749 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.0929546165777---
178361,913 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.0929546165777---
195243,974 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.0929546165777---
178839,234 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.0929546165777---
178035,037 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.0929546165777---
181558,816 us/op
Iteration   1: Naive solution ---ACCURACY : 50.0929546165777---
180725,106 us/op
Iteration   2: Naive solution ---ACCURACY : 50.0929546165777---
179660,114 us/op
Iteration   3: Naive solution ---ACCURACY : 50.0929546165777---
181108,439 us/op
Iteration   4: Naive solution ---ACCURACY : 50.0929546165777---
181076,040 us/op
Iteration   5: Naive solution ---ACCURACY : 50.0929546165777---
178158,217 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 180145,583 ±(99.9%) 4837,883 us/op

  Histogram, us/op:
    [178000,000, 178250,000) = 1 
    [178250,000, 178500,000) = 0 
    [178500,000, 178750,000) = 0 
    [178750,000, 179000,000) = 0 
    [179000,000, 179250,000) = 0 
    [179250,000, 179500,000) = 0 
    [179500,000, 179750,000) = 1 
    [179750,000, 180000,000) = 0 
    [180000,000, 180250,000) = 0 
    [180250,000, 180500,000) = 0 
    [180500,000, 180750,000) = 1 
    [180750,000, 181000,000) = 0 
    [181000,000, 181250,000) = 2 
    [181250,000, 181500,000) = 0 
    [181500,000, 181750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 178158,217 us/op
     p(50,0000) = 180725,106 us/op
     p(90,0000) = 181108,439 us/op
     p(95,0000) = 181108,439 us/op
     p(99,0000) = 181108,439 us/op
     p(99,9000) = 181108,439 us/op
     p(99,9900) = 181108,439 us/op
     p(99,9990) = 181108,439 us/op
     p(99,9999) = 181108,439 us/op
    p(100,0000) = 181108,439 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 11000000, maxSize = 500)

# Run progress: 25,83% complete, ETA 00:07:34
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.05878502019308---
5482163,617 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.05878502019308---
206156,621 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.05878502019308---
182365,580 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.05878502019308---
179837,185 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.05878502019308---
177138,454 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.05878502019308---
178379,556 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.05878502019308---
177083,280 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.05878502019308---
180687,575 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.05878502019308---
178521,982 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.05878502019308---
181305,720 us/op
Iteration   1: Naive solution ---ACCURACY : 50.05878502019308---
176094,633 us/op
Iteration   2: Naive solution ---ACCURACY : 50.05878502019308---
176307,631 us/op
Iteration   3: Naive solution ---ACCURACY : 50.05878502019308---
177766,223 us/op
Iteration   4: Naive solution ---ACCURACY : 50.05878502019308---
177052,164 us/op
Iteration   5: Naive solution ---ACCURACY : 50.05878502019308---
178457,185 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 177135,567 ±(99.9%) 3812,127 us/op

  Histogram, us/op:
    [176000,000, 176250,000) = 1 
    [176250,000, 176500,000) = 1 
    [176500,000, 176750,000) = 0 
    [176750,000, 177000,000) = 0 
    [177000,000, 177250,000) = 1 
    [177250,000, 177500,000) = 0 
    [177500,000, 177750,000) = 0 
    [177750,000, 178000,000) = 1 
    [178000,000, 178250,000) = 0 
    [178250,000, 178500,000) = 1 
    [178500,000, 178750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 176094,633 us/op
     p(50,0000) = 177052,164 us/op
     p(90,0000) = 178457,185 us/op
     p(95,0000) = 178457,185 us/op
     p(99,0000) = 178457,185 us/op
     p(99,9000) = 178457,185 us/op
     p(99,9900) = 178457,185 us/op
     p(99,9990) = 178457,185 us/op
     p(99,9999) = 178457,185 us/op
    p(100,0000) = 178457,185 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 11000000, maxSize = 750)

# Run progress: 26,67% complete, ETA 00:07:47
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 28.159437981199808---
4862883,141 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 28.159437981199808---
204321,432 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 28.159437981199808---
189587,964 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 28.159437981199808---
183875,175 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 28.159437981199808---
182331,577 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 28.159437981199808---
182668,398 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 28.159437981199808---
194858,073 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 28.159437981199808---
182365,579 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 28.159437981199808---
184998,229 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 28.159437981199808---
184908,089 us/op
Iteration   1: Naive solution ---ACCURACY : 28.159437981199808---
181786,891 us/op
Iteration   2: Naive solution ---ACCURACY : 28.159437981199808---
182887,170 us/op
Iteration   3: Naive solution ---ACCURACY : 28.159437981199808---
181947,602 us/op
Iteration   4: Naive solution ---ACCURACY : 28.159437981199808---
185197,114 us/op
Iteration   5: Naive solution ---ACCURACY : 28.159437981199808---
182773,293 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 182918,414 ±(99.9%) 5250,636 us/op

  Histogram, us/op:
    [181000,000, 181500,000) = 0 
    [181500,000, 182000,000) = 2 
    [182000,000, 182500,000) = 0 
    [182500,000, 183000,000) = 2 
    [183000,000, 183500,000) = 0 
    [183500,000, 184000,000) = 0 
    [184000,000, 184500,000) = 0 
    [184500,000, 185000,000) = 0 
    [185000,000, 185500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 181786,891 us/op
     p(50,0000) = 182773,293 us/op
     p(90,0000) = 185197,114 us/op
     p(95,0000) = 185197,114 us/op
     p(99,0000) = 185197,114 us/op
     p(99,9000) = 185197,114 us/op
     p(99,9900) = 185197,114 us/op
     p(99,9990) = 185197,114 us/op
     p(99,9999) = 185197,114 us/op
    p(100,0000) = 185197,114 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 12000000, maxSize = 250)

# Run progress: 27,50% complete, ETA 00:07:57
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.04203583859348---
5070162,495 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.04203583859348---
218678,305 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.04203583859348---
202748,323 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.04203583859348---
195400,515 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.04203583859348---
194553,973 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.04203583859348---
206769,312 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.04203583859348---
194756,386 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.04203583859348---
198931,992 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.04203583859348---
196465,507 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.04203583859348---
193760,361 us/op
Iteration   1: Naive solution ---ACCURACY : 50.04203583859348---
196462,941 us/op
Iteration   2: Naive solution ---ACCURACY : 50.04203583859348---
196396,539 us/op
Iteration   3: Naive solution ---ACCURACY : 50.04203583859348---
197190,793 us/op
Iteration   4: Naive solution ---ACCURACY : 50.04203583859348---
192730,012 us/op
Iteration   5: Naive solution ---ACCURACY : 50.04203583859348---
194393,583 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 195434,774 ±(99.9%) 7065,050 us/op

  Histogram, us/op:
    [192000,000, 192500,000) = 0 
    [192500,000, 193000,000) = 1 
    [193000,000, 193500,000) = 0 
    [193500,000, 194000,000) = 0 
    [194000,000, 194500,000) = 1 
    [194500,000, 195000,000) = 0 
    [195000,000, 195500,000) = 0 
    [195500,000, 196000,000) = 0 
    [196000,000, 196500,000) = 2 
    [196500,000, 197000,000) = 0 
    [197000,000, 197500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 192730,012 us/op
     p(50,0000) = 196396,539 us/op
     p(90,0000) = 197190,793 us/op
     p(95,0000) = 197190,793 us/op
     p(99,0000) = 197190,793 us/op
     p(99,9000) = 197190,793 us/op
     p(99,9900) = 197190,793 us/op
     p(99,9990) = 197190,793 us/op
     p(99,9999) = 197190,793 us/op
    p(100,0000) = 197190,793 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 12000000, maxSize = 500)

# Run progress: 28,33% complete, ETA 00:08:06
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.057644875748174---
5004526,219 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.057644875748174---
221954,762 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.057644875748174---
202404,446 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.057644875748174---
195017,501 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.057644875748174---
197122,467 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.057644875748174---
199887,920 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.057644875748174---
193566,289 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.057644875748174---
196748,757 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.057644875748174---
196884,447 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.057644875748174---
194893,039 us/op
Iteration   1: Naive solution ---ACCURACY : 50.057644875748174---
197590,165 us/op
Iteration   2: Naive solution ---ACCURACY : 50.057644875748174---
195943,597 us/op
Iteration   3: Naive solution ---ACCURACY : 50.057644875748174---
195421,044 us/op
Iteration   4: Naive solution ---ACCURACY : 50.057644875748174---
195157,683 us/op
Iteration   5: Naive solution ---ACCURACY : 50.057644875748174---
197191,434 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 196260,785 ±(99.9%) 4154,400 us/op

  Histogram, us/op:
    [195000,000, 195250,000) = 1 
    [195250,000, 195500,000) = 1 
    [195500,000, 195750,000) = 0 
    [195750,000, 196000,000) = 1 
    [196000,000, 196250,000) = 0 
    [196250,000, 196500,000) = 0 
    [196500,000, 196750,000) = 0 
    [196750,000, 197000,000) = 0 
    [197000,000, 197250,000) = 1 
    [197250,000, 197500,000) = 0 
    [197500,000, 197750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 195157,683 us/op
     p(50,0000) = 195943,597 us/op
     p(90,0000) = 197590,165 us/op
     p(95,0000) = 197590,165 us/op
     p(99,0000) = 197590,165 us/op
     p(99,9000) = 197590,165 us/op
     p(99,9900) = 197590,165 us/op
     p(99,9990) = 197590,165 us/op
     p(99,9999) = 197590,165 us/op
    p(100,0000) = 197590,165 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 12000000, maxSize = 750)

# Run progress: 29,17% complete, ETA 00:08:15
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 29.586848652163557---
5205083,287 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 29.586848652163557---
218574,372 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 29.586848652163557---
200226,023 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 29.586848652163557---
200923,721 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 29.586848652163557---
198391,476 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 29.586848652163557---
201368,323 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 29.586848652163557---
195912,802 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 29.586848652163557---
196213,373 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 29.586848652163557---
200225,701 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 29.586848652163557---
195168,911 us/op
Iteration   1: Naive solution ---ACCURACY : 29.586848652163557---
196342,006 us/op
Iteration   2: Naive solution ---ACCURACY : 29.586848652163557---
197319,105 us/op
Iteration   3: Naive solution ---ACCURACY : 29.586848652163557---
196987,097 us/op
Iteration   4: Naive solution ---ACCURACY : 29.586848652163557---
199156,860 us/op
Iteration   5: Naive solution ---ACCURACY : 29.586848652163557---
196196,692 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 197200,352 ±(99.9%) 4568,978 us/op

  Histogram, us/op:
    [196000,000, 196250,000) = 1 
    [196250,000, 196500,000) = 1 
    [196500,000, 196750,000) = 0 
    [196750,000, 197000,000) = 1 
    [197000,000, 197250,000) = 0 
    [197250,000, 197500,000) = 1 
    [197500,000, 197750,000) = 0 
    [197750,000, 198000,000) = 0 
    [198000,000, 198250,000) = 0 
    [198250,000, 198500,000) = 0 
    [198500,000, 198750,000) = 0 
    [198750,000, 199000,000) = 0 
    [199000,000, 199250,000) = 1 
    [199250,000, 199500,000) = 0 
    [199500,000, 199750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 196196,692 us/op
     p(50,0000) = 196987,097 us/op
     p(90,0000) = 199156,860 us/op
     p(95,0000) = 199156,860 us/op
     p(99,0000) = 199156,860 us/op
     p(99,9000) = 199156,860 us/op
     p(99,9900) = 199156,860 us/op
     p(99,9990) = 199156,860 us/op
     p(99,9999) = 199156,860 us/op
    p(100,0000) = 199156,860 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 13000000, maxSize = 250)

# Run progress: 30,00% complete, ETA 00:08:22
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.113536604887166---
5435119,805 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.113536604887166---
241267,059 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.113536604887166---
208788,628 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.113536604887166---
210154,193 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.113536604887166---
209057,443 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.113536604887166---
221295,237 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.113536604887166---
207437,179 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.113536604887166---
208148,350 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.113536604887166---
211812,952 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.113536604887166---
208705,226 us/op
Iteration   1: Naive solution ---ACCURACY : 50.113536604887166---
208182,352 us/op
Iteration   2: Naive solution ---ACCURACY : 50.113536604887166---
209214,305 us/op
Iteration   3: Naive solution ---ACCURACY : 50.113536604887166---
208280,190 us/op
Iteration   4: Naive solution ---ACCURACY : 50.113536604887166---
212102,296 us/op
Iteration   5: Naive solution ---ACCURACY : 50.113536604887166---
209973,272 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 209550,483 ±(99.9%) 6175,736 us/op

  Histogram, us/op:
    [208000,000, 208500,000) = 2 
    [208500,000, 209000,000) = 0 
    [209000,000, 209500,000) = 1 
    [209500,000, 210000,000) = 1 
    [210000,000, 210500,000) = 0 
    [210500,000, 211000,000) = 0 
    [211000,000, 211500,000) = 0 
    [211500,000, 212000,000) = 0 
    [212000,000, 212500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 208182,352 us/op
     p(50,0000) = 209214,305 us/op
     p(90,0000) = 212102,296 us/op
     p(95,0000) = 212102,296 us/op
     p(99,0000) = 212102,296 us/op
     p(99,9000) = 212102,296 us/op
     p(99,9900) = 212102,296 us/op
     p(99,9990) = 212102,296 us/op
     p(99,9999) = 212102,296 us/op
    p(100,0000) = 212102,296 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 13000000, maxSize = 500)

# Run progress: 30,83% complete, ETA 00:08:30
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.077767629358796---
5559719,149 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.077767629358796---
236310,031 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.077767629358796---
215884,624 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.077767629358796---
211878,712 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.077767629358796---
209974,876 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.077767629358796---
214016,395 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.077767629358796---
209735,895 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.077767629358796---
211961,794 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.077767629358796---
211058,475 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.077767629358796---
208825,198 us/op
Iteration   1: Naive solution ---ACCURACY : 50.077767629358796---
208982,380 us/op
Iteration   2: Naive solution ---ACCURACY : 50.077767629358796---
209375,017 us/op
Iteration   3: Naive solution ---ACCURACY : 50.077767629358796---
212934,402 us/op
Iteration   4: Naive solution ---ACCURACY : 50.077767629358796---
210674,179 us/op
Iteration   5: Naive solution ---ACCURACY : 50.077767629358796---
210443,537 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 210481,903 ±(99.9%) 5942,655 us/op

  Histogram, us/op:
    [208000,000, 208500,000) = 0 
    [208500,000, 209000,000) = 1 
    [209000,000, 209500,000) = 1 
    [209500,000, 210000,000) = 0 
    [210000,000, 210500,000) = 1 
    [210500,000, 211000,000) = 1 
    [211000,000, 211500,000) = 0 
    [211500,000, 212000,000) = 0 
    [212000,000, 212500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 208982,380 us/op
     p(50,0000) = 210443,537 us/op
     p(90,0000) = 212934,402 us/op
     p(95,0000) = 212934,402 us/op
     p(99,0000) = 212934,402 us/op
     p(99,9000) = 212934,402 us/op
     p(99,9900) = 212934,402 us/op
     p(99,9990) = 212934,402 us/op
     p(99,9999) = 212934,402 us/op
    p(100,0000) = 212934,402 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 13000000, maxSize = 750)

# Run progress: 31,67% complete, ETA 00:08:37
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 32.0581020529675---
5628654,658 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 32.0581020529675---
234058,790 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 32.0581020529675---
217651,807 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 32.0581020529675---
210484,918 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 32.0581020529675---
210064,695 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 32.0581020529675---
213698,822 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 32.0581020529675---
209774,709 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 32.0581020529675---
209508,461 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 32.0581020529675---
208648,447 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 32.0581020529675---
209777,276 us/op
Iteration   1: Naive solution ---ACCURACY : 32.0581020529675---
209267,876 us/op
Iteration   2: Naive solution ---ACCURACY : 32.0581020529675---
212067,972 us/op
Iteration   3: Naive solution ---ACCURACY : 32.0581020529675---
208954,472 us/op
Iteration   4: Naive solution ---ACCURACY : 32.0581020529675---
210992,073 us/op
Iteration   5: Naive solution ---ACCURACY : 32.0581020529675---
210278,335 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 210312,146 ±(99.9%) 4901,125 us/op

  Histogram, us/op:
    [208000,000, 208500,000) = 0 
    [208500,000, 209000,000) = 1 
    [209000,000, 209500,000) = 1 
    [209500,000, 210000,000) = 0 
    [210000,000, 210500,000) = 1 
    [210500,000, 211000,000) = 1 
    [211000,000, 211500,000) = 0 
    [211500,000, 212000,000) = 0 
    [212000,000, 212500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 208954,472 us/op
     p(50,0000) = 210278,335 us/op
     p(90,0000) = 212067,972 us/op
     p(95,0000) = 212067,972 us/op
     p(99,0000) = 212067,972 us/op
     p(99,9000) = 212067,972 us/op
     p(99,9900) = 212067,972 us/op
     p(99,9990) = 212067,972 us/op
     p(99,9999) = 212067,972 us/op
    p(100,0000) = 212067,972 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 14000000, maxSize = 250)

# Run progress: 32,50% complete, ETA 00:08:44
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.095864794825076---
6878675,508 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.095864794825076---
242600,545 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.095864794825076---
219354,832 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.095864794825076---
217953,661 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.095864794825076---
215098,711 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.095864794825076---
229689,753 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.095864794825076---
215452,532 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.095864794825076---
214291,947 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.095864794825076---
218299,463 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.095864794825076---
213826,814 us/op
Iteration   1: Naive solution ---ACCURACY : 50.095864794825076---
213880,064 us/op
Iteration   2: Naive solution ---ACCURACY : 50.095864794825076---
217415,071 us/op
Iteration   3: Naive solution ---ACCURACY : 50.095864794825076---
217490,454 us/op
Iteration   4: Naive solution ---ACCURACY : 50.095864794825076---
221005,572 us/op
Iteration   5: Naive solution ---ACCURACY : 50.095864794825076---
216692,992 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 217296,831 ±(99.9%) 9787,976 us/op

  Histogram, us/op:
    [213000,000, 213500,000) = 0 
    [213500,000, 214000,000) = 1 
    [214000,000, 214500,000) = 0 
    [214500,000, 215000,000) = 0 
    [215000,000, 215500,000) = 0 
    [215500,000, 216000,000) = 0 
    [216000,000, 216500,000) = 0 
    [216500,000, 217000,000) = 1 
    [217000,000, 217500,000) = 2 
    [217500,000, 218000,000) = 0 
    [218000,000, 218500,000) = 0 
    [218500,000, 219000,000) = 0 
    [219000,000, 219500,000) = 0 
    [219500,000, 220000,000) = 0 
    [220000,000, 220500,000) = 0 
    [220500,000, 221000,000) = 0 
    [221000,000, 221500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 213880,064 us/op
     p(50,0000) = 217415,071 us/op
     p(90,0000) = 221005,572 us/op
     p(95,0000) = 221005,572 us/op
     p(99,0000) = 221005,572 us/op
     p(99,9000) = 221005,572 us/op
     p(99,9900) = 221005,572 us/op
     p(99,9990) = 221005,572 us/op
     p(99,9999) = 221005,572 us/op
    p(100,0000) = 221005,572 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 14000000, maxSize = 500)

# Run progress: 33,33% complete, ETA 00:08:52
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.071497918260974---
6766261,670 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.071497918260974---
244948,342 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.071497918260974---
220780,062 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.071497918260974---
218716,799 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.071497918260974---
218249,742 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.071497918260974---
223632,126 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.071497918260974---
217273,605 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.071497918260974---
217008,320 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.071497918260974---
218260,970 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.071497918260974---
216970,147 us/op
Iteration   1: Naive solution ---ACCURACY : 50.071497918260974---
217026,605 us/op
Iteration   2: Naive solution ---ACCURACY : 50.071497918260974---
218282,462 us/op
Iteration   3: Naive solution ---ACCURACY : 50.071497918260974---
217914,206 us/op
Iteration   4: Naive solution ---ACCURACY : 50.071497918260974---
216417,762 us/op
Iteration   5: Naive solution ---ACCURACY : 50.071497918260974---
216533,564 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 217234,920 ±(99.9%) 3199,637 us/op

  Histogram, us/op:
    [216000,000, 216250,000) = 0 
    [216250,000, 216500,000) = 1 
    [216500,000, 216750,000) = 1 
    [216750,000, 217000,000) = 0 
    [217000,000, 217250,000) = 1 
    [217250,000, 217500,000) = 0 
    [217500,000, 217750,000) = 0 
    [217750,000, 218000,000) = 1 
    [218000,000, 218250,000) = 0 
    [218250,000, 218500,000) = 1 
    [218500,000, 218750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 216417,762 us/op
     p(50,0000) = 217026,605 us/op
     p(90,0000) = 218282,462 us/op
     p(95,0000) = 218282,462 us/op
     p(99,0000) = 218282,462 us/op
     p(99,9000) = 218282,462 us/op
     p(99,9900) = 218282,462 us/op
     p(99,9990) = 218282,462 us/op
     p(99,9999) = 218282,462 us/op
    p(100,0000) = 218282,462 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 14000000, maxSize = 750)

# Run progress: 34,17% complete, ETA 00:08:59
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 34.520738513048116---
6846616,659 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 34.520738513048116---
243580,531 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 34.520738513048116---
224152,432 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 34.520738513048116---
217489,170 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 34.520738513048116---
217812,518 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 34.520738513048116---
225998,527 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 34.520738513048116---
218697,553 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 34.520738513048116---
220813,103 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 34.520738513048116---
217876,995 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 34.520738513048116---
222874,120 us/op
Iteration   1: Naive solution ---ACCURACY : 34.520738513048116---
216835,419 us/op
Iteration   2: Naive solution ---ACCURACY : 34.520738513048116---
221825,167 us/op
Iteration   3: Naive solution ---ACCURACY : 34.520738513048116---
217509,380 us/op
Iteration   4: Naive solution ---ACCURACY : 34.520738513048116---
217891,750 us/op
Iteration   5: Naive solution ---ACCURACY : 34.520738513048116---
226831,916 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 220178,726 ±(99.9%) 16166,867 us/op

  Histogram, us/op:
    [216000,000, 217000,000) = 1 
    [217000,000, 218000,000) = 2 
    [218000,000, 219000,000) = 0 
    [219000,000, 220000,000) = 0 
    [220000,000, 221000,000) = 0 
    [221000,000, 222000,000) = 1 
    [222000,000, 223000,000) = 0 
    [223000,000, 224000,000) = 0 
    [224000,000, 225000,000) = 0 
    [225000,000, 226000,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 216835,419 us/op
     p(50,0000) = 217891,750 us/op
     p(90,0000) = 226831,916 us/op
     p(95,0000) = 226831,916 us/op
     p(99,0000) = 226831,916 us/op
     p(99,9000) = 226831,916 us/op
     p(99,9900) = 226831,916 us/op
     p(99,9990) = 226831,916 us/op
     p(99,9999) = 226831,916 us/op
    p(100,0000) = 226831,916 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 15000000, maxSize = 250)

# Run progress: 35,00% complete, ETA 00:09:05
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.148761053256685---
7009039,928 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.148761053256685---
257536,749 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.148761053256685---
236384,452 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.148761053256685---
232501,719 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.148761053256685---
231781,246 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.148761053256685---
231718,693 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.148761053256685---
231955,429 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.148761053256685---
232486,643 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.148761053256685---
229836,351 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.148761053256685---
230228,024 us/op
Iteration   1: Naive solution ---ACCURACY : 50.148761053256685---
232212,695 us/op
Iteration   2: Naive solution ---ACCURACY : 50.148761053256685---
232868,692 us/op
Iteration   3: Naive solution ---ACCURACY : 50.148761053256685---
240908,747 us/op
Iteration   4: Naive solution ---ACCURACY : 50.148761053256685---
234502,752 us/op
Iteration   5: Naive solution ---ACCURACY : 50.148761053256685---
233175,680 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 234733,713 ±(99.9%) 13674,624 us/op

  Histogram, us/op:
    [232000,000, 232500,000) = 1 
    [232500,000, 233000,000) = 1 
    [233000,000, 233500,000) = 1 
    [233500,000, 234000,000) = 0 
    [234000,000, 234500,000) = 0 
    [234500,000, 235000,000) = 1 
    [235000,000, 235500,000) = 0 
    [235500,000, 236000,000) = 0 
    [236000,000, 236500,000) = 0 
    [236500,000, 237000,000) = 0 
    [237000,000, 237500,000) = 0 
    [237500,000, 238000,000) = 0 
    [238000,000, 238500,000) = 0 
    [238500,000, 239000,000) = 0 
    [239000,000, 239500,000) = 0 
    [239500,000, 240000,000) = 0 
    [240000,000, 240500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 232212,695 us/op
     p(50,0000) = 233175,680 us/op
     p(90,0000) = 240908,747 us/op
     p(95,0000) = 240908,747 us/op
     p(99,0000) = 240908,747 us/op
     p(99,9000) = 240908,747 us/op
     p(99,9900) = 240908,747 us/op
     p(99,9990) = 240908,747 us/op
     p(99,9999) = 240908,747 us/op
    p(100,0000) = 240908,747 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 15000000, maxSize = 500)

# Run progress: 35,83% complete, ETA 00:09:12
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.069538719576855---
6945195,215 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.069538719576855---
257496,330 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.069538719576855---
235266,209 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.069538719576855---
232467,396 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.069538719576855---
232812,235 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.069538719576855---
236724,159 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.069538719576855---
229006,490 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.069538719576855---
232312,458 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.069538719576855---
233187,549 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.069538719576855---
234027,995 us/op
Iteration   1: Naive solution ---ACCURACY : 50.069538719576855---
232233,867 us/op
Iteration   2: Naive solution ---ACCURACY : 50.069538719576855---
230113,826 us/op
Iteration   3: Naive solution ---ACCURACY : 50.069538719576855---
232670,129 us/op
Iteration   4: Naive solution ---ACCURACY : 50.069538719576855---
232111,650 us/op
Iteration   5: Naive solution ---ACCURACY : 50.069538719576855---
232068,986 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 231839,692 ±(99.9%) 3826,574 us/op

  Histogram, us/op:
    [230000,000, 230250,000) = 1 
    [230250,000, 230500,000) = 0 
    [230500,000, 230750,000) = 0 
    [230750,000, 231000,000) = 0 
    [231000,000, 231250,000) = 0 
    [231250,000, 231500,000) = 0 
    [231500,000, 231750,000) = 0 
    [231750,000, 232000,000) = 0 
    [232000,000, 232250,000) = 3 
    [232250,000, 232500,000) = 0 
    [232500,000, 232750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 230113,826 us/op
     p(50,0000) = 232111,650 us/op
     p(90,0000) = 232670,129 us/op
     p(95,0000) = 232670,129 us/op
     p(99,0000) = 232670,129 us/op
     p(99,9000) = 232670,129 us/op
     p(99,9900) = 232670,129 us/op
     p(99,9990) = 232670,129 us/op
     p(99,9999) = 232670,129 us/op
    p(100,0000) = 232670,129 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 15000000, maxSize = 750)

# Run progress: 36,67% complete, ETA 00:09:18
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 36.97839988648449---
4555855,984 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 36.97839988648449---
264573,720 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 36.97839988648449---
233102,221 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 36.97839988648449---
235336,140 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 36.97839988648449---
238356,614 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 36.97839988648449---
233900,324 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 36.97839988648449---
232918,735 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 36.97839988648449---
233392,208 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 36.97839988648449---
233882,681 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 36.97839988648449---
233501,593 us/op
Iteration   1: Naive solution ---ACCURACY : 36.97839988648449---
229997,703 us/op
Iteration   2: Naive solution ---ACCURACY : 36.97839988648449---
233695,345 us/op
Iteration   3: Naive solution ---ACCURACY : 36.97839988648449---
231554,453 us/op
Iteration   4: Naive solution ---ACCURACY : 36.97839988648449---
236053,085 us/op
Iteration   5: Naive solution ---ACCURACY : 36.97839988648449---
243177,951 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 234895,707 ±(99.9%) 19871,932 us/op

  Histogram, us/op:
    [220000,000, 222500,000) = 0 
    [222500,000, 225000,000) = 0 
    [225000,000, 227500,000) = 0 
    [227500,000, 230000,000) = 1 
    [230000,000, 232500,000) = 1 
    [232500,000, 235000,000) = 1 
    [235000,000, 237500,000) = 1 
    [237500,000, 240000,000) = 0 
    [240000,000, 242500,000) = 0 
    [242500,000, 245000,000) = 1 
    [245000,000, 247500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 229997,703 us/op
     p(50,0000) = 233695,345 us/op
     p(90,0000) = 243177,951 us/op
     p(95,0000) = 243177,951 us/op
     p(99,0000) = 243177,951 us/op
     p(99,9000) = 243177,951 us/op
     p(99,9900) = 243177,951 us/op
     p(99,9990) = 243177,951 us/op
     p(99,9999) = 243177,951 us/op
    p(100,0000) = 243177,951 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 16000000, maxSize = 250)

# Run progress: 37,50% complete, ETA 00:09:23
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.128099442411845---
7894254,236 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.128099442411845---
271377,806 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.128099442411845---
248378,131 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.128099442411845---
249115,928 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.128099442411845---
246652,972 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.128099442411845---
242722,121 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.128099442411845---
242902,721 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.128099442411845---
247591,255 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.128099442411845---
246800,530 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.128099442411845---
242574,562 us/op
Iteration   1: Naive solution ---ACCURACY : 50.128099442411845---
244214,715 us/op
Iteration   2: Naive solution ---ACCURACY : 50.128099442411845---
244893,488 us/op
Iteration   3: Naive solution ---ACCURACY : 50.128099442411845---
247194,450 us/op
Iteration   4: Naive solution ---ACCURACY : 50.128099442411845---
243831,703 us/op
Iteration   5: Naive solution ---ACCURACY : 50.128099442411845---
242599,904 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 244546,852 ±(99.9%) 6541,079 us/op

  Histogram, us/op:
    [242000,000, 242500,000) = 0 
    [242500,000, 243000,000) = 1 
    [243000,000, 243500,000) = 0 
    [243500,000, 244000,000) = 1 
    [244000,000, 244500,000) = 1 
    [244500,000, 245000,000) = 1 
    [245000,000, 245500,000) = 0 
    [245500,000, 246000,000) = 0 
    [246000,000, 246500,000) = 0 
    [246500,000, 247000,000) = 0 
    [247000,000, 247500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 242599,904 us/op
     p(50,0000) = 244214,715 us/op
     p(90,0000) = 247194,450 us/op
     p(95,0000) = 247194,450 us/op
     p(99,0000) = 247194,450 us/op
     p(99,9000) = 247194,450 us/op
     p(99,9900) = 247194,450 us/op
     p(99,9990) = 247194,450 us/op
     p(99,9999) = 247194,450 us/op
    p(100,0000) = 247194,450 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 16000000, maxSize = 500)

# Run progress: 38,33% complete, ETA 00:09:32
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.0618332072564---
5013120,262 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.0618332072564---
272659,647 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.0618332072564---
250210,432 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.0618332072564---
246329,625 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.0618332072564---
244775,762 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.0618332072564---
248961,633 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.0618332072564---
245122,847 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.0618332072564---
245011,856 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.0618332072564---
244111,103 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.0618332072564---
247381,144 us/op
Iteration   1: Naive solution ---ACCURACY : 50.0618332072564---
244523,627 us/op
Iteration   2: Naive solution ---ACCURACY : 50.0618332072564---
244772,233 us/op
Iteration   3: Naive solution ---ACCURACY : 50.0618332072564---
243857,366 us/op
Iteration   4: Naive solution ---ACCURACY : 50.0618332072564---
244822,275 us/op
Iteration   5: Naive solution ---ACCURACY : 50.0618332072564---
243330,643 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 244261,229 ±(99.9%) 2490,928 us/op

  Histogram, us/op:
    [243000,000, 243125,000) = 0 
    [243125,000, 243250,000) = 0 
    [243250,000, 243375,000) = 1 
    [243375,000, 243500,000) = 0 
    [243500,000, 243625,000) = 0 
    [243625,000, 243750,000) = 0 
    [243750,000, 243875,000) = 1 
    [243875,000, 244000,000) = 0 
    [244000,000, 244125,000) = 0 
    [244125,000, 244250,000) = 0 
    [244250,000, 244375,000) = 0 
    [244375,000, 244500,000) = 0 
    [244500,000, 244625,000) = 1 
    [244625,000, 244750,000) = 0 
    [244750,000, 244875,000) = 2 

  Percentiles, us/op:
      p(0,0000) = 243330,643 us/op
     p(50,0000) = 244523,627 us/op
     p(90,0000) = 244822,275 us/op
     p(95,0000) = 244822,275 us/op
     p(99,0000) = 244822,275 us/op
     p(99,9000) = 244822,275 us/op
     p(99,9900) = 244822,275 us/op
     p(99,9990) = 244822,275 us/op
     p(99,9999) = 244822,275 us/op
    p(100,0000) = 244822,275 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 16000000, maxSize = 750)

# Run progress: 39,17% complete, ETA 00:09:35
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 39.44320377347259---
9617219,779 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 39.44320377347259---
274219,925 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 39.44320377347259---
250944,058 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 39.44320377347259---
246133,627 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 39.44320377347259---
248609,094 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 39.44320377347259---
243912,540 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 39.44320377347259---
247413,864 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 39.44320377347259---
245801,619 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 39.44320377347259---
248865,398 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 39.44320377347259---
246136,193 us/op
Iteration   1: Naive solution ---ACCURACY : 39.44320377347259---
245422,456 us/op
Iteration   2: Naive solution ---ACCURACY : 39.44320377347259---
247240,643 us/op
Iteration   3: Naive solution ---ACCURACY : 39.44320377347259---
248648,871 us/op
Iteration   4: Naive solution ---ACCURACY : 39.44320377347259---
246066,905 us/op
Iteration   5: Naive solution ---ACCURACY : 39.44320377347259---
248204,268 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 247116,629 ±(99.9%) 5279,121 us/op

  Histogram, us/op:
    [245000,000, 245250,000) = 0 
    [245250,000, 245500,000) = 1 
    [245500,000, 245750,000) = 0 
    [245750,000, 246000,000) = 0 
    [246000,000, 246250,000) = 1 
    [246250,000, 246500,000) = 0 
    [246500,000, 246750,000) = 0 
    [246750,000, 247000,000) = 0 
    [247000,000, 247250,000) = 1 
    [247250,000, 247500,000) = 0 
    [247500,000, 247750,000) = 0 
    [247750,000, 248000,000) = 0 
    [248000,000, 248250,000) = 1 
    [248250,000, 248500,000) = 0 
    [248500,000, 248750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 245422,456 us/op
     p(50,0000) = 247240,643 us/op
     p(90,0000) = 248648,871 us/op
     p(95,0000) = 248648,871 us/op
     p(99,0000) = 248648,871 us/op
     p(99,9000) = 248648,871 us/op
     p(99,9900) = 248648,871 us/op
     p(99,9990) = 248648,871 us/op
     p(99,9999) = 248648,871 us/op
    p(100,0000) = 248648,871 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 17000000, maxSize = 250)

# Run progress: 40,00% complete, ETA 00:09:42
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.1176601220391---
7593089,351 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.1176601220391---
294519,585 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.1176601220391---
261204,879 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.1176601220391---
258180,556 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.1176601220391---
260747,446 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.1176601220391---
261613,233 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.1176601220391---
259023,248 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.1176601220391---
257373,792 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.1176601220391---
257079,315 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.1176601220391---
261329,342 us/op
Iteration   1: Naive solution ---ACCURACY : 50.1176601220391---
262617,919 us/op
Iteration   2: Naive solution ---ACCURACY : 50.1176601220391---
259787,669 us/op
Iteration   3: Naive solution ---ACCURACY : 50.1176601220391---
258936,957 us/op
Iteration   4: Naive solution ---ACCURACY : 50.1176601220391---
260552,410 us/op
Iteration   5: Naive solution ---ACCURACY : 50.1176601220391---
261882,047 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 260755,400 ±(99.9%) 5783,263 us/op

  Histogram, us/op:
    [258000,000, 258500,000) = 0 
    [258500,000, 259000,000) = 1 
    [259000,000, 259500,000) = 0 
    [259500,000, 260000,000) = 1 
    [260000,000, 260500,000) = 0 
    [260500,000, 261000,000) = 1 
    [261000,000, 261500,000) = 0 
    [261500,000, 262000,000) = 1 
    [262000,000, 262500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 258936,957 us/op
     p(50,0000) = 260552,410 us/op
     p(90,0000) = 262617,919 us/op
     p(95,0000) = 262617,919 us/op
     p(99,0000) = 262617,919 us/op
     p(99,9000) = 262617,919 us/op
     p(99,9900) = 262617,919 us/op
     p(99,9990) = 262617,919 us/op
     p(99,9999) = 262617,919 us/op
    p(100,0000) = 262617,919 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 17000000, maxSize = 500)

# Run progress: 40,83% complete, ETA 00:09:50
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.07436357751776---
7494533,892 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.07436357751776---
290075,486 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.07436357751776---
268640,581 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.07436357751776---
262889,299 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.07436357751776---
267386,008 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.07436357751776---
263273,275 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.07436357751776---
259421,016 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.07436357751776---
262594,502 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.07436357751776---
261413,387 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.07436357751776---
265683,301 us/op
Iteration   1: Naive solution ---ACCURACY : 50.07436357751776---
260205,004 us/op
Iteration   2: Naive solution ---ACCURACY : 50.07436357751776---
269754,975 us/op
Iteration   3: Naive solution ---ACCURACY : 50.07436357751776---
265455,227 us/op
Iteration   4: Naive solution ---ACCURACY : 50.07436357751776---
262204,433 us/op
Iteration   5: Naive solution ---ACCURACY : 50.07436357751776---
258626,442 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 263249,216 ±(99.9%) 17103,993 us/op

  Histogram, us/op:
    [250000,000, 251250,000) = 0 
    [251250,000, 252500,000) = 0 
    [252500,000, 253750,000) = 0 
    [253750,000, 255000,000) = 0 
    [255000,000, 256250,000) = 0 
    [256250,000, 257500,000) = 0 
    [257500,000, 258750,000) = 1 
    [258750,000, 260000,000) = 0 
    [260000,000, 261250,000) = 1 
    [261250,000, 262500,000) = 1 
    [262500,000, 263750,000) = 0 
    [263750,000, 265000,000) = 0 
    [265000,000, 266250,000) = 1 
    [266250,000, 267500,000) = 0 
    [267500,000, 268750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 258626,442 us/op
     p(50,0000) = 262204,433 us/op
     p(90,0000) = 269754,975 us/op
     p(95,0000) = 269754,975 us/op
     p(99,0000) = 269754,975 us/op
     p(99,9000) = 269754,975 us/op
     p(99,9900) = 269754,975 us/op
     p(99,9990) = 269754,975 us/op
     p(99,9999) = 269754,975 us/op
    p(100,0000) = 269754,975 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 17000000, maxSize = 750)

# Run progress: 41,67% complete, ETA 00:09:55
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 41.90764828043119---
5176411,565 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 41.90764828043119---
289438,736 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 41.90764828043119---
269981,446 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 41.90764828043119---
265468,379 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 41.90764828043119---
265675,924 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 41.90764828043119---
263406,398 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 41.90764828043119---
267989,717 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 41.90764828043119---
265566,217 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 41.90764828043119---
263217,459 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 41.90764828043119---
262977,835 us/op
Iteration   1: Naive solution ---ACCURACY : 41.90764828043119---
264372,591 us/op
Iteration   2: Naive solution ---ACCURACY : 41.90764828043119---
265212,716 us/op
Iteration   3: Naive solution ---ACCURACY : 41.90764828043119---
263313,051 us/op
Iteration   4: Naive solution ---ACCURACY : 41.90764828043119---
263748,672 us/op
Iteration   5: Naive solution ---ACCURACY : 41.90764828043119---
265270,778 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 264383,562 ±(99.9%) 3347,984 us/op

  Histogram, us/op:
    [263000,000, 263250,000) = 0 
    [263250,000, 263500,000) = 1 
    [263500,000, 263750,000) = 1 
    [263750,000, 264000,000) = 0 
    [264000,000, 264250,000) = 0 
    [264250,000, 264500,000) = 1 
    [264500,000, 264750,000) = 0 
    [264750,000, 265000,000) = 0 
    [265000,000, 265250,000) = 1 
    [265250,000, 265500,000) = 1 
    [265500,000, 265750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 263313,051 us/op
     p(50,0000) = 264372,591 us/op
     p(90,0000) = 265270,778 us/op
     p(95,0000) = 265270,778 us/op
     p(99,0000) = 265270,778 us/op
     p(99,9000) = 265270,778 us/op
     p(99,9900) = 265270,778 us/op
     p(99,9990) = 265270,778 us/op
     p(99,9999) = 265270,778 us/op
    p(100,0000) = 265270,778 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 18000000, maxSize = 250)

# Run progress: 42,50% complete, ETA 00:09:58
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.1346047806116---
7822428,812 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.1346047806116---
303799,458 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.1346047806116---
279629,575 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.1346047806116---
276406,368 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.1346047806116---
282476,185 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.1346047806116---
278268,181 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.1346047806116---
274795,406 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.1346047806116---
276537,246 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.1346047806116---
274319,688 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.1346047806116---
274706,870 us/op
Iteration   1: Naive solution ---ACCURACY : 50.1346047806116---
277182,658 us/op
Iteration   2: Naive solution ---ACCURACY : 50.1346047806116---
272788,600 us/op
Iteration   3: Naive solution ---ACCURACY : 50.1346047806116---
277990,064 us/op
Iteration   4: Naive solution ---ACCURACY : 50.1346047806116---
276797,079 us/op
Iteration   5: Naive solution ---ACCURACY : 50.1346047806116---
281310,468 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 277213,774 ±(99.9%) 11733,774 us/op

  Histogram, us/op:
    [272000,000, 273000,000) = 1 
    [273000,000, 274000,000) = 0 
    [274000,000, 275000,000) = 0 
    [275000,000, 276000,000) = 0 
    [276000,000, 277000,000) = 1 
    [277000,000, 278000,000) = 2 
    [278000,000, 279000,000) = 0 
    [279000,000, 280000,000) = 0 
    [280000,000, 281000,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 272788,600 us/op
     p(50,0000) = 277182,658 us/op
     p(90,0000) = 281310,468 us/op
     p(95,0000) = 281310,468 us/op
     p(99,0000) = 281310,468 us/op
     p(99,9000) = 281310,468 us/op
     p(99,9900) = 281310,468 us/op
     p(99,9990) = 281310,468 us/op
     p(99,9999) = 281310,468 us/op
    p(100,0000) = 281310,468 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 18000000, maxSize = 500)

# Run progress: 43,33% complete, ETA 00:10:03
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.06150045130525---
8022647,457 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.06150045130525---
300879,068 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.06150045130525---
279386,423 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.06150045130525---
277743,062 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.06150045130525---
275013,216 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.06150045130525---
278622,964 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.06150045130525---
278063,523 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.06150045130525---
276849,046 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.06150045130525---
276075,322 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.06150045130525---
275811,961 us/op
Iteration   1: Naive solution ---ACCURACY : 50.06150045130525---
275868,739 us/op
Iteration   2: Naive solution ---ACCURACY : 50.06150045130525---
277203,508 us/op
Iteration   3: Naive solution ---ACCURACY : 50.06150045130525---
276780,078 us/op
Iteration   4: Naive solution ---ACCURACY : 50.06150045130525---
275352,602 us/op
Iteration   5: Naive solution ---ACCURACY : 50.06150045130525---
278070,900 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 276655,165 ±(99.9%) 4145,360 us/op

  Histogram, us/op:
    [275000,000, 275250,000) = 0 
    [275250,000, 275500,000) = 1 
    [275500,000, 275750,000) = 0 
    [275750,000, 276000,000) = 1 
    [276000,000, 276250,000) = 0 
    [276250,000, 276500,000) = 0 
    [276500,000, 276750,000) = 0 
    [276750,000, 277000,000) = 1 
    [277000,000, 277250,000) = 1 
    [277250,000, 277500,000) = 0 
    [277500,000, 277750,000) = 0 
    [277750,000, 278000,000) = 0 
    [278000,000, 278250,000) = 1 
    [278250,000, 278500,000) = 0 
    [278500,000, 278750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 275352,602 us/op
     p(50,0000) = 276780,078 us/op
     p(90,0000) = 278070,900 us/op
     p(95,0000) = 278070,900 us/op
     p(99,0000) = 278070,900 us/op
     p(99,9000) = 278070,900 us/op
     p(99,9900) = 278070,900 us/op
     p(99,9990) = 278070,900 us/op
     p(99,9999) = 278070,900 us/op
    p(100,0000) = 278070,900 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 18000000, maxSize = 750)

# Run progress: 44,17% complete, ETA 00:10:06
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 44.37453697832138---
8181816,082 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 44.37453697832138---
303867,464 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 44.37453697832138---
280558,877 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 44.37453697832138---
279342,797 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 44.37453697832138---
275641,305 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 44.37453697832138---
277613,467 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 44.37453697832138---
274630,525 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 44.37453697832138---
280812,936 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 44.37453697832138---
275771,863 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 44.37453697832138---
274839,673 us/op
Iteration   1: Naive solution ---ACCURACY : 44.37453697832138---
276721,054 us/op
Iteration   2: Naive solution ---ACCURACY : 44.37453697832138---
279052,169 us/op
Iteration   3: Naive solution ---ACCURACY : 44.37453697832138---
275629,436 us/op
Iteration   4: Naive solution ---ACCURACY : 44.37453697832138---
274648,488 us/op
Iteration   5: Naive solution ---ACCURACY : 44.37453697832138---
278892,420 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 276988,713 ±(99.9%) 7525,492 us/op

  Histogram, us/op:
    [274000,000, 274500,000) = 0 
    [274500,000, 275000,000) = 1 
    [275000,000, 275500,000) = 0 
    [275500,000, 276000,000) = 1 
    [276000,000, 276500,000) = 0 
    [276500,000, 277000,000) = 1 
    [277000,000, 277500,000) = 0 
    [277500,000, 278000,000) = 0 
    [278000,000, 278500,000) = 0 
    [278500,000, 279000,000) = 1 
    [279000,000, 279500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 274648,488 us/op
     p(50,0000) = 276721,054 us/op
     p(90,0000) = 279052,169 us/op
     p(95,0000) = 279052,169 us/op
     p(99,0000) = 279052,169 us/op
     p(99,9000) = 279052,169 us/op
     p(99,9900) = 279052,169 us/op
     p(99,9990) = 279052,169 us/op
     p(99,9999) = 279052,169 us/op
    p(100,0000) = 279052,169 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 19000000, maxSize = 250)

# Run progress: 45,00% complete, ETA 00:10:10
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.16323489946141---
10599706,742 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.16323489946141---
320689,858 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.16323489946141---
292849,279 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.16323489946141---
287157,662 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.16323489946141---
289861,846 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.16323489946141---
292433,226 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.16323489946141---
289353,409 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.16323489946141---
290964,049 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.16323489946141---
291981,888 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.16323489946141---
292215,737 us/op
Iteration   1: Naive solution ---ACCURACY : 50.16323489946141---
291519,962 us/op
Iteration   2: Naive solution ---ACCURACY : 50.16323489946141---
289400,884 us/op
Iteration   3: Naive solution ---ACCURACY : 50.16323489946141---
291728,470 us/op
Iteration   4: Naive solution ---ACCURACY : 50.16323489946141---
288828,611 us/op
Iteration   5: Naive solution ---ACCURACY : 50.16323489946141---
294857,689 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 291267,123 ±(99.9%) 9152,496 us/op

  Histogram, us/op:
    [288000,000, 288500,000) = 0 
    [288500,000, 289000,000) = 1 
    [289000,000, 289500,000) = 1 
    [289500,000, 290000,000) = 0 
    [290000,000, 290500,000) = 0 
    [290500,000, 291000,000) = 0 
    [291000,000, 291500,000) = 0 
    [291500,000, 292000,000) = 2 
    [292000,000, 292500,000) = 0 
    [292500,000, 293000,000) = 0 
    [293000,000, 293500,000) = 0 
    [293500,000, 294000,000) = 0 
    [294000,000, 294500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 288828,611 us/op
     p(50,0000) = 291519,962 us/op
     p(90,0000) = 294857,689 us/op
     p(95,0000) = 294857,689 us/op
     p(99,0000) = 294857,689 us/op
     p(99,9000) = 294857,689 us/op
     p(99,9900) = 294857,689 us/op
     p(99,9990) = 294857,689 us/op
     p(99,9999) = 294857,689 us/op
    p(100,0000) = 294857,689 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 19000000, maxSize = 500)

# Run progress: 45,83% complete, ETA 00:10:15
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.05398489936055---
7895756,453 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.05398489936055---
318566,931 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.05398489936055---
295432,849 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.05398489936055---
289706,909 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.05398489936055---
288996,059 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.05398489936055---
293451,706 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.05398489936055---
291755,095 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.05398489936055---
291443,617 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.05398489936055---
292051,176 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.05398489936055---
289026,853 us/op
Iteration   1: Naive solution ---ACCURACY : 50.05398489936055---
288887,955 us/op
Iteration   2: Naive solution ---ACCURACY : 50.05398489936055---
288082,475 us/op
Iteration   3: Naive solution ---ACCURACY : 50.05398489936055---
291649,238 us/op
Iteration   4: Naive solution ---ACCURACY : 50.05398489936055---
291457,090 us/op
Iteration   5: Naive solution ---ACCURACY : 50.05398489936055---
288410,633 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 289697,478 ±(99.9%) 6620,738 us/op

  Histogram, us/op:
    [288000,000, 288250,000) = 1 
    [288250,000, 288500,000) = 1 
    [288500,000, 288750,000) = 0 
    [288750,000, 289000,000) = 1 
    [289000,000, 289250,000) = 0 
    [289250,000, 289500,000) = 0 
    [289500,000, 289750,000) = 0 
    [289750,000, 290000,000) = 0 
    [290000,000, 290250,000) = 0 
    [290250,000, 290500,000) = 0 
    [290500,000, 290750,000) = 0 
    [290750,000, 291000,000) = 0 
    [291000,000, 291250,000) = 0 
    [291250,000, 291500,000) = 1 
    [291500,000, 291750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 288082,475 us/op
     p(50,0000) = 288887,955 us/op
     p(90,0000) = 291649,238 us/op
     p(95,0000) = 291649,238 us/op
     p(99,0000) = 291649,238 us/op
     p(99,9000) = 291649,238 us/op
     p(99,9900) = 291649,238 us/op
     p(99,9990) = 291649,238 us/op
     p(99,9999) = 291649,238 us/op
    p(100,0000) = 291649,238 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 19000000, maxSize = 750)

# Run progress: 46,67% complete, ETA 00:10:17
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 46.852893457131486---
11072837,808 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 46.852893457131486---
323619,552 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 46.852893457131486---
289638,904 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 46.852893457131486---
290190,325 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 46.852893457131486---
291799,684 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 46.852893457131486---
292434,188 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 46.852893457131486---
287271,861 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 46.852893457131486---
296629,362 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 46.852893457131486---
291317,551 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 46.852893457131486---
292142,599 us/op
Iteration   1: Naive solution ---ACCURACY : 46.852893457131486---
290538,373 us/op
Iteration   2: Naive solution ---ACCURACY : 46.852893457131486---
289843,562 us/op
Iteration   3: Naive solution ---ACCURACY : 46.852893457131486---
290535,806 us/op
Iteration   4: Naive solution ---ACCURACY : 46.852893457131486---
289390,618 us/op
Iteration   5: Naive solution ---ACCURACY : 46.852893457131486---
291208,805 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 290303,433 ±(99.9%) 2704,790 us/op

  Histogram, us/op:
    [289000,000, 289250,000) = 0 
    [289250,000, 289500,000) = 1 
    [289500,000, 289750,000) = 0 
    [289750,000, 290000,000) = 1 
    [290000,000, 290250,000) = 0 
    [290250,000, 290500,000) = 0 
    [290500,000, 290750,000) = 2 
    [290750,000, 291000,000) = 0 
    [291000,000, 291250,000) = 1 
    [291250,000, 291500,000) = 0 
    [291500,000, 291750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 289390,618 us/op
     p(50,0000) = 290535,806 us/op
     p(90,0000) = 291208,805 us/op
     p(95,0000) = 291208,805 us/op
     p(99,0000) = 291208,805 us/op
     p(99,9000) = 291208,805 us/op
     p(99,9900) = 291208,805 us/op
     p(99,9990) = 291208,805 us/op
     p(99,9999) = 291208,805 us/op
    p(100,0000) = 291208,805 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 20000000, maxSize = 250)

# Run progress: 47,50% complete, ETA 00:10:22
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.1287276220535---
8364707,101 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.1287276220535---
336455,922 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.1287276220535---
306812,233 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.1287276220535---
300003,336 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.1287276220535---
308391,758 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.1287276220535---
300914,033 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.1287276220535---
300265,414 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.1287276220535---
299745,749 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.1287276220535---
305326,697 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.1287276220535---
302164,117 us/op
Iteration   1: Naive solution ---ACCURACY : 50.1287276220535---
301749,026 us/op
Iteration   2: Naive solution ---ACCURACY : 50.1287276220535---
304872,149 us/op
Iteration   3: Naive solution ---ACCURACY : 50.1287276220535---
303132,554 us/op
Iteration   4: Naive solution ---ACCURACY : 50.1287276220535---
301524,479 us/op
Iteration   5: Naive solution ---ACCURACY : 50.1287276220535---
303731,773 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 303001,996 ±(99.9%) 5377,160 us/op

  Histogram, us/op:
    [301000,000, 301250,000) = 0 
    [301250,000, 301500,000) = 0 
    [301500,000, 301750,000) = 2 
    [301750,000, 302000,000) = 0 
    [302000,000, 302250,000) = 0 
    [302250,000, 302500,000) = 0 
    [302500,000, 302750,000) = 0 
    [302750,000, 303000,000) = 0 
    [303000,000, 303250,000) = 1 
    [303250,000, 303500,000) = 0 
    [303500,000, 303750,000) = 1 
    [303750,000, 304000,000) = 0 
    [304000,000, 304250,000) = 0 
    [304250,000, 304500,000) = 0 
    [304500,000, 304750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 301524,479 us/op
     p(50,0000) = 303132,554 us/op
     p(90,0000) = 304872,149 us/op
     p(95,0000) = 304872,149 us/op
     p(99,0000) = 304872,149 us/op
     p(99,9000) = 304872,149 us/op
     p(99,9900) = 304872,149 us/op
     p(99,9990) = 304872,149 us/op
     p(99,9999) = 304872,149 us/op
    p(100,0000) = 304872,149 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 20000000, maxSize = 500)

# Run progress: 48,33% complete, ETA 00:10:24
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 50.08587179746853---
11038885,709 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 50.08587179746853---
334148,224 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 50.08587179746853---
316979,385 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 50.08587179746853---
323552,828 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 50.08587179746853---
303823,837 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 50.08587179746853---
302658,440 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 50.08587179746853---
305866,891 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 50.08587179746853---
308125,189 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 50.08587179746853---
311171,325 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 50.08587179746853---
306082,776 us/op
Iteration   1: Naive solution ---ACCURACY : 50.08587179746853---
304419,207 us/op
Iteration   2: Naive solution ---ACCURACY : 50.08587179746853---
304350,239 us/op
Iteration   3: Naive solution ---ACCURACY : 50.08587179746853---
307693,739 us/op
Iteration   4: Naive solution ---ACCURACY : 50.08587179746853---
307929,193 us/op
Iteration   5: Naive solution ---ACCURACY : 50.08587179746853---
304946,571 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 305867,790 ±(99.9%) 6897,241 us/op

  Histogram, us/op:
    [304000,000, 304250,000) = 0 
    [304250,000, 304500,000) = 2 
    [304500,000, 304750,000) = 0 
    [304750,000, 305000,000) = 1 
    [305000,000, 305250,000) = 0 
    [305250,000, 305500,000) = 0 
    [305500,000, 305750,000) = 0 
    [305750,000, 306000,000) = 0 
    [306000,000, 306250,000) = 0 
    [306250,000, 306500,000) = 0 
    [306500,000, 306750,000) = 0 
    [306750,000, 307000,000) = 0 
    [307000,000, 307250,000) = 0 
    [307250,000, 307500,000) = 0 
    [307500,000, 307750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 304350,239 us/op
     p(50,0000) = 304946,571 us/op
     p(90,0000) = 307929,193 us/op
     p(95,0000) = 307929,193 us/op
     p(99,0000) = 307929,193 us/op
     p(99,9000) = 307929,193 us/op
     p(99,9900) = 307929,193 us/op
     p(99,9990) = 307929,193 us/op
     p(99,9999) = 307929,193 us/op
    p(100,0000) = 307929,193 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 20000000, maxSize = 750)

# Run progress: 49,17% complete, ETA 00:10:27
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution ---ACCURACY : 49.29601455753681---
11886483,638 us/op
# Warmup Iteration   2: Naive solution ---ACCURACY : 49.29601455753681---
336333,384 us/op
# Warmup Iteration   3: Naive solution ---ACCURACY : 49.29601455753681---
312729,038 us/op
# Warmup Iteration   4: Naive solution ---ACCURACY : 49.29601455753681---
304632,526 us/op
# Warmup Iteration   5: Naive solution ---ACCURACY : 49.29601455753681---
307076,556 us/op
# Warmup Iteration   6: Naive solution ---ACCURACY : 49.29601455753681---
305009,444 us/op
# Warmup Iteration   7: Naive solution ---ACCURACY : 49.29601455753681---
304506,138 us/op
# Warmup Iteration   8: Naive solution ---ACCURACY : 49.29601455753681---
308032,163 us/op
# Warmup Iteration   9: Naive solution ---ACCURACY : 49.29601455753681---
305071,996 us/op
# Warmup Iteration  10: Naive solution ---ACCURACY : 49.29601455753681---
304016,948 us/op
Iteration   1: Naive solution ---ACCURACY : 49.29601455753681---
311779,526 us/op
Iteration   2: Naive solution ---ACCURACY : 49.29601455753681---
306762,511 us/op
Iteration   3: Naive solution ---ACCURACY : 49.29601455753681---
304059,933 us/op
Iteration   4: Naive solution ---ACCURACY : 49.29601455753681---
305658,384 us/op
Iteration   5: Naive solution ---ACCURACY : 49.29601455753681---
305296,864 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean = 306711,444 ±(99.9%) 11524,390 us/op

  Histogram, us/op:
    [304000,000, 304500,000) = 1 
    [304500,000, 305000,000) = 0 
    [305000,000, 305500,000) = 1 
    [305500,000, 306000,000) = 1 
    [306000,000, 306500,000) = 0 
    [306500,000, 307000,000) = 1 
    [307000,000, 307500,000) = 0 
    [307500,000, 308000,000) = 0 
    [308000,000, 308500,000) = 0 
    [308500,000, 309000,000) = 0 
    [309000,000, 309500,000) = 0 
    [309500,000, 310000,000) = 0 
    [310000,000, 310500,000) = 0 
    [310500,000, 311000,000) = 0 
    [311000,000, 311500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 304059,933 us/op
     p(50,0000) = 305658,384 us/op
     p(90,0000) = 311779,526 us/op
     p(95,0000) = 311779,526 us/op
     p(99,0000) = 311779,526 us/op
     p(99,9000) = 311779,526 us/op
     p(99,9900) = 311779,526 us/op
     p(99,9990) = 311779,526 us/op
     p(99,9999) = 311779,526 us/op
    p(100,0000) = 311779,526 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 1000000, maxSize = 250)

# Run progress: 50,00% complete, ETA 00:10:30
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
104624,955 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
61361,228 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
43782,431 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
43032,445 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
42977,591 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
43119,376 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
44232,487 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
43282,333 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
43517,466 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
43276,560 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
43114,244 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
43887,647 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
44149,725 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
43464,537 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.17996564452979---
43094,356 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =  43542,102 ±(99.9%) 1804,225 us/op

  Histogram, us/op:
    [43000,000, 43125,000) = 2 
    [43125,000, 43250,000) = 0 
    [43250,000, 43375,000) = 0 
    [43375,000, 43500,000) = 1 
    [43500,000, 43625,000) = 0 
    [43625,000, 43750,000) = 0 
    [43750,000, 43875,000) = 0 
    [43875,000, 44000,000) = 1 
    [44000,000, 44125,000) = 0 
    [44125,000, 44250,000) = 1 
    [44250,000, 44375,000) = 0 
    [44375,000, 44500,000) = 0 
    [44500,000, 44625,000) = 0 
    [44625,000, 44750,000) = 0 
    [44750,000, 44875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  43094,356 us/op
     p(50,0000) =  43464,537 us/op
     p(90,0000) =  44149,725 us/op
     p(95,0000) =  44149,725 us/op
     p(99,0000) =  44149,725 us/op
     p(99,9000) =  44149,725 us/op
     p(99,9900) =  44149,725 us/op
     p(99,9990) =  44149,725 us/op
     p(99,9999) =  44149,725 us/op
    p(100,0000) =  44149,725 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 1000000, maxSize = 500)

# Run progress: 50,83% complete, ETA 00:10:10
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
90744,122 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
42248,135 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
28504,275 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
26456,089 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
26027,205 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
25585,168 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
26252,073 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
25565,280 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
26012,449 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
26522,490 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
25531,919 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
26324,568 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
25722,783 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
24795,726 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.12319100742248---
25819,338 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =  25638,867 ±(99.9%) 2137,127 us/op

  Histogram, us/op:
    [24000,000, 24250,000) = 0 
    [24250,000, 24500,000) = 0 
    [24500,000, 24750,000) = 0 
    [24750,000, 25000,000) = 1 
    [25000,000, 25250,000) = 0 
    [25250,000, 25500,000) = 0 
    [25500,000, 25750,000) = 2 
    [25750,000, 26000,000) = 1 
    [26000,000, 26250,000) = 0 
    [26250,000, 26500,000) = 1 
    [26500,000, 26750,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  24795,726 us/op
     p(50,0000) =  25722,783 us/op
     p(90,0000) =  26324,568 us/op
     p(95,0000) =  26324,568 us/op
     p(99,0000) =  26324,568 us/op
     p(99,9000) =  26324,568 us/op
     p(99,9900) =  26324,568 us/op
     p(99,9990) =  26324,568 us/op
     p(99,9999) =  26324,568 us/op
    p(100,0000) =  26324,568 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 1000000, maxSize = 750)

# Run progress: 51,67% complete, ETA 00:09:51
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
88179,478 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
36715,947 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
21351,501 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
17415,840 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
17071,963 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
17106,287 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
16753,106 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
16965,784 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
16978,294 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
16532,730 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
16499,048 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
17680,485 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
16607,472 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
16530,163 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.166462595652142---
17023,204 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =  16868,074 ±(99.9%) 1927,587 us/op

  Histogram, us/op:
    [16000,000, 16125,000) = 0 
    [16125,000, 16250,000) = 0 
    [16250,000, 16375,000) = 0 
    [16375,000, 16500,000) = 1 
    [16500,000, 16625,000) = 2 
    [16625,000, 16750,000) = 0 
    [16750,000, 16875,000) = 0 
    [16875,000, 17000,000) = 0 
    [17000,000, 17125,000) = 1 
    [17125,000, 17250,000) = 0 
    [17250,000, 17375,000) = 0 
    [17375,000, 17500,000) = 0 
    [17500,000, 17625,000) = 0 
    [17625,000, 17750,000) = 1 
    [17750,000, 17875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  16499,048 us/op
     p(50,0000) =  16607,472 us/op
     p(90,0000) =  17680,485 us/op
     p(95,0000) =  17680,485 us/op
     p(99,0000) =  17680,485 us/op
     p(99,9000) =  17680,485 us/op
     p(99,9900) =  17680,485 us/op
     p(99,9990) =  17680,485 us/op
     p(99,9999) =  17680,485 us/op
    p(100,0000) =  17680,485 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 2000000, maxSize = 250)

# Run progress: 52,50% complete, ETA 00:09:32
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
760485,368 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
100955,863 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
92427,260 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
88840,608 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
88046,995 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
87581,863 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
87895,907 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
86705,490 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
87459,967 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
90692,155 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
90815,335 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
88267,373 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
87786,522 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
89196,995 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.197187724520845---
86872,617 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =  88587,768 ±(99.9%) 5782,253 us/op

  Histogram, us/op:
    [86000,000, 86500,000) = 0 
    [86500,000, 87000,000) = 1 
    [87000,000, 87500,000) = 0 
    [87500,000, 88000,000) = 1 
    [88000,000, 88500,000) = 1 
    [88500,000, 89000,000) = 0 
    [89000,000, 89500,000) = 1 
    [89500,000, 90000,000) = 0 
    [90000,000, 90500,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  86872,617 us/op
     p(50,0000) =  88267,373 us/op
     p(90,0000) =  90815,335 us/op
     p(95,0000) =  90815,335 us/op
     p(99,0000) =  90815,335 us/op
     p(99,9000) =  90815,335 us/op
     p(99,9900) =  90815,335 us/op
     p(99,9990) =  90815,335 us/op
     p(99,9999) =  90815,335 us/op
    p(100,0000) =  90815,335 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 2000000, maxSize = 500)

# Run progress: 53,33% complete, ETA 00:09:15
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
599437,286 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
65202,259 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
56977,435 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
52393,475 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
51405,790 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
51165,526 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
52100,602 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
52127,869 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
51504,270 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
51191,829 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
52183,043 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
52301,090 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
52659,081 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
51170,338 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.09454154879569---
52612,568 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =  52185,224 ±(99.9%) 2318,864 us/op

  Histogram, us/op:
    [51000,000, 51125,000) = 0 
    [51125,000, 51250,000) = 1 
    [51250,000, 51375,000) = 0 
    [51375,000, 51500,000) = 0 
    [51500,000, 51625,000) = 0 
    [51625,000, 51750,000) = 0 
    [51750,000, 51875,000) = 0 
    [51875,000, 52000,000) = 0 
    [52000,000, 52125,000) = 0 
    [52125,000, 52250,000) = 1 
    [52250,000, 52375,000) = 1 
    [52375,000, 52500,000) = 0 
    [52500,000, 52625,000) = 1 
    [52625,000, 52750,000) = 1 
    [52750,000, 52875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  51170,338 us/op
     p(50,0000) =  52301,090 us/op
     p(90,0000) =  52659,081 us/op
     p(95,0000) =  52659,081 us/op
     p(99,0000) =  52659,081 us/op
     p(99,9000) =  52659,081 us/op
     p(99,9900) =  52659,081 us/op
     p(99,9990) =  52659,081 us/op
     p(99,9999) =  52659,081 us/op
    p(100,0000) =  52659,081 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 2000000, maxSize = 750)

# Run progress: 54,17% complete, ETA 00:08:59
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
720665,543 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
58830,266 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
35724,413 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
34967,691 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
34790,620 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
35450,466 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
34910,271 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
34961,596 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
35776,059 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
35934,525 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
35171,707 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
35384,064 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
35074,511 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
35287,189 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.15540190206194---
35190,955 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =  35221,685 ±(99.9%) 454,637 us/op

  Histogram, us/op:
    [35000,000, 35025,000) = 0 
    [35025,000, 35050,000) = 0 
    [35050,000, 35075,000) = 1 
    [35075,000, 35100,000) = 0 
    [35100,000, 35125,000) = 0 
    [35125,000, 35150,000) = 0 
    [35150,000, 35175,000) = 1 
    [35175,000, 35200,000) = 1 
    [35200,000, 35225,000) = 0 
    [35225,000, 35250,000) = 0 
    [35250,000, 35275,000) = 0 
    [35275,000, 35300,000) = 1 
    [35300,000, 35325,000) = 0 
    [35325,000, 35350,000) = 0 
    [35350,000, 35375,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  35074,511 us/op
     p(50,0000) =  35190,955 us/op
     p(90,0000) =  35384,064 us/op
     p(95,0000) =  35384,064 us/op
     p(99,0000) =  35384,064 us/op
     p(99,9000) =  35384,064 us/op
     p(99,9900) =  35384,064 us/op
     p(99,9990) =  35384,064 us/op
     p(99,9999) =  35384,064 us/op
    p(100,0000) =  35384,064 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 3000000, maxSize = 250)

# Run progress: 55,00% complete, ETA 00:08:42
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
674397,701 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
141133,037 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
136884,935 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
132271,463 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
136009,844 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
130514,866 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
133665,256 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
130855,536 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
131690,208 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
129848,284 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
131488,116 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
130811,589 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
133120,249 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
130604,685 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.205715054274144---
132095,675 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 131624,063 ±(99.9%) 3935,726 us/op

  Histogram, us/op:
    [130000,000, 130250,000) = 0 
    [130250,000, 130500,000) = 0 
    [130500,000, 130750,000) = 1 
    [130750,000, 131000,000) = 1 
    [131000,000, 131250,000) = 0 
    [131250,000, 131500,000) = 1 
    [131500,000, 131750,000) = 0 
    [131750,000, 132000,000) = 0 
    [132000,000, 132250,000) = 1 
    [132250,000, 132500,000) = 0 
    [132500,000, 132750,000) = 0 
    [132750,000, 133000,000) = 0 
    [133000,000, 133250,000) = 1 
    [133250,000, 133500,000) = 0 
    [133500,000, 133750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 130604,685 us/op
     p(50,0000) = 131488,116 us/op
     p(90,0000) = 133120,249 us/op
     p(95,0000) = 133120,249 us/op
     p(99,0000) = 133120,249 us/op
     p(99,9000) = 133120,249 us/op
     p(99,9900) = 133120,249 us/op
     p(99,9990) = 133120,249 us/op
     p(99,9999) = 133120,249 us/op
    p(100,0000) = 133120,249 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 3000000, maxSize = 500)

# Run progress: 55,83% complete, ETA 00:08:28
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
627442,747 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
88188,139 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
91942,239 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
78506,970 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
77374,934 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
77007,960 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
78123,957 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
78253,553 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
77052,870 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
78010,081 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
78279,536 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
78047,612 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
77288,964 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
78129,411 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.11455742686645---
77131,461 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =  77775,397 ±(99.9%) 2023,745 us/op

  Histogram, us/op:
    [77000,000, 77125,000) = 0 
    [77125,000, 77250,000) = 1 
    [77250,000, 77375,000) = 1 
    [77375,000, 77500,000) = 0 
    [77500,000, 77625,000) = 0 
    [77625,000, 77750,000) = 0 
    [77750,000, 77875,000) = 0 
    [77875,000, 78000,000) = 0 
    [78000,000, 78125,000) = 1 
    [78125,000, 78250,000) = 1 
    [78250,000, 78375,000) = 1 
    [78375,000, 78500,000) = 0 
    [78500,000, 78625,000) = 0 
    [78625,000, 78750,000) = 0 
    [78750,000, 78875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  77131,461 us/op
     p(50,0000) =  78047,612 us/op
     p(90,0000) =  78279,536 us/op
     p(95,0000) =  78279,536 us/op
     p(99,0000) =  78279,536 us/op
     p(99,9000) =  78279,536 us/op
     p(99,9900) =  78279,536 us/op
     p(99,9990) =  78279,536 us/op
     p(99,9999) =  78279,536 us/op
    p(100,0000) =  78279,536 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 3000000, maxSize = 750)

# Run progress: 56,67% complete, ETA 00:08:13
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
614903,740 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
73174,628 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
51577,729 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
51551,746 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
51487,590 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
52117,282 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
52240,462 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
52428,761 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
53041,453 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
52092,262 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
51661,453 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
52135,567 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
51777,575 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
51678,454 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.15512318809896---
52226,990 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =  51896,008 ±(99.9%) 1024,788 us/op

  Histogram, us/op:
    [51600,000, 51650,000) = 0 
    [51650,000, 51700,000) = 2 
    [51700,000, 51750,000) = 0 
    [51750,000, 51800,000) = 1 
    [51800,000, 51850,000) = 0 
    [51850,000, 51900,000) = 0 
    [51900,000, 51950,000) = 0 
    [51950,000, 52000,000) = 0 
    [52000,000, 52050,000) = 0 
    [52050,000, 52100,000) = 0 
    [52100,000, 52150,000) = 1 
    [52150,000, 52200,000) = 0 
    [52200,000, 52250,000) = 1 

  Percentiles, us/op:
      p(0,0000) =  51661,453 us/op
     p(50,0000) =  51777,575 us/op
     p(90,0000) =  52226,990 us/op
     p(95,0000) =  52226,990 us/op
     p(99,0000) =  52226,990 us/op
     p(99,9000) =  52226,990 us/op
     p(99,9900) =  52226,990 us/op
     p(99,9990) =  52226,990 us/op
     p(99,9999) =  52226,990 us/op
    p(100,0000) =  52226,990 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 4000000, maxSize = 250)

# Run progress: 57,50% complete, ETA 00:07:58
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
2043335,262 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
188228,173 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
178664,088 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
175886,125 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
177523,070 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
176157,827 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
178088,608 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
174434,271 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
176706,683 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
177082,638 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
174980,239 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
179532,122 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
177322,903 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
175744,020 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.18877412055185---
176910,058 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 176897,868 ±(99.9%) 6705,198 us/op

  Histogram, us/op:
    [174000,000, 174500,000) = 0 
    [174500,000, 175000,000) = 1 
    [175000,000, 175500,000) = 0 
    [175500,000, 176000,000) = 1 
    [176000,000, 176500,000) = 0 
    [176500,000, 177000,000) = 1 
    [177000,000, 177500,000) = 1 
    [177500,000, 178000,000) = 0 
    [178000,000, 178500,000) = 0 
    [178500,000, 179000,000) = 0 
    [179000,000, 179500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 174980,239 us/op
     p(50,0000) = 176910,058 us/op
     p(90,0000) = 179532,122 us/op
     p(95,0000) = 179532,122 us/op
     p(99,0000) = 179532,122 us/op
     p(99,9000) = 179532,122 us/op
     p(99,9900) = 179532,122 us/op
     p(99,9990) = 179532,122 us/op
     p(99,9999) = 179532,122 us/op
    p(100,0000) = 179532,122 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 4000000, maxSize = 500)

# Run progress: 58,33% complete, ETA 00:07:46
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
1804543,028 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
112991,886 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
110451,622 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
105413,114 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
106632,082 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
109357,758 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
106454,690 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
105591,148 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
106863,365 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
106063,979 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
109509,167 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
106510,185 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
105842,319 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
105066,350 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.08464978222455---
105891,079 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 106563,820 ±(99.9%) 6639,851 us/op

  Histogram, us/op:
    [105000,000, 105500,000) = 1 
    [105500,000, 106000,000) = 2 
    [106000,000, 106500,000) = 0 
    [106500,000, 107000,000) = 1 
    [107000,000, 107500,000) = 0 
    [107500,000, 108000,000) = 0 
    [108000,000, 108500,000) = 0 
    [108500,000, 109000,000) = 0 
    [109000,000, 109500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 105066,350 us/op
     p(50,0000) = 105891,079 us/op
     p(90,0000) = 109509,167 us/op
     p(95,0000) = 109509,167 us/op
     p(99,0000) = 109509,167 us/op
     p(99,9000) = 109509,167 us/op
     p(99,9900) = 109509,167 us/op
     p(99,9990) = 109509,167 us/op
     p(99,9999) = 109509,167 us/op
    p(100,0000) = 109509,167 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 4000000, maxSize = 750)

# Run progress: 59,17% complete, ETA 00:07:33
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
1856974,997 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
88427,122 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
75010,458 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
70672,858 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
70132,021 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
70358,812 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
71483,150 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
71352,913 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
72263,930 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
72077,236 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
70649,119 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
71270,151 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
70480,710 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
70222,481 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.157710214903066---
71757,418 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =  70875,976 ±(99.9%) 2410,169 us/op

  Histogram, us/op:
    [70000,000, 70125,000) = 0 
    [70125,000, 70250,000) = 1 
    [70250,000, 70375,000) = 0 
    [70375,000, 70500,000) = 1 
    [70500,000, 70625,000) = 0 
    [70625,000, 70750,000) = 1 
    [70750,000, 70875,000) = 0 
    [70875,000, 71000,000) = 0 
    [71000,000, 71125,000) = 0 
    [71125,000, 71250,000) = 0 
    [71250,000, 71375,000) = 1 
    [71375,000, 71500,000) = 0 
    [71500,000, 71625,000) = 0 
    [71625,000, 71750,000) = 0 
    [71750,000, 71875,000) = 1 

  Percentiles, us/op:
      p(0,0000) =  70222,481 us/op
     p(50,0000) =  70649,119 us/op
     p(90,0000) =  71757,418 us/op
     p(95,0000) =  71757,418 us/op
     p(99,0000) =  71757,418 us/op
     p(99,9000) =  71757,418 us/op
     p(99,9900) =  71757,418 us/op
     p(99,9990) =  71757,418 us/op
     p(99,9999) =  71757,418 us/op
    p(100,0000) =  71757,418 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 5000000, maxSize = 250)

# Run progress: 60,00% complete, ETA 00:07:21
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
1154434,540 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
228782,264 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
223970,870 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
219887,971 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
222699,295 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
219421,554 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
220588,877 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
220091,667 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
222286,129 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
219603,758 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
221021,931 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
220824,009 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
219095,962 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
219071,582 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.18510586542695---
224281,065 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 220858,910 ±(99.9%) 8177,853 us/op

  Histogram, us/op:
    [219000,000, 219500,000) = 2 
    [219500,000, 220000,000) = 0 
    [220000,000, 220500,000) = 0 
    [220500,000, 221000,000) = 1 
    [221000,000, 221500,000) = 1 
    [221500,000, 222000,000) = 0 
    [222000,000, 222500,000) = 0 
    [222500,000, 223000,000) = 0 
    [223000,000, 223500,000) = 0 
    [223500,000, 224000,000) = 0 
    [224000,000, 224500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 219071,582 us/op
     p(50,0000) = 220824,009 us/op
     p(90,0000) = 224281,065 us/op
     p(95,0000) = 224281,065 us/op
     p(99,0000) = 224281,065 us/op
     p(99,9000) = 224281,065 us/op
     p(99,9900) = 224281,065 us/op
     p(99,9990) = 224281,065 us/op
     p(99,9999) = 224281,065 us/op
    p(100,0000) = 224281,065 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 5000000, maxSize = 500)

# Run progress: 60,83% complete, ETA 00:07:10
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
1238644,996 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
135281,351 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
137475,172 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
133823,080 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
131165,090 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
133169,970 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
131620,919 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
131501,588 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
132455,591 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
132475,159 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
133516,414 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
133041,979 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
132549,259 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
133794,531 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.086167575638896---
131836,804 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 132947,797 ±(99.9%) 3008,861 us/op

  Histogram, us/op:
    [131000,000, 131250,000) = 0 
    [131250,000, 131500,000) = 0 
    [131500,000, 131750,000) = 0 
    [131750,000, 132000,000) = 1 
    [132000,000, 132250,000) = 0 
    [132250,000, 132500,000) = 0 
    [132500,000, 132750,000) = 1 
    [132750,000, 133000,000) = 0 
    [133000,000, 133250,000) = 1 
    [133250,000, 133500,000) = 0 
    [133500,000, 133750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 131836,804 us/op
     p(50,0000) = 133041,979 us/op
     p(90,0000) = 133794,531 us/op
     p(95,0000) = 133794,531 us/op
     p(99,0000) = 133794,531 us/op
     p(99,9000) = 133794,531 us/op
     p(99,9900) = 133794,531 us/op
     p(99,9990) = 133794,531 us/op
     p(99,9999) = 133794,531 us/op
    p(100,0000) = 133794,531 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 5000000, maxSize = 750)

# Run progress: 61,67% complete, ETA 00:06:58
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
1069488,855 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
103284,091 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
94935,766 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
89440,789 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
91221,765 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
91720,259 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
93637,246 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
89725,001 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
89541,193 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
90316,521 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
89160,747 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
89623,954 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
89709,924 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
90221,891 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.17310636125191---
89881,221 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =  89719,547 ±(99.9%) 1491,318 us/op

  Histogram, us/op:
    [89000,000, 89125,000) = 0 
    [89125,000, 89250,000) = 1 
    [89250,000, 89375,000) = 0 
    [89375,000, 89500,000) = 0 
    [89500,000, 89625,000) = 1 
    [89625,000, 89750,000) = 1 
    [89750,000, 89875,000) = 0 
    [89875,000, 90000,000) = 1 
    [90000,000, 90125,000) = 0 
    [90125,000, 90250,000) = 1 
    [90250,000, 90375,000) = 0 
    [90375,000, 90500,000) = 0 
    [90500,000, 90625,000) = 0 
    [90625,000, 90750,000) = 0 
    [90750,000, 90875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  89160,747 us/op
     p(50,0000) =  89709,924 us/op
     p(90,0000) =  90221,891 us/op
     p(95,0000) =  90221,891 us/op
     p(99,0000) =  90221,891 us/op
     p(99,9000) =  90221,891 us/op
     p(99,9900) =  90221,891 us/op
     p(99,9990) =  90221,891 us/op
     p(99,9999) =  90221,891 us/op
    p(100,0000) =  90221,891 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 6000000, maxSize = 250)

# Run progress: 62,50% complete, ETA 00:06:46
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
1525058,446 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
275465,838 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
253626,108 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
254165,662 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
254672,175 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
253713,360 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
254492,859 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
255097,530 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
256656,846 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
254956,387 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
253964,211 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
257166,247 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
255923,541 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
251490,348 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.192006513625266---
255974,224 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 254903,714 ±(99.9%) 8575,538 us/op

  Histogram, us/op:
    [251000,000, 251500,000) = 1 
    [251500,000, 252000,000) = 0 
    [252000,000, 252500,000) = 0 
    [252500,000, 253000,000) = 0 
    [253000,000, 253500,000) = 0 
    [253500,000, 254000,000) = 1 
    [254000,000, 254500,000) = 0 
    [254500,000, 255000,000) = 0 
    [255000,000, 255500,000) = 0 
    [255500,000, 256000,000) = 2 
    [256000,000, 256500,000) = 0 
    [256500,000, 257000,000) = 0 
    [257000,000, 257500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 251490,348 us/op
     p(50,0000) = 255923,541 us/op
     p(90,0000) = 257166,247 us/op
     p(95,0000) = 257166,247 us/op
     p(99,0000) = 257166,247 us/op
     p(99,9000) = 257166,247 us/op
     p(99,9900) = 257166,247 us/op
     p(99,9990) = 257166,247 us/op
     p(99,9999) = 257166,247 us/op
    p(100,0000) = 257166,247 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 6000000, maxSize = 500)

# Run progress: 63,33% complete, ETA 00:06:36
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
1589161,710 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
172302,040 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
166477,620 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
174039,710 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
180711,633 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
180216,669 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
178181,954 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
176533,461 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
168982,598 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
168161,720 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
173035,987 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
173471,928 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
158365,069 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
158691,945 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.08165023983738---
158706,381 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 164454,262 ±(99.9%) 30942,327 us/op

  Histogram, us/op:
    [150000,000, 152500,000) = 0 
    [152500,000, 155000,000) = 0 
    [155000,000, 157500,000) = 0 
    [157500,000, 160000,000) = 3 
    [160000,000, 162500,000) = 0 
    [162500,000, 165000,000) = 0 
    [165000,000, 167500,000) = 0 
    [167500,000, 170000,000) = 0 
    [170000,000, 172500,000) = 0 
    [172500,000, 175000,000) = 2 
    [175000,000, 177500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 158365,069 us/op
     p(50,0000) = 158706,381 us/op
     p(90,0000) = 173471,928 us/op
     p(95,0000) = 173471,928 us/op
     p(99,0000) = 173471,928 us/op
     p(99,9000) = 173471,928 us/op
     p(99,9900) = 173471,928 us/op
     p(99,9990) = 173471,928 us/op
     p(99,9999) = 173471,928 us/op
    p(100,0000) = 173471,928 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 6000000, maxSize = 750)

# Run progress: 64,17% complete, ETA 00:06:25
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
1833586,537 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
124361,646 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
113239,208 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
108826,224 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
106584,607 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
118471,465 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
110994,703 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
107703,812 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
106932,654 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
105187,927 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
106937,466 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
124036,695 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
115375,608 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
112667,896 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.162802196374916---
107537,327 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 113310,998 ±(99.9%) 26794,088 us/op

  Histogram, us/op:
    [100000,000, 102500,000) = 0 
    [102500,000, 105000,000) = 0 
    [105000,000, 107500,000) = 1 
    [107500,000, 110000,000) = 1 
    [110000,000, 112500,000) = 0 
    [112500,000, 115000,000) = 1 
    [115000,000, 117500,000) = 1 
    [117500,000, 120000,000) = 0 
    [120000,000, 122500,000) = 0 
    [122500,000, 125000,000) = 1 
    [125000,000, 127500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 106937,466 us/op
     p(50,0000) = 112667,896 us/op
     p(90,0000) = 124036,695 us/op
     p(95,0000) = 124036,695 us/op
     p(99,0000) = 124036,695 us/op
     p(99,9000) = 124036,695 us/op
     p(99,9900) = 124036,695 us/op
     p(99,9990) = 124036,695 us/op
     p(99,9999) = 124036,695 us/op
    p(100,0000) = 124036,695 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 7000000, maxSize = 250)

# Run progress: 65,00% complete, ETA 00:06:14
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
698049,202 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
311912,009 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
315112,761 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
317724,559 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
319643,471 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
310681,814 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
313435,397 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
322337,711 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
338986,883 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
326329,188 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
332332,924 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
341229,784 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
341569,491 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
331396,886 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.18502663999368---
310626,319 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 331431,081 ±(99.9%) 48419,246 us/op

  Histogram, us/op:
    [310000,000, 312500,000) = 1 
    [312500,000, 315000,000) = 0 
    [315000,000, 317500,000) = 0 
    [317500,000, 320000,000) = 0 
    [320000,000, 322500,000) = 0 
    [322500,000, 325000,000) = 0 
    [325000,000, 327500,000) = 0 
    [327500,000, 330000,000) = 0 
    [330000,000, 332500,000) = 2 
    [332500,000, 335000,000) = 0 
    [335000,000, 337500,000) = 0 
    [337500,000, 340000,000) = 0 
    [340000,000, 342500,000) = 2 
    [342500,000, 345000,000) = 0 
    [345000,000, 347500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 310626,319 us/op
     p(50,0000) = 332332,924 us/op
     p(90,0000) = 341569,491 us/op
     p(95,0000) = 341569,491 us/op
     p(99,0000) = 341569,491 us/op
     p(99,9000) = 341569,491 us/op
     p(99,9900) = 341569,491 us/op
     p(99,9990) = 341569,491 us/op
     p(99,9999) = 341569,491 us/op
    p(100,0000) = 341569,491 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 7000000, maxSize = 500)

# Run progress: 65,83% complete, ETA 00:06:05
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
617687,798 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
191283,932 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
199094,949 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
192784,545 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
187287,002 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
184907,769 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
185602,580 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
186164,268 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
185867,225 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
183855,287 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
183090,865 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
186723,390 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
194989,915 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
188929,400 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.095078745485225---
193028,018 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 189352,318 ±(99.9%) 18425,762 us/op

  Histogram, us/op:
    [180000,000, 181250,000) = 0 
    [181250,000, 182500,000) = 0 
    [182500,000, 183750,000) = 1 
    [183750,000, 185000,000) = 0 
    [185000,000, 186250,000) = 0 
    [186250,000, 187500,000) = 1 
    [187500,000, 188750,000) = 0 
    [188750,000, 190000,000) = 1 
    [190000,000, 191250,000) = 0 
    [191250,000, 192500,000) = 0 
    [192500,000, 193750,000) = 1 
    [193750,000, 195000,000) = 1 
    [195000,000, 196250,000) = 0 
    [196250,000, 197500,000) = 0 
    [197500,000, 198750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 183090,865 us/op
     p(50,0000) = 188929,400 us/op
     p(90,0000) = 194989,915 us/op
     p(95,0000) = 194989,915 us/op
     p(99,0000) = 194989,915 us/op
     p(99,9000) = 194989,915 us/op
     p(99,9900) = 194989,915 us/op
     p(99,9990) = 194989,915 us/op
     p(99,9999) = 194989,915 us/op
    p(100,0000) = 194989,915 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 7000000, maxSize = 750)

# Run progress: 66,67% complete, ETA 00:05:55
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
542887,773 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
146089,424 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
125912,301 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
126064,351 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
123361,130 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
123802,204 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
125186,695 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
123483,668 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
123723,292 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
123716,876 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
123774,616 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
123425,286 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
124837,043 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
123948,480 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.149114631571344---
126651,060 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 124527,297 ±(99.9%) 4991,858 us/op

  Histogram, us/op:
    [123000,000, 123250,000) = 0 
    [123250,000, 123500,000) = 1 
    [123500,000, 123750,000) = 0 
    [123750,000, 124000,000) = 2 
    [124000,000, 124250,000) = 0 
    [124250,000, 124500,000) = 0 
    [124500,000, 124750,000) = 0 
    [124750,000, 125000,000) = 1 
    [125000,000, 125250,000) = 0 
    [125250,000, 125500,000) = 0 
    [125500,000, 125750,000) = 0 
    [125750,000, 126000,000) = 0 
    [126000,000, 126250,000) = 0 
    [126250,000, 126500,000) = 0 
    [126500,000, 126750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 123425,286 us/op
     p(50,0000) = 123948,480 us/op
     p(90,0000) = 126651,060 us/op
     p(95,0000) = 126651,060 us/op
     p(99,0000) = 126651,060 us/op
     p(99,9000) = 126651,060 us/op
     p(99,9900) = 126651,060 us/op
     p(99,9990) = 126651,060 us/op
     p(99,9999) = 126651,060 us/op
    p(100,0000) = 126651,060 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 8000000, maxSize = 250)

# Run progress: 67,50% complete, ETA 00:05:45
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
951746,203 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
368873,083 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
375690,641 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
357840,143 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
364128,412 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
353130,758 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
354279,795 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
383323,625 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
370681,326 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
367248,007 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
368779,736 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
378467,963 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
378982,175 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
362317,283 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.20352284889066---
358179,529 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 369345,337 ±(99.9%) 36044,149 us/op

  Histogram, us/op:
    [350000,000, 352500,000) = 0 
    [352500,000, 355000,000) = 0 
    [355000,000, 357500,000) = 0 
    [357500,000, 360000,000) = 1 
    [360000,000, 362500,000) = 1 
    [362500,000, 365000,000) = 0 
    [365000,000, 367500,000) = 0 
    [367500,000, 370000,000) = 1 
    [370000,000, 372500,000) = 0 
    [372500,000, 375000,000) = 0 
    [375000,000, 377500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 358179,529 us/op
     p(50,0000) = 368779,736 us/op
     p(90,0000) = 378982,175 us/op
     p(95,0000) = 378982,175 us/op
     p(99,0000) = 378982,175 us/op
     p(99,9000) = 378982,175 us/op
     p(99,9900) = 378982,175 us/op
     p(99,9990) = 378982,175 us/op
     p(99,9999) = 378982,175 us/op
    p(100,0000) = 378982,175 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 8000000, maxSize = 500)

# Run progress: 68,33% complete, ETA 00:05:36
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
796220,687 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
226283,060 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
237798,455 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
270970,734 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
228407,592 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
217129,896 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
219283,619 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
212459,646 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
212612,979 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
219512,978 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
213789,282 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
211275,964 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
227224,231 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
220806,366 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.1143825231465---
211217,261 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 216862,621 ±(99.9%) 26916,134 us/op

  Histogram, us/op:
    [210000,000, 211250,000) = 1 
    [211250,000, 212500,000) = 1 
    [212500,000, 213750,000) = 0 
    [213750,000, 215000,000) = 1 
    [215000,000, 216250,000) = 0 
    [216250,000, 217500,000) = 0 
    [217500,000, 218750,000) = 0 
    [218750,000, 220000,000) = 0 
    [220000,000, 221250,000) = 1 
    [221250,000, 222500,000) = 0 
    [222500,000, 223750,000) = 0 
    [223750,000, 225000,000) = 0 
    [225000,000, 226250,000) = 0 
    [226250,000, 227500,000) = 1 
    [227500,000, 228750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 211217,261 us/op
     p(50,0000) = 213789,282 us/op
     p(90,0000) = 227224,231 us/op
     p(95,0000) = 227224,231 us/op
     p(99,0000) = 227224,231 us/op
     p(99,9000) = 227224,231 us/op
     p(99,9900) = 227224,231 us/op
     p(99,9990) = 227224,231 us/op
     p(99,9999) = 227224,231 us/op
    p(100,0000) = 227224,231 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 8000000, maxSize = 750)

# Run progress: 69,17% complete, ETA 00:05:27
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
805751,090 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
172842,235 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
154139,101 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
147147,359 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
149498,683 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
153548,222 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
144700,442 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
140461,001 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
142074,529 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
140020,248 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
139210,917 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
140611,447 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
141561,280 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
145680,428 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.153542757089866---
140882,507 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 141589,316 ±(99.9%) 9402,704 us/op

  Histogram, us/op:
    [139000,000, 139500,000) = 1 
    [139500,000, 140000,000) = 0 
    [140000,000, 140500,000) = 0 
    [140500,000, 141000,000) = 2 
    [141000,000, 141500,000) = 0 
    [141500,000, 142000,000) = 1 
    [142000,000, 142500,000) = 0 
    [142500,000, 143000,000) = 0 
    [143000,000, 143500,000) = 0 
    [143500,000, 144000,000) = 0 
    [144000,000, 144500,000) = 0 
    [144500,000, 145000,000) = 0 
    [145000,000, 145500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 139210,917 us/op
     p(50,0000) = 140882,507 us/op
     p(90,0000) = 145680,428 us/op
     p(95,0000) = 145680,428 us/op
     p(99,0000) = 145680,428 us/op
     p(99,9000) = 145680,428 us/op
     p(99,9900) = 145680,428 us/op
     p(99,9990) = 145680,428 us/op
     p(99,9999) = 145680,428 us/op
    p(100,0000) = 145680,428 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 9000000, maxSize = 250)

# Run progress: 70,00% complete, ETA 00:05:17
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
2717852,615 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
408220,397 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
416049,056 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
399803,104 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
400684,931 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
398907,164 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
399376,145 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
401643,745 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
403011,556 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
399504,136 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
401544,946 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
403479,255 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
398699,297 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
408116,464 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.18294547480752---
399911,850 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 402350,362 ±(99.9%) 14206,690 us/op

  Histogram, us/op:
    [398000,000, 399000,000) = 1 
    [399000,000, 400000,000) = 1 
    [400000,000, 401000,000) = 0 
    [401000,000, 402000,000) = 1 
    [402000,000, 403000,000) = 0 
    [403000,000, 404000,000) = 1 
    [404000,000, 405000,000) = 0 
    [405000,000, 406000,000) = 0 
    [406000,000, 407000,000) = 0 
    [407000,000, 408000,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 398699,297 us/op
     p(50,0000) = 401544,946 us/op
     p(90,0000) = 408116,464 us/op
     p(95,0000) = 408116,464 us/op
     p(99,0000) = 408116,464 us/op
     p(99,9000) = 408116,464 us/op
     p(99,9900) = 408116,464 us/op
     p(99,9990) = 408116,464 us/op
     p(99,9999) = 408116,464 us/op
    p(100,0000) = 408116,464 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 9000000, maxSize = 500)

# Run progress: 70,83% complete, ETA 00:05:09
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
2684125,064 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
229323,742 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
266257,821 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
250724,965 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
246039,318 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
257416,135 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
263755,088 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
251188,173 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
241719,361 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
242739,765 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
243695,371 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
241961,549 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
245048,104 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
242112,638 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10474810927984---
249466,862 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 244456,905 ±(99.9%) 11829,613 us/op

  Histogram, us/op:
    [241000,000, 241500,000) = 0 
    [241500,000, 242000,000) = 1 
    [242000,000, 242500,000) = 1 
    [242500,000, 243000,000) = 0 
    [243000,000, 243500,000) = 0 
    [243500,000, 244000,000) = 1 
    [244000,000, 244500,000) = 0 
    [244500,000, 245000,000) = 0 
    [245000,000, 245500,000) = 1 
    [245500,000, 246000,000) = 0 
    [246000,000, 246500,000) = 0 
    [246500,000, 247000,000) = 0 
    [247000,000, 247500,000) = 0 
    [247500,000, 248000,000) = 0 
    [248000,000, 248500,000) = 0 
    [248500,000, 249000,000) = 0 
    [249000,000, 249500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 241961,549 us/op
     p(50,0000) = 243695,371 us/op
     p(90,0000) = 249466,862 us/op
     p(95,0000) = 249466,862 us/op
     p(99,0000) = 249466,862 us/op
     p(99,9000) = 249466,862 us/op
     p(99,9900) = 249466,862 us/op
     p(99,9990) = 249466,862 us/op
     p(99,9999) = 249466,862 us/op
    p(100,0000) = 249466,862 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 9000000, maxSize = 750)

# Run progress: 71,67% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
2588692,407 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
175785,400 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
163460,033 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
158966,533 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
161190,187 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
159454,441 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
158733,968 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
159048,974 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
159421,080 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
159290,522 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
158788,179 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
160589,044 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
157525,265 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
167844,788 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.15175628031657---
158186,394 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 160586,734 ±(99.9%) 16228,577 us/op

  Histogram, us/op:
    [150000,000, 151250,000) = 0 
    [151250,000, 152500,000) = 0 
    [152500,000, 153750,000) = 0 
    [153750,000, 155000,000) = 0 
    [155000,000, 156250,000) = 0 
    [156250,000, 157500,000) = 0 
    [157500,000, 158750,000) = 2 
    [158750,000, 160000,000) = 1 
    [160000,000, 161250,000) = 1 
    [161250,000, 162500,000) = 0 
    [162500,000, 163750,000) = 0 
    [163750,000, 165000,000) = 0 
    [165000,000, 166250,000) = 0 
    [166250,000, 167500,000) = 0 
    [167500,000, 168750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 157525,265 us/op
     p(50,0000) = 158788,179 us/op
     p(90,0000) = 167844,788 us/op
     p(95,0000) = 167844,788 us/op
     p(99,0000) = 167844,788 us/op
     p(99,9000) = 167844,788 us/op
     p(99,9900) = 167844,788 us/op
     p(99,9990) = 167844,788 us/op
     p(99,9999) = 167844,788 us/op
    p(100,0000) = 167844,788 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 10000000, maxSize = 250)

# Run progress: 72,50% complete, ETA 00:04:51
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
3263574,488 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
436611,437 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
445430,026 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
436530,600 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
438224,965 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
440362,970 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
436917,782 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
439417,308 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
434861,577 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
438564,672 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
439231,575 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
438203,472 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
437261,019 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
437456,053 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.19022280190206---
437884,295 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 438007,283 ±(99.9%) 2990,931 us/op

  Histogram, us/op:
    [437000,000, 437250,000) = 0 
    [437250,000, 437500,000) = 2 
    [437500,000, 437750,000) = 0 
    [437750,000, 438000,000) = 1 
    [438000,000, 438250,000) = 1 
    [438250,000, 438500,000) = 0 
    [438500,000, 438750,000) = 0 
    [438750,000, 439000,000) = 0 
    [439000,000, 439250,000) = 1 
    [439250,000, 439500,000) = 0 
    [439500,000, 439750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 437261,019 us/op
     p(50,0000) = 437884,295 us/op
     p(90,0000) = 439231,575 us/op
     p(95,0000) = 439231,575 us/op
     p(99,0000) = 439231,575 us/op
     p(99,9000) = 439231,575 us/op
     p(99,9900) = 439231,575 us/op
     p(99,9990) = 439231,575 us/op
     p(99,9999) = 439231,575 us/op
    p(100,0000) = 439231,575 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 10000000, maxSize = 500)

# Run progress: 73,33% complete, ETA 00:04:44
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
3129508,897 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
255231,617 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
266095,184 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
263498,783 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
258786,190 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
271944,947 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
259567,292 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
261395,744 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
260889,872 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
260977,766 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
259950,305 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
263273,596 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
258821,797 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
263109,035 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.08315807901621---
262365,785 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 261504,104 ±(99.9%) 7715,345 us/op

  Histogram, us/op:
    [258000,000, 258500,000) = 0 
    [258500,000, 259000,000) = 1 
    [259000,000, 259500,000) = 0 
    [259500,000, 260000,000) = 1 
    [260000,000, 260500,000) = 0 
    [260500,000, 261000,000) = 0 
    [261000,000, 261500,000) = 0 
    [261500,000, 262000,000) = 0 
    [262000,000, 262500,000) = 1 
    [262500,000, 263000,000) = 0 
    [263000,000, 263500,000) = 2 

  Percentiles, us/op:
      p(0,0000) = 258821,797 us/op
     p(50,0000) = 262365,785 us/op
     p(90,0000) = 263273,596 us/op
     p(95,0000) = 263273,596 us/op
     p(99,0000) = 263273,596 us/op
     p(99,9000) = 263273,596 us/op
     p(99,9900) = 263273,596 us/op
     p(99,9990) = 263273,596 us/op
     p(99,9999) = 263273,596 us/op
    p(100,0000) = 263273,596 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 10000000, maxSize = 750)

# Run progress: 74,17% complete, ETA 00:04:36
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
3087687,721 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
189479,539 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
185338,258 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
175418,747 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
174477,577 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
176989,612 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
175848,273 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
174172,513 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
175964,075 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
176949,514 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
175399,500 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
176707,004 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
177185,609 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
174463,141 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.167007540483187---
175349,138 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 175820,878 ±(99.9%) 4258,078 us/op

  Histogram, us/op:
    [174000,000, 174250,000) = 0 
    [174250,000, 174500,000) = 1 
    [174500,000, 174750,000) = 0 
    [174750,000, 175000,000) = 0 
    [175000,000, 175250,000) = 0 
    [175250,000, 175500,000) = 2 
    [175500,000, 175750,000) = 0 
    [175750,000, 176000,000) = 0 
    [176000,000, 176250,000) = 0 
    [176250,000, 176500,000) = 0 
    [176500,000, 176750,000) = 1 
    [176750,000, 177000,000) = 0 
    [177000,000, 177250,000) = 1 
    [177250,000, 177500,000) = 0 
    [177500,000, 177750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 174463,141 us/op
     p(50,0000) = 175399,500 us/op
     p(90,0000) = 177185,609 us/op
     p(95,0000) = 177185,609 us/op
     p(99,0000) = 177185,609 us/op
     p(99,9000) = 177185,609 us/op
     p(99,9900) = 177185,609 us/op
     p(99,9990) = 177185,609 us/op
     p(99,9999) = 177185,609 us/op
    p(100,0000) = 177185,609 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 11000000, maxSize = 250)

# Run progress: 75,00% complete, ETA 00:04:27
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
5722705,711 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
488907,715 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
490466,390 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
487662,765 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
486214,438 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
487303,168 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
486042,820 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
484378,609 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
485616,182 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
484277,242 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
487093,378 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
485821,481 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
498542,372 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
483346,014 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.202242187334015---
486172,095 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 488195,068 ±(99.9%) 22904,056 us/op

  Histogram, us/op:
    [480000,000, 481250,000) = 0 
    [481250,000, 482500,000) = 0 
    [482500,000, 483750,000) = 1 
    [483750,000, 485000,000) = 0 
    [485000,000, 486250,000) = 2 
    [486250,000, 487500,000) = 1 
    [487500,000, 488750,000) = 0 
    [488750,000, 490000,000) = 0 
    [490000,000, 491250,000) = 0 
    [491250,000, 492500,000) = 0 
    [492500,000, 493750,000) = 0 
    [493750,000, 495000,000) = 0 
    [495000,000, 496250,000) = 0 
    [496250,000, 497500,000) = 0 
    [497500,000, 498750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 483346,014 us/op
     p(50,0000) = 486172,095 us/op
     p(90,0000) = 498542,372 us/op
     p(95,0000) = 498542,372 us/op
     p(99,0000) = 498542,372 us/op
     p(99,9000) = 498542,372 us/op
     p(99,9900) = 498542,372 us/op
     p(99,9990) = 498542,372 us/op
     p(99,9999) = 498542,372 us/op
    p(100,0000) = 498542,372 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 11000000, maxSize = 500)

# Run progress: 75,83% complete, ETA 00:04:20
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
5153531,542 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
279261,319 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
290894,440 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
286263,967 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
286954,287 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
297326,099 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
289365,598 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
287930,424 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
287477,481 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
286832,712 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
288344,873 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
289022,041 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
286438,151 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
286340,954 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.098240971422825---
285076,115 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 287044,427 ±(99.9%) 6190,685 us/op

  Histogram, us/op:
    [285000,000, 285500,000) = 1 
    [285500,000, 286000,000) = 0 
    [286000,000, 286500,000) = 2 
    [286500,000, 287000,000) = 0 
    [287000,000, 287500,000) = 0 
    [287500,000, 288000,000) = 0 
    [288000,000, 288500,000) = 1 
    [288500,000, 289000,000) = 0 
    [289000,000, 289500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 285076,115 us/op
     p(50,0000) = 286438,151 us/op
     p(90,0000) = 289022,041 us/op
     p(95,0000) = 289022,041 us/op
     p(99,0000) = 289022,041 us/op
     p(99,9000) = 289022,041 us/op
     p(99,9900) = 289022,041 us/op
     p(99,9990) = 289022,041 us/op
     p(99,9999) = 289022,041 us/op
    p(100,0000) = 289022,041 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 11000000, maxSize = 750)

# Run progress: 76,67% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
5036367,258 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
211936,452 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
191890,850 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
195105,075 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
196395,577 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
193078,060 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
197597,544 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
192968,353 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
193758,758 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
194498,478 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
193146,066 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
193046,944 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
192610,041 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
193280,473 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 28.168179947925644---
195714,238 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 193559,552 ±(99.9%) 4737,961 us/op

  Histogram, us/op:
    [192000,000, 192250,000) = 0 
    [192250,000, 192500,000) = 0 
    [192500,000, 192750,000) = 1 
    [192750,000, 193000,000) = 0 
    [193000,000, 193250,000) = 2 
    [193250,000, 193500,000) = 1 
    [193500,000, 193750,000) = 0 
    [193750,000, 194000,000) = 0 
    [194000,000, 194250,000) = 0 
    [194250,000, 194500,000) = 0 
    [194500,000, 194750,000) = 0 
    [194750,000, 195000,000) = 0 
    [195000,000, 195250,000) = 0 
    [195250,000, 195500,000) = 0 
    [195500,000, 195750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 192610,041 us/op
     p(50,0000) = 193146,066 us/op
     p(90,0000) = 195714,238 us/op
     p(95,0000) = 195714,238 us/op
     p(99,0000) = 195714,238 us/op
     p(99,9000) = 195714,238 us/op
     p(99,9900) = 195714,238 us/op
     p(99,9990) = 195714,238 us/op
     p(99,9999) = 195714,238 us/op
    p(100,0000) = 195714,238 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 12000000, maxSize = 250)

# Run progress: 77,50% complete, ETA 00:04:04
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
5680595,511 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
530064,233 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
533860,034 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
536957,816 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
534452,516 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
531318,807 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
536461,889 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
527744,025 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
527480,343 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
526982,169 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
524877,526 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
530258,626 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
531206,534 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
530638,752 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.197395604090644---
529940,412 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 529384,370 ±(99.9%) 9869,769 us/op

  Histogram, us/op:
    [524000,000, 524500,000) = 0 
    [524500,000, 525000,000) = 1 
    [525000,000, 525500,000) = 0 
    [525500,000, 526000,000) = 0 
    [526000,000, 526500,000) = 0 
    [526500,000, 527000,000) = 0 
    [527000,000, 527500,000) = 0 
    [527500,000, 528000,000) = 0 
    [528000,000, 528500,000) = 0 
    [528500,000, 529000,000) = 0 
    [529000,000, 529500,000) = 0 
    [529500,000, 530000,000) = 1 
    [530000,000, 530500,000) = 1 
    [530500,000, 531000,000) = 1 
    [531000,000, 531500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 524877,526 us/op
     p(50,0000) = 530258,626 us/op
     p(90,0000) = 531206,534 us/op
     p(95,0000) = 531206,534 us/op
     p(99,0000) = 531206,534 us/op
     p(99,9000) = 531206,534 us/op
     p(99,9900) = 531206,534 us/op
     p(99,9990) = 531206,534 us/op
     p(99,9999) = 531206,534 us/op
    p(100,0000) = 531206,534 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 12000000, maxSize = 500)

# Run progress: 78,33% complete, ETA 00:03:57
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
5589227,470 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
308228,160 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
322732,912 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
315177,558 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
319867,056 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
314556,527 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
314383,947 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
313952,817 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
316404,225 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
313010,042 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
315163,123 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
319827,278 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
311475,426 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
311904,310 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10056213242422---
315191,031 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 314712,234 ±(99.9%) 12909,364 us/op

  Histogram, us/op:
    [311000,000, 311500,000) = 1 
    [311500,000, 312000,000) = 1 
    [312000,000, 312500,000) = 0 
    [312500,000, 313000,000) = 0 
    [313000,000, 313500,000) = 0 
    [313500,000, 314000,000) = 0 
    [314000,000, 314500,000) = 0 
    [314500,000, 315000,000) = 0 
    [315000,000, 315500,000) = 2 
    [315500,000, 316000,000) = 0 
    [316000,000, 316500,000) = 0 
    [316500,000, 317000,000) = 0 
    [317000,000, 317500,000) = 0 
    [317500,000, 318000,000) = 0 
    [318000,000, 318500,000) = 0 
    [318500,000, 319000,000) = 0 
    [319000,000, 319500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 311475,426 us/op
     p(50,0000) = 315163,123 us/op
     p(90,0000) = 319827,278 us/op
     p(95,0000) = 319827,278 us/op
     p(99,0000) = 319827,278 us/op
     p(99,9000) = 319827,278 us/op
     p(99,9900) = 319827,278 us/op
     p(99,9990) = 319827,278 us/op
     p(99,9999) = 319827,278 us/op
    p(100,0000) = 319827,278 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 12000000, maxSize = 750)

# Run progress: 79,17% complete, ETA 00:03:49
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
5273836,913 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
226818,443 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
228313,604 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
221908,570 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
217838,180 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
219290,998 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
223081,987 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
222008,974 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
220158,389 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
220901,318 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
219644,177 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
222277,788 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
220335,460 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
221426,436 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 29.57677233849305---
220565,781 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 220849,928 ±(99.9%) 3931,806 us/op

  Histogram, us/op:
    [219000,000, 219250,000) = 0 
    [219250,000, 219500,000) = 0 
    [219500,000, 219750,000) = 1 
    [219750,000, 220000,000) = 0 
    [220000,000, 220250,000) = 0 
    [220250,000, 220500,000) = 1 
    [220500,000, 220750,000) = 1 
    [220750,000, 221000,000) = 0 
    [221000,000, 221250,000) = 0 
    [221250,000, 221500,000) = 1 
    [221500,000, 221750,000) = 0 
    [221750,000, 222000,000) = 0 
    [222000,000, 222250,000) = 0 
    [222250,000, 222500,000) = 1 
    [222500,000, 222750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 219644,177 us/op
     p(50,0000) = 220565,781 us/op
     p(90,0000) = 222277,788 us/op
     p(95,0000) = 222277,788 us/op
     p(99,0000) = 222277,788 us/op
     p(99,9000) = 222277,788 us/op
     p(99,9900) = 222277,788 us/op
     p(99,9990) = 222277,788 us/op
     p(99,9999) = 222277,788 us/op
    p(100,0000) = 222277,788 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 13000000, maxSize = 250)

# Run progress: 80,00% complete, ETA 00:03:41
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
5921279,711 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
571793,987 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
571465,508 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
569846,847 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
569558,465 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
570805,340 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
568399,162 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
570768,771 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
569325,578 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
568587,460 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
571512,341 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
572095,200 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
567809,246 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
569893,039 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.19972111945067---
572531,142 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 570768,194 ±(99.9%) 7442,796 us/op

  Histogram, us/op:
    [567000,000, 567500,000) = 0 
    [567500,000, 568000,000) = 1 
    [568000,000, 568500,000) = 0 
    [568500,000, 569000,000) = 0 
    [569000,000, 569500,000) = 0 
    [569500,000, 570000,000) = 1 
    [570000,000, 570500,000) = 0 
    [570500,000, 571000,000) = 0 
    [571000,000, 571500,000) = 0 
    [571500,000, 572000,000) = 1 
    [572000,000, 572500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 567809,246 us/op
     p(50,0000) = 571512,341 us/op
     p(90,0000) = 572531,142 us/op
     p(95,0000) = 572531,142 us/op
     p(99,0000) = 572531,142 us/op
     p(99,9000) = 572531,142 us/op
     p(99,9900) = 572531,142 us/op
     p(99,9990) = 572531,142 us/op
     p(99,9999) = 572531,142 us/op
    p(100,0000) = 572531,142 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 13000000, maxSize = 500)

# Run progress: 80,83% complete, ETA 00:03:33
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
5885171,323 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
324551,741 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
344370,550 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
341913,369 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
343668,361 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
339799,422 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
340613,564 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
341983,620 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
340216,438 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
338723,202 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
340696,005 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
338167,930 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
340761,765 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
343214,777 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.094013954260774---
337285,141 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 340025,124 ±(99.9%) 9055,828 us/op

  Histogram, us/op:
    [337000,000, 337500,000) = 1 
    [337500,000, 338000,000) = 0 
    [338000,000, 338500,000) = 1 
    [338500,000, 339000,000) = 0 
    [339000,000, 339500,000) = 0 
    [339500,000, 340000,000) = 0 
    [340000,000, 340500,000) = 0 
    [340500,000, 341000,000) = 2 
    [341000,000, 341500,000) = 0 
    [341500,000, 342000,000) = 0 
    [342000,000, 342500,000) = 0 
    [342500,000, 343000,000) = 0 
    [343000,000, 343500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 337285,141 us/op
     p(50,0000) = 340696,005 us/op
     p(90,0000) = 343214,777 us/op
     p(95,0000) = 343214,777 us/op
     p(99,0000) = 343214,777 us/op
     p(99,9000) = 343214,777 us/op
     p(99,9900) = 343214,777 us/op
     p(99,9990) = 343214,777 us/op
     p(99,9999) = 343214,777 us/op
    p(100,0000) = 343214,777 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 13000000, maxSize = 750)

# Run progress: 81,67% complete, ETA 00:03:25
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
5870009,611 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
240931,201 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
229935,472 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
224962,404 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
225397,704 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
253915,773 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
226153,144 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
223617,370 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
226640,089 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
225546,226 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
223516,324 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
226530,061 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
225407,969 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
225195,933 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 32.05830887719902---
225410,214 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 225212,100 ±(99.9%) 4169,801 us/op

  Histogram, us/op:
    [223000,000, 223250,000) = 0 
    [223250,000, 223500,000) = 0 
    [223500,000, 223750,000) = 1 
    [223750,000, 224000,000) = 0 
    [224000,000, 224250,000) = 0 
    [224250,000, 224500,000) = 0 
    [224500,000, 224750,000) = 0 
    [224750,000, 225000,000) = 0 
    [225000,000, 225250,000) = 1 
    [225250,000, 225500,000) = 2 
    [225500,000, 225750,000) = 0 
    [225750,000, 226000,000) = 0 
    [226000,000, 226250,000) = 0 
    [226250,000, 226500,000) = 0 
    [226500,000, 226750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 223516,324 us/op
     p(50,0000) = 225407,969 us/op
     p(90,0000) = 226530,061 us/op
     p(95,0000) = 226530,061 us/op
     p(99,0000) = 226530,061 us/op
     p(99,9000) = 226530,061 us/op
     p(99,9900) = 226530,061 us/op
     p(99,9990) = 226530,061 us/op
     p(99,9999) = 226530,061 us/op
    p(100,0000) = 226530,061 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 14000000, maxSize = 250)

# Run progress: 82,50% complete, ETA 00:03:17
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
7337043,914 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
606404,328 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
613999,138 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
606456,615 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
605257,215 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
606330,228 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
608043,839 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
606428,386 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
610390,031 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
603243,352 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
608301,747 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
609173,630 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
604782,459 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
604229,112 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.200714760232046---
607774,704 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 606852,330 ±(99.9%) 8503,224 us/op

  Histogram, us/op:
    [604000,000, 604500,000) = 1 
    [604500,000, 605000,000) = 1 
    [605000,000, 605500,000) = 0 
    [605500,000, 606000,000) = 0 
    [606000,000, 606500,000) = 0 
    [606500,000, 607000,000) = 0 
    [607000,000, 607500,000) = 0 
    [607500,000, 608000,000) = 1 
    [608000,000, 608500,000) = 1 
    [608500,000, 609000,000) = 0 
    [609000,000, 609500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 604229,112 us/op
     p(50,0000) = 607774,704 us/op
     p(90,0000) = 609173,630 us/op
     p(95,0000) = 609173,630 us/op
     p(99,0000) = 609173,630 us/op
     p(99,9000) = 609173,630 us/op
     p(99,9900) = 609173,630 us/op
     p(99,9990) = 609173,630 us/op
     p(99,9999) = 609173,630 us/op
    p(100,0000) = 609173,630 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 14000000, maxSize = 500)

# Run progress: 83,33% complete, ETA 00:03:09
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
6074247,640 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
339128,669 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
362294,187 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
357316,308 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
355389,377 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
356041,203 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
354602,822 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
355427,229 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
357872,863 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
354253,812 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
357756,420 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
357628,428 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
355844,565 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
358894,872 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10963001450901---
354878,052 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 357000,467 ±(99.9%) 6207,581 us/op

  Histogram, us/op:
    [354000,000, 354500,000) = 0 
    [354500,000, 355000,000) = 1 
    [355000,000, 355500,000) = 0 
    [355500,000, 356000,000) = 1 
    [356000,000, 356500,000) = 0 
    [356500,000, 357000,000) = 0 
    [357000,000, 357500,000) = 0 
    [357500,000, 358000,000) = 2 
    [358000,000, 358500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 354878,052 us/op
     p(50,0000) = 357628,428 us/op
     p(90,0000) = 358894,872 us/op
     p(95,0000) = 358894,872 us/op
     p(99,0000) = 358894,872 us/op
     p(99,9000) = 358894,872 us/op
     p(99,9900) = 358894,872 us/op
     p(99,9990) = 358894,872 us/op
     p(99,9999) = 358894,872 us/op
    p(100,0000) = 358894,872 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 14000000, maxSize = 750)

# Run progress: 84,17% complete, ETA 00:03:01
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
6063874,867 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
252823,834 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
244106,612 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
242417,700 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
245623,585 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
242359,319 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
241959,304 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
242624,284 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
246329,304 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
242668,551 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
241556,403 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
240331,341 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
247331,103 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
243404,423 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 34.531660594546274---
243311,717 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 243186,997 ±(99.9%) 10196,948 us/op

  Histogram, us/op:
    [240000,000, 240500,000) = 1 
    [240500,000, 241000,000) = 0 
    [241000,000, 241500,000) = 0 
    [241500,000, 242000,000) = 1 
    [242000,000, 242500,000) = 0 
    [242500,000, 243000,000) = 0 
    [243000,000, 243500,000) = 2 
    [243500,000, 244000,000) = 0 
    [244000,000, 244500,000) = 0 
    [244500,000, 245000,000) = 0 
    [245000,000, 245500,000) = 0 
    [245500,000, 246000,000) = 0 
    [246000,000, 246500,000) = 0 
    [246500,000, 247000,000) = 0 
    [247000,000, 247500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 240331,341 us/op
     p(50,0000) = 243311,717 us/op
     p(90,0000) = 247331,103 us/op
     p(95,0000) = 247331,103 us/op
     p(99,0000) = 247331,103 us/op
     p(99,9000) = 247331,103 us/op
     p(99,9900) = 247331,103 us/op
     p(99,9990) = 247331,103 us/op
     p(99,9999) = 247331,103 us/op
    p(100,0000) = 247331,103 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 15000000, maxSize = 250)

# Run progress: 85,00% complete, ETA 00:02:52
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
7099849,169 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
645229,089 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
652770,007 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
650342,017 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
650187,401 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
651712,072 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
646567,066 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
653966,841 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
647661,571 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
654136,214 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
649017,512 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
652942,588 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
655496,966 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
654347,287 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.2093047698294---
653356,716 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 653032,214 ±(99.9%) 9439,103 us/op

  Histogram, us/op:
    [649000,000, 649500,000) = 1 
    [649500,000, 650000,000) = 0 
    [650000,000, 650500,000) = 0 
    [650500,000, 651000,000) = 0 
    [651000,000, 651500,000) = 0 
    [651500,000, 652000,000) = 0 
    [652000,000, 652500,000) = 0 
    [652500,000, 653000,000) = 1 
    [653000,000, 653500,000) = 1 
    [653500,000, 654000,000) = 0 
    [654000,000, 654500,000) = 1 
    [654500,000, 655000,000) = 0 
    [655000,000, 655500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 649017,512 us/op
     p(50,0000) = 653356,716 us/op
     p(90,0000) = 655496,966 us/op
     p(95,0000) = 655496,966 us/op
     p(99,0000) = 655496,966 us/op
     p(99,9000) = 655496,966 us/op
     p(99,9900) = 655496,966 us/op
     p(99,9990) = 655496,966 us/op
     p(99,9999) = 655496,966 us/op
    p(100,0000) = 655496,966 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 15000000, maxSize = 500)

# Run progress: 85,83% complete, ETA 00:02:45
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
7232462,584 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
360458,037 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
390278,156 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
386111,532 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
384681,170 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
384367,767 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
385079,579 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
384314,838 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
384380,277 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
381956,776 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
382939,970 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
384810,444 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
384050,514 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
385329,147 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10652362860465---
382951,840 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 384016,383 ±(99.9%) 4150,381 us/op

  Histogram, us/op:
    [382000,000, 382250,000) = 0 
    [382250,000, 382500,000) = 0 
    [382500,000, 382750,000) = 0 
    [382750,000, 383000,000) = 2 
    [383000,000, 383250,000) = 0 
    [383250,000, 383500,000) = 0 
    [383500,000, 383750,000) = 0 
    [383750,000, 384000,000) = 0 
    [384000,000, 384250,000) = 1 
    [384250,000, 384500,000) = 0 
    [384500,000, 384750,000) = 0 
    [384750,000, 385000,000) = 1 
    [385000,000, 385250,000) = 0 
    [385250,000, 385500,000) = 1 
    [385500,000, 385750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 382939,970 us/op
     p(50,0000) = 384050,514 us/op
     p(90,0000) = 385329,147 us/op
     p(95,0000) = 385329,147 us/op
     p(99,0000) = 385329,147 us/op
     p(99,9000) = 385329,147 us/op
     p(99,9900) = 385329,147 us/op
     p(99,9990) = 385329,147 us/op
     p(99,9999) = 385329,147 us/op
    p(100,0000) = 385329,147 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 15000000, maxSize = 750)

# Run progress: 86,67% complete, ETA 00:02:36
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
4610086,252 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
259825,200 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
262443,735 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
258882,745 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
257597,376 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
257882,872 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
259375,465 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
259711,323 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
258069,566 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
257641,002 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
258043,904 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
258103,889 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
257257,349 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
257283,331 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 36.9825605836328---
258734,224 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 257884,539 ±(99.9%) 2397,234 us/op

  Histogram, us/op:
    [257000,000, 257125,000) = 0 
    [257125,000, 257250,000) = 0 
    [257250,000, 257375,000) = 2 
    [257375,000, 257500,000) = 0 
    [257500,000, 257625,000) = 0 
    [257625,000, 257750,000) = 0 
    [257750,000, 257875,000) = 0 
    [257875,000, 258000,000) = 0 
    [258000,000, 258125,000) = 2 
    [258125,000, 258250,000) = 0 
    [258250,000, 258375,000) = 0 
    [258375,000, 258500,000) = 0 
    [258500,000, 258625,000) = 0 
    [258625,000, 258750,000) = 1 
    [258750,000, 258875,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 257257,349 us/op
     p(50,0000) = 258043,904 us/op
     p(90,0000) = 258734,224 us/op
     p(95,0000) = 258734,224 us/op
     p(99,0000) = 258734,224 us/op
     p(99,9000) = 258734,224 us/op
     p(99,9900) = 258734,224 us/op
     p(99,9990) = 258734,224 us/op
     p(99,9999) = 258734,224 us/op
    p(100,0000) = 258734,224 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 16000000, maxSize = 250)

# Run progress: 87,50% complete, ETA 00:02:27
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
5392981,698 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
686069,317 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
693593,235 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
691737,517 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
684880,182 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
692220,292 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
693252,886 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
693109,497 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
690444,448 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
687017,546 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
686589,624 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
687917,015 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
689190,837 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
687910,600 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.21857259638559---
687464,393 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 687814,494 ±(99.9%) 3620,908 us/op

  Histogram, us/op:
    [686000,000, 686250,000) = 0 
    [686250,000, 686500,000) = 0 
    [686500,000, 686750,000) = 1 
    [686750,000, 687000,000) = 0 
    [687000,000, 687250,000) = 0 
    [687250,000, 687500,000) = 1 
    [687500,000, 687750,000) = 0 
    [687750,000, 688000,000) = 2 
    [688000,000, 688250,000) = 0 
    [688250,000, 688500,000) = 0 
    [688500,000, 688750,000) = 0 
    [688750,000, 689000,000) = 0 
    [689000,000, 689250,000) = 1 
    [689250,000, 689500,000) = 0 
    [689500,000, 689750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 686589,624 us/op
     p(50,0000) = 687910,600 us/op
     p(90,0000) = 689190,837 us/op
     p(95,0000) = 689190,837 us/op
     p(99,0000) = 689190,837 us/op
     p(99,9000) = 689190,837 us/op
     p(99,9900) = 689190,837 us/op
     p(99,9990) = 689190,837 us/op
     p(99,9999) = 689190,837 us/op
    p(100,0000) = 689190,837 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 16000000, maxSize = 500)

# Run progress: 88,33% complete, ETA 00:02:19
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
7418953,728 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
385526,427 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
403724,010 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
405000,077 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
405406,506 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
405921,039 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
407430,313 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
407669,937 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
407683,089 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
410958,904 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
406511,918 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
405205,697 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
405109,784 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
404635,349 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10798697633212---
405609,241 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 405414,398 ±(99.9%) 2713,118 us/op

  Histogram, us/op:
    [404000,000, 404250,000) = 0 
    [404250,000, 404500,000) = 0 
    [404500,000, 404750,000) = 1 
    [404750,000, 405000,000) = 0 
    [405000,000, 405250,000) = 2 
    [405250,000, 405500,000) = 0 
    [405500,000, 405750,000) = 1 
    [405750,000, 406000,000) = 0 
    [406000,000, 406250,000) = 0 
    [406250,000, 406500,000) = 0 
    [406500,000, 406750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 404635,349 us/op
     p(50,0000) = 405205,697 us/op
     p(90,0000) = 406511,918 us/op
     p(95,0000) = 406511,918 us/op
     p(99,0000) = 406511,918 us/op
     p(99,9000) = 406511,918 us/op
     p(99,9900) = 406511,918 us/op
     p(99,9990) = 406511,918 us/op
     p(99,9999) = 406511,918 us/op
    p(100,0000) = 406511,918 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 16000000, maxSize = 750)

# Run progress: 89,17% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
9712433,663 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
275037,596 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
282697,204 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
276882,728 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
276392,254 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
278941,500 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
273423,746 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
274626,033 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
274199,395 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
277532,309 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
274667,415 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
274606,466 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
273884,388 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
276162,574 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 39.447790411288466---
275102,714 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 274884,711 ±(99.9%) 3224,982 us/op

  Histogram, us/op:
    [273000,000, 273250,000) = 0 
    [273250,000, 273500,000) = 0 
    [273500,000, 273750,000) = 0 
    [273750,000, 274000,000) = 1 
    [274000,000, 274250,000) = 0 
    [274250,000, 274500,000) = 0 
    [274500,000, 274750,000) = 2 
    [274750,000, 275000,000) = 0 
    [275000,000, 275250,000) = 1 
    [275250,000, 275500,000) = 0 
    [275500,000, 275750,000) = 0 
    [275750,000, 276000,000) = 0 
    [276000,000, 276250,000) = 1 
    [276250,000, 276500,000) = 0 
    [276500,000, 276750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 273884,388 us/op
     p(50,0000) = 274667,415 us/op
     p(90,0000) = 276162,574 us/op
     p(95,0000) = 276162,574 us/op
     p(99,0000) = 276162,574 us/op
     p(99,9000) = 276162,574 us/op
     p(99,9900) = 276162,574 us/op
     p(99,9990) = 276162,574 us/op
     p(99,9999) = 276162,574 us/op
    p(100,0000) = 276162,574 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 17000000, maxSize = 250)

# Run progress: 90,00% complete, ETA 00:02:01
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
8143078,573 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
730994,690 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
718014,930 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
708826,802 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
706107,221 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
710942,993 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
705772,646 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
709950,177 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
708970,832 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
706351,977 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
706370,582 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
707202,046 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
706804,598 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
702045,812 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.20170020246657---
720035,209 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 708491,649 ±(99.9%) 26102,902 us/op

  Histogram, us/op:
    [700000,000, 702500,000) = 1 
    [702500,000, 705000,000) = 0 
    [705000,000, 707500,000) = 3 
    [707500,000, 710000,000) = 0 
    [710000,000, 712500,000) = 0 
    [712500,000, 715000,000) = 0 
    [715000,000, 717500,000) = 0 
    [717500,000, 720000,000) = 0 
    [720000,000, 722500,000) = 1 
    [722500,000, 725000,000) = 0 
    [725000,000, 727500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 702045,812 us/op
     p(50,0000) = 706804,598 us/op
     p(90,0000) = 720035,209 us/op
     p(95,0000) = 720035,209 us/op
     p(99,0000) = 720035,209 us/op
     p(99,9000) = 720035,209 us/op
     p(99,9900) = 720035,209 us/op
     p(99,9990) = 720035,209 us/op
     p(99,9999) = 720035,209 us/op
    p(100,0000) = 720035,209 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 17000000, maxSize = 500)

# Run progress: 90,83% complete, ETA 00:01:52
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
5102015,403 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
399344,709 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
436790,433 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
433146,682 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
428476,753 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
430632,400 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
429190,169 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
436572,622 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
430753,656 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
435421,981 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
434198,522 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
430899,611 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
431405,161 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
428818,384 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.11368568121958---
429846,166 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 431033,569 ±(99.9%) 7818,306 us/op

  Histogram, us/op:
    [428000,000, 428500,000) = 0 
    [428500,000, 429000,000) = 1 
    [429000,000, 429500,000) = 0 
    [429500,000, 430000,000) = 1 
    [430000,000, 430500,000) = 0 
    [430500,000, 431000,000) = 1 
    [431000,000, 431500,000) = 1 
    [431500,000, 432000,000) = 0 
    [432000,000, 432500,000) = 0 
    [432500,000, 433000,000) = 0 
    [433000,000, 433500,000) = 0 
    [433500,000, 434000,000) = 0 
    [434000,000, 434500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 428818,384 us/op
     p(50,0000) = 430899,611 us/op
     p(90,0000) = 434198,522 us/op
     p(95,0000) = 434198,522 us/op
     p(99,0000) = 434198,522 us/op
     p(99,9000) = 434198,522 us/op
     p(99,9900) = 434198,522 us/op
     p(99,9990) = 434198,522 us/op
     p(99,9999) = 434198,522 us/op
    p(100,0000) = 434198,522 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 17000000, maxSize = 750)

# Run progress: 91,67% complete, ETA 00:01:43
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
5092848,766 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
289846,127 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
296764,731 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
294557,117 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
287765,864 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
289811,163 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
288178,708 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
288976,491 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
289652,376 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
286914,831 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
291140,479 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
288559,476 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
290487,690 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
291351,553 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 41.908421224054564---
289670,339 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 290241,907 ±(99.9%) 4414,163 us/op

  Histogram, us/op:
    [288000,000, 288250,000) = 0 
    [288250,000, 288500,000) = 0 
    [288500,000, 288750,000) = 1 
    [288750,000, 289000,000) = 0 
    [289000,000, 289250,000) = 0 
    [289250,000, 289500,000) = 0 
    [289500,000, 289750,000) = 1 
    [289750,000, 290000,000) = 0 
    [290000,000, 290250,000) = 0 
    [290250,000, 290500,000) = 1 
    [290500,000, 290750,000) = 0 
    [290750,000, 291000,000) = 0 
    [291000,000, 291250,000) = 1 
    [291250,000, 291500,000) = 1 
    [291500,000, 291750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 288559,476 us/op
     p(50,0000) = 290487,690 us/op
     p(90,0000) = 291351,553 us/op
     p(95,0000) = 291351,553 us/op
     p(99,0000) = 291351,553 us/op
     p(99,9000) = 291351,553 us/op
     p(99,9900) = 291351,553 us/op
     p(99,9990) = 291351,553 us/op
     p(99,9999) = 291351,553 us/op
    p(100,0000) = 291351,553 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 18000000, maxSize = 250)

# Run progress: 92,50% complete, ETA 00:01:33
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
8284906,101 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
768401,920 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
779447,372 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
776592,421 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
769188,476 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
777072,309 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
774336,047 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
776565,796 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
797280,227 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
775982,937 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
772900,874 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
796261,747 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
771713,343 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
772171,418 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.199289208297216---
769392,493 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 776487,975 ±(99.9%) 42863,608 us/op

  Histogram, us/op:
    [760000,000, 762500,000) = 0 
    [762500,000, 765000,000) = 0 
    [765000,000, 767500,000) = 0 
    [767500,000, 770000,000) = 1 
    [770000,000, 772500,000) = 2 
    [772500,000, 775000,000) = 1 
    [775000,000, 777500,000) = 0 
    [777500,000, 780000,000) = 0 
    [780000,000, 782500,000) = 0 
    [782500,000, 785000,000) = 0 
    [785000,000, 787500,000) = 0 
    [787500,000, 790000,000) = 0 
    [790000,000, 792500,000) = 0 
    [792500,000, 795000,000) = 0 
    [795000,000, 797500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 769392,493 us/op
     p(50,0000) = 772171,418 us/op
     p(90,0000) = 796261,747 us/op
     p(95,0000) = 796261,747 us/op
     p(99,0000) = 796261,747 us/op
     p(99,9000) = 796261,747 us/op
     p(99,9900) = 796261,747 us/op
     p(99,9990) = 796261,747 us/op
     p(99,9999) = 796261,747 us/op
    p(100,0000) = 796261,747 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 18000000, maxSize = 500)

# Run progress: 93,33% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
7701481,879 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
427651,704 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
487351,927 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
459373,733 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
458276,021 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
455748,908 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
458153,161 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
457175,742 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
458372,255 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
456452,702 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
454993,790 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
458474,904 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
456675,324 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
459141,808 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10119993428685---
456176,830 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 457092,531 ±(99.9%) 6536,964 us/op

  Histogram, us/op:
    [454000,000, 454500,000) = 0 
    [454500,000, 455000,000) = 1 
    [455000,000, 455500,000) = 0 
    [455500,000, 456000,000) = 0 
    [456000,000, 456500,000) = 1 
    [456500,000, 457000,000) = 1 
    [457000,000, 457500,000) = 0 
    [457500,000, 458000,000) = 0 
    [458000,000, 458500,000) = 1 
    [458500,000, 459000,000) = 0 
    [459000,000, 459500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 454993,790 us/op
     p(50,0000) = 456675,324 us/op
     p(90,0000) = 459141,808 us/op
     p(95,0000) = 459141,808 us/op
     p(99,0000) = 459141,808 us/op
     p(99,9000) = 459141,808 us/op
     p(99,9900) = 459141,808 us/op
     p(99,9990) = 459141,808 us/op
     p(99,9999) = 459141,808 us/op
    p(100,0000) = 459141,808 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 18000000, maxSize = 750)

# Run progress: 94,17% complete, ETA 00:01:14
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
7912218,290 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
301127,673 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
315408,200 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
308934,199 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
304821,146 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
303863,294 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
305834,172 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
308835,398 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
305568,886 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
305926,236 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
308396,249 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
307829,429 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
305839,304 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
309723,320 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 44.40155088116647---
305001,103 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 307357,881 ±(99.9%) 7395,930 us/op

  Histogram, us/op:
    [305000,000, 305500,000) = 1 
    [305500,000, 306000,000) = 1 
    [306000,000, 306500,000) = 0 
    [306500,000, 307000,000) = 0 
    [307000,000, 307500,000) = 0 
    [307500,000, 308000,000) = 1 
    [308000,000, 308500,000) = 1 
    [308500,000, 309000,000) = 0 
    [309000,000, 309500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 305001,103 us/op
     p(50,0000) = 307829,429 us/op
     p(90,0000) = 309723,320 us/op
     p(95,0000) = 309723,320 us/op
     p(99,0000) = 309723,320 us/op
     p(99,9000) = 309723,320 us/op
     p(99,9900) = 309723,320 us/op
     p(99,9990) = 309723,320 us/op
     p(99,9999) = 309723,320 us/op
    p(100,0000) = 309723,320 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 19000000, maxSize = 250)

# Run progress: 95,00% complete, ETA 00:01:04
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
11102792,334 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
809061,549 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
825279,593 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
821833,443 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
819067,669 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
830859,577 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
822225,116 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
819886,944 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
821020,905 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
817969,315 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
818194,824 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
816873,206 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
819337,767 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
819781,728 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.2006060818597---
817914,141 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 818420,333 ±(99.9%) 4472,290 us/op

  Histogram, us/op:
    [816000,000, 816250,000) = 0 
    [816250,000, 816500,000) = 0 
    [816500,000, 816750,000) = 0 
    [816750,000, 817000,000) = 1 
    [817000,000, 817250,000) = 0 
    [817250,000, 817500,000) = 0 
    [817500,000, 817750,000) = 0 
    [817750,000, 818000,000) = 1 
    [818000,000, 818250,000) = 1 
    [818250,000, 818500,000) = 0 
    [818500,000, 818750,000) = 0 
    [818750,000, 819000,000) = 0 
    [819000,000, 819250,000) = 0 
    [819250,000, 819500,000) = 1 
    [819500,000, 819750,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 816873,206 us/op
     p(50,0000) = 818194,824 us/op
     p(90,0000) = 819781,728 us/op
     p(95,0000) = 819781,728 us/op
     p(99,0000) = 819781,728 us/op
     p(99,9000) = 819781,728 us/op
     p(99,9900) = 819781,728 us/op
     p(99,9990) = 819781,728 us/op
     p(99,9999) = 819781,728 us/op
    p(100,0000) = 819781,728 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 19000000, maxSize = 500)

# Run progress: 95,83% complete, ETA 00:00:54
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
10766666,496 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
446743,945 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
493537,867 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
481872,989 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
490436,878 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
481104,397 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
482795,234 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
477952,404 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
481428,065 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
478838,400 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
481113,379 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
477935,403 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
479628,805 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
477248,610 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10866808849394---
481743,393 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 479533,918 ±(99.9%) 7497,235 us/op

  Histogram, us/op:
    [477000,000, 477500,000) = 1 
    [477500,000, 478000,000) = 1 
    [478000,000, 478500,000) = 0 
    [478500,000, 479000,000) = 0 
    [479000,000, 479500,000) = 0 
    [479500,000, 480000,000) = 1 
    [480000,000, 480500,000) = 0 
    [480500,000, 481000,000) = 0 
    [481000,000, 481500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 477248,610 us/op
     p(50,0000) = 479628,805 us/op
     p(90,0000) = 481743,393 us/op
     p(95,0000) = 481743,393 us/op
     p(99,0000) = 481743,393 us/op
     p(99,9000) = 481743,393 us/op
     p(99,9900) = 481743,393 us/op
     p(99,9990) = 481743,393 us/op
     p(99,9999) = 481743,393 us/op
    p(100,0000) = 481743,393 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 19000000, maxSize = 750)

# Run progress: 96,67% complete, ETA 00:00:43
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
7996309,094 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
318965,982 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
332245,351 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
325059,537 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
323801,755 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
326134,474 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
325536,859 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
323672,801 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
333692,074 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
326790,471 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
321930,639 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
323164,684 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
328094,445 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
323925,577 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 46.83446313389572---
322665,869 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 323956,243 ±(99.9%) 9337,386 us/op

  Histogram, us/op:
    [321000,000, 321500,000) = 0 
    [321500,000, 322000,000) = 1 
    [322000,000, 322500,000) = 0 
    [322500,000, 323000,000) = 1 
    [323000,000, 323500,000) = 1 
    [323500,000, 324000,000) = 1 
    [324000,000, 324500,000) = 0 
    [324500,000, 325000,000) = 0 
    [325000,000, 325500,000) = 0 
    [325500,000, 326000,000) = 0 
    [326000,000, 326500,000) = 0 
    [326500,000, 327000,000) = 0 
    [327000,000, 327500,000) = 0 
    [327500,000, 328000,000) = 0 
    [328000,000, 328500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 321930,639 us/op
     p(50,0000) = 323164,684 us/op
     p(90,0000) = 328094,445 us/op
     p(95,0000) = 328094,445 us/op
     p(99,0000) = 328094,445 us/op
     p(99,9000) = 328094,445 us/op
     p(99,9900) = 328094,445 us/op
     p(99,9990) = 328094,445 us/op
     p(99,9999) = 328094,445 us/op
    p(100,0000) = 328094,445 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 20000000, maxSize = 250)

# Run progress: 97,50% complete, ETA 00:00:33
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
11568984,587 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
850102,907 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
832448,727 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
832375,909 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
830577,611 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
833049,228 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
832163,873 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
828603,846 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
829763,790 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
827372,368 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
829932,842 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
828431,265 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
829352,870 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
835621,892 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.20493284478446---
829530,903 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 830573,954 ±(99.9%) 11070,655 us/op

  Histogram, us/op:
    [828000,000, 828500,000) = 1 
    [828500,000, 829000,000) = 0 
    [829000,000, 829500,000) = 1 
    [829500,000, 830000,000) = 2 
    [830000,000, 830500,000) = 0 
    [830500,000, 831000,000) = 0 
    [831000,000, 831500,000) = 0 
    [831500,000, 832000,000) = 0 
    [832000,000, 832500,000) = 0 
    [832500,000, 833000,000) = 0 
    [833000,000, 833500,000) = 0 
    [833500,000, 834000,000) = 0 
    [834000,000, 834500,000) = 0 
    [834500,000, 835000,000) = 0 
    [835000,000, 835500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 828431,265 us/op
     p(50,0000) = 829530,903 us/op
     p(90,0000) = 835621,892 us/op
     p(95,0000) = 835621,892 us/op
     p(99,0000) = 835621,892 us/op
     p(99,9000) = 835621,892 us/op
     p(99,9900) = 835621,892 us/op
     p(99,9990) = 835621,892 us/op
     p(99,9999) = 835621,892 us/op
    p(100,0000) = 835621,892 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 20000000, maxSize = 500)

# Run progress: 98,33% complete, ETA 00:00:22
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
11413922,599 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
476188,109 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
557619,318 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
505037,544 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
506348,576 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
500564,253 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
504763,276 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
504902,175 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
504918,534 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
509361,350 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
508891,086 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
505618,478 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
519532,673 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
537021,010 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 50.10240948631039---
533463,228 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 520905,295 ±(99.9%) 54365,380 us/op

  Histogram, us/op:
    [500000,000, 502500,000) = 0 
    [502500,000, 505000,000) = 0 
    [505000,000, 507500,000) = 1 
    [507500,000, 510000,000) = 1 
    [510000,000, 512500,000) = 0 
    [512500,000, 515000,000) = 0 
    [515000,000, 517500,000) = 0 
    [517500,000, 520000,000) = 1 
    [520000,000, 522500,000) = 0 
    [522500,000, 525000,000) = 0 
    [525000,000, 527500,000) = 0 
    [527500,000, 530000,000) = 0 
    [530000,000, 532500,000) = 0 
    [532500,000, 535000,000) = 1 
    [535000,000, 537500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 505618,478 us/op
     p(50,0000) = 519532,673 us/op
     p(90,0000) = 537021,010 us/op
     p(95,0000) = 537021,010 us/op
     p(99,0000) = 537021,010 us/op
     p(99,9000) = 537021,010 us/op
     p(99,9900) = 537021,010 us/op
     p(99,9990) = 537021,010 us/op
     p(99,9999) = 537021,010 us/op
    p(100,0000) = 537021,010 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 10 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 20000000, maxSize = 750)

# Run progress: 99,17% complete, ETA 00:00:11
# Fork: 1 of 1
# Warmup Iteration   1: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
11201443,707 us/op
# Warmup Iteration   2: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
328227,570 us/op
# Warmup Iteration   3: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
346614,093 us/op
# Warmup Iteration   4: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
344308,640 us/op
# Warmup Iteration   5: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
340588,223 us/op
# Warmup Iteration   6: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
340877,567 us/op
# Warmup Iteration   7: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
340034,555 us/op
# Warmup Iteration   8: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
346400,132 us/op
# Warmup Iteration   9: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
342692,225 us/op
# Warmup Iteration  10: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
341422,894 us/op
Iteration   1: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
340200,077 us/op
Iteration   2: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
341467,163 us/op
Iteration   3: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
341867,818 us/op
Iteration   4: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
340907,721 us/op
Iteration   5: Naive solution with sector sorting ---ACCURACY : 49.31957385867404---
343635,642 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean = 341615,684 ±(99.9%) 4972,781 us/op

  Histogram, us/op:
    [340000,000, 340250,000) = 1 
    [340250,000, 340500,000) = 0 
    [340500,000, 340750,000) = 0 
    [340750,000, 341000,000) = 1 
    [341000,000, 341250,000) = 0 
    [341250,000, 341500,000) = 1 
    [341500,000, 341750,000) = 0 
    [341750,000, 342000,000) = 1 
    [342000,000, 342250,000) = 0 
    [342250,000, 342500,000) = 0 
    [342500,000, 342750,000) = 0 
    [342750,000, 343000,000) = 0 
    [343000,000, 343250,000) = 0 
    [343250,000, 343500,000) = 0 
    [343500,000, 343750,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 340200,077 us/op
     p(50,0000) = 341467,163 us/op
     p(90,0000) = 343635,642 us/op
     p(95,0000) = 343635,642 us/op
     p(99,0000) = 343635,642 us/op
     p(99,9000) = 343635,642 us/op
     p(99,9900) = 343635,642 us/op
     p(99,9990) = 343635,642 us/op
     p(99,9999) = 343635,642 us/op
    p(100,0000) = 343635,642 us/op


# Run complete. Total time: 00:22:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (count)  (maxSize)  Mode  Cnt       Score       Error  Units
MyBenchmark.naive              1000000        250    ss    5   15771,388 ±   452,251  us/op
MyBenchmark.naive              1000000        500    ss    5   15800,066 ±   564,719  us/op
MyBenchmark.naive              1000000        750    ss    5   15981,243 ±   631,891  us/op
MyBenchmark.naive              2000000        250    ss    5   32407,474 ±  2508,774  us/op
MyBenchmark.naive              2000000        500    ss    5   33075,917 ±  1272,516  us/op
MyBenchmark.naive              2000000        750    ss    5   32906,545 ±  2930,819  us/op
MyBenchmark.naive              3000000        250    ss    5   47992,489 ±  2211,581  us/op
MyBenchmark.naive              3000000        500    ss    5   48993,710 ±  1906,397  us/op
MyBenchmark.naive              3000000        750    ss    5   49636,876 ±  2304,746  us/op
MyBenchmark.naive              4000000        250    ss    5   65450,351 ±  2201,396  us/op
MyBenchmark.naive              4000000        500    ss    5   67052,138 ± 10199,535  us/op
MyBenchmark.naive              4000000        750    ss    5   71952,453 ± 22170,197  us/op
MyBenchmark.naive              5000000        250    ss    5   81431,017 ±  7179,974  us/op
MyBenchmark.naive              5000000        500    ss    5   84430,062 ± 22175,349  us/op
MyBenchmark.naive              5000000        750    ss    5   82540,149 ±  2543,929  us/op
MyBenchmark.naive              6000000        250    ss    5   96581,694 ±  2166,297  us/op
MyBenchmark.naive              6000000        500    ss    5   97240,322 ±  3493,817  us/op
MyBenchmark.naive              6000000        750    ss    5   98803,038 ±  3243,575  us/op
MyBenchmark.naive              7000000        250    ss    5  113662,510 ±  4674,239  us/op
MyBenchmark.naive              7000000        500    ss    5  113394,145 ±  1829,005  us/op
MyBenchmark.naive              7000000        750    ss    5  114138,870 ±  3505,538  us/op
MyBenchmark.naive              8000000        250    ss    5  128394,504 ±  2192,638  us/op
MyBenchmark.naive              8000000        500    ss    5  129377,120 ±  3003,251  us/op
MyBenchmark.naive              8000000        750    ss    5  132382,581 ±  1617,979  us/op
MyBenchmark.naive              9000000        250    ss    5  145243,011 ±  8571,165  us/op
MyBenchmark.naive              9000000        500    ss    5  145568,218 ±  2496,863  us/op
MyBenchmark.naive              9000000        750    ss    5  146172,891 ±  4654,563  us/op
MyBenchmark.naive             10000000        250    ss    5  159392,146 ±  2053,044  us/op
MyBenchmark.naive             10000000        500    ss    5  165021,531 ±  7973,508  us/op
MyBenchmark.naive             10000000        750    ss    5  165638,392 ±  3903,466  us/op
MyBenchmark.naive             11000000        250    ss    5  180145,583 ±  4837,883  us/op
MyBenchmark.naive             11000000        500    ss    5  177135,567 ±  3812,127  us/op
MyBenchmark.naive             11000000        750    ss    5  182918,414 ±  5250,636  us/op
MyBenchmark.naive             12000000        250    ss    5  195434,774 ±  7065,050  us/op
MyBenchmark.naive             12000000        500    ss    5  196260,785 ±  4154,400  us/op
MyBenchmark.naive             12000000        750    ss    5  197200,352 ±  4568,978  us/op
MyBenchmark.naive             13000000        250    ss    5  209550,483 ±  6175,736  us/op
MyBenchmark.naive             13000000        500    ss    5  210481,903 ±  5942,655  us/op
MyBenchmark.naive             13000000        750    ss    5  210312,146 ±  4901,125  us/op
MyBenchmark.naive             14000000        250    ss    5  217296,831 ±  9787,976  us/op
MyBenchmark.naive             14000000        500    ss    5  217234,920 ±  3199,637  us/op
MyBenchmark.naive             14000000        750    ss    5  220178,726 ± 16166,867  us/op
MyBenchmark.naive             15000000        250    ss    5  234733,713 ± 13674,624  us/op
MyBenchmark.naive             15000000        500    ss    5  231839,692 ±  3826,574  us/op
MyBenchmark.naive             15000000        750    ss    5  234895,707 ± 19871,932  us/op
MyBenchmark.naive             16000000        250    ss    5  244546,852 ±  6541,079  us/op
MyBenchmark.naive             16000000        500    ss    5  244261,229 ±  2490,928  us/op
MyBenchmark.naive             16000000        750    ss    5  247116,629 ±  5279,121  us/op
MyBenchmark.naive             17000000        250    ss    5  260755,400 ±  5783,263  us/op
MyBenchmark.naive             17000000        500    ss    5  263249,216 ± 17103,993  us/op
MyBenchmark.naive             17000000        750    ss    5  264383,562 ±  3347,984  us/op
MyBenchmark.naive             18000000        250    ss    5  277213,774 ± 11733,774  us/op
MyBenchmark.naive             18000000        500    ss    5  276655,165 ±  4145,360  us/op
MyBenchmark.naive             18000000        750    ss    5  276988,713 ±  7525,492  us/op
MyBenchmark.naive             19000000        250    ss    5  291267,123 ±  9152,496  us/op
MyBenchmark.naive             19000000        500    ss    5  289697,478 ±  6620,738  us/op
MyBenchmark.naive             19000000        750    ss    5  290303,433 ±  2704,790  us/op
MyBenchmark.naive             20000000        250    ss    5  303001,996 ±  5377,160  us/op
MyBenchmark.naive             20000000        500    ss    5  305867,790 ±  6897,241  us/op
MyBenchmark.naive             20000000        750    ss    5  306711,444 ± 11524,390  us/op
MyBenchmark.naiveWithSorting   1000000        250    ss    5   43542,102 ±  1804,225  us/op
MyBenchmark.naiveWithSorting   1000000        500    ss    5   25638,867 ±  2137,127  us/op
MyBenchmark.naiveWithSorting   1000000        750    ss    5   16868,074 ±  1927,587  us/op
MyBenchmark.naiveWithSorting   2000000        250    ss    5   88587,768 ±  5782,253  us/op
MyBenchmark.naiveWithSorting   2000000        500    ss    5   52185,224 ±  2318,864  us/op
MyBenchmark.naiveWithSorting   2000000        750    ss    5   35221,685 ±   454,637  us/op
MyBenchmark.naiveWithSorting   3000000        250    ss    5  131624,063 ±  3935,726  us/op
MyBenchmark.naiveWithSorting   3000000        500    ss    5   77775,397 ±  2023,745  us/op
MyBenchmark.naiveWithSorting   3000000        750    ss    5   51896,008 ±  1024,788  us/op
MyBenchmark.naiveWithSorting   4000000        250    ss    5  176897,868 ±  6705,198  us/op
MyBenchmark.naiveWithSorting   4000000        500    ss    5  106563,820 ±  6639,851  us/op
MyBenchmark.naiveWithSorting   4000000        750    ss    5   70875,976 ±  2410,169  us/op
MyBenchmark.naiveWithSorting   5000000        250    ss    5  220858,910 ±  8177,853  us/op
MyBenchmark.naiveWithSorting   5000000        500    ss    5  132947,797 ±  3008,861  us/op
MyBenchmark.naiveWithSorting   5000000        750    ss    5   89719,547 ±  1491,318  us/op
MyBenchmark.naiveWithSorting   6000000        250    ss    5  254903,714 ±  8575,538  us/op
MyBenchmark.naiveWithSorting   6000000        500    ss    5  164454,262 ± 30942,327  us/op
MyBenchmark.naiveWithSorting   6000000        750    ss    5  113310,998 ± 26794,088  us/op
MyBenchmark.naiveWithSorting   7000000        250    ss    5  331431,081 ± 48419,246  us/op
MyBenchmark.naiveWithSorting   7000000        500    ss    5  189352,318 ± 18425,762  us/op
MyBenchmark.naiveWithSorting   7000000        750    ss    5  124527,297 ±  4991,858  us/op
MyBenchmark.naiveWithSorting   8000000        250    ss    5  369345,337 ±  5432,149  us/op
MyBenchmark.naiveWithSorting   8000000        500    ss    5  216862,621 ± 26916,134  us/op
MyBenchmark.naiveWithSorting   8000000        750    ss    5  141589,316 ±  9402,704  us/op
MyBenchmark.naiveWithSorting   9000000        250    ss    5  402350,362 ± 36044,690  us/op
MyBenchmark.naiveWithSorting   9000000        500    ss    5  244456,905 ± 11829,613  us/op
MyBenchmark.naiveWithSorting   9000000        750    ss    5  160586,734 ± 16228,577  us/op
MyBenchmark.naiveWithSorting  10000000        250    ss    5  438007,283 ±  2990,931  us/op
MyBenchmark.naiveWithSorting  10000000        500    ss    5  261504,104 ±  7715,345  us/op
MyBenchmark.naiveWithSorting  10000000        750    ss    5  175820,878 ±  4258,078  us/op
MyBenchmark.naiveWithSorting  11000000        250    ss    5  488195,068 ± 22904,056  us/op
MyBenchmark.naiveWithSorting  11000000        500    ss    5  287044,427 ±  6190,685  us/op
MyBenchmark.naiveWithSorting  11000000        750    ss    5  193559,552 ±  4737,961  us/op
MyBenchmark.naiveWithSorting  12000000        250    ss    5  529384,370 ±  9869,769  us/op
MyBenchmark.naiveWithSorting  12000000        500    ss    5  314712,234 ± 12909,364  us/op
MyBenchmark.naiveWithSorting  12000000        750    ss    5  220849,928 ±  3931,806  us/op
MyBenchmark.naiveWithSorting  13000000        250    ss    5  570768,194 ±  7442,796  us/op
MyBenchmark.naiveWithSorting  13000000        500    ss    5  340025,124 ±  9055,828  us/op
MyBenchmark.naiveWithSorting  13000000        750    ss    5  225212,100 ±  4169,801  us/op
MyBenchmark.naiveWithSorting  14000000        250    ss    5  606852,330 ±  8503,224  us/op
MyBenchmark.naiveWithSorting  14000000        500    ss    5  357000,467 ±  6207,581  us/op
MyBenchmark.naiveWithSorting  14000000        750    ss    5  243186,997 ± 10196,948  us/op
MyBenchmark.naiveWithSorting  15000000        250    ss    5  653032,214 ±  9439,103  us/op
MyBenchmark.naiveWithSorting  15000000        500    ss    5  384016,383 ±  4150,381  us/op
MyBenchmark.naiveWithSorting  15000000        750    ss    5  257884,539 ±  2397,234  us/op
MyBenchmark.naiveWithSorting  16000000        250    ss    5  687814,494 ±  3620,908  us/op
MyBenchmark.naiveWithSorting  16000000        500    ss    5  405414,398 ±  2713,118  us/op
MyBenchmark.naiveWithSorting  16000000        750    ss    5  274884,711 ±  3224,982  us/op
MyBenchmark.naiveWithSorting  17000000        250    ss    5  708491,649 ± 26102,902  us/op
MyBenchmark.naiveWithSorting  17000000        500    ss    5  431033,569 ±  7818,306  us/op
MyBenchmark.naiveWithSorting  17000000        750    ss    5  290241,907 ±  4414,163  us/op
MyBenchmark.naiveWithSorting  18000000        250    ss    5  776487,975 ± 42863,608  us/op
MyBenchmark.naiveWithSorting  18000000        500    ss    5  457092,531 ±  6536,964  us/op
MyBenchmark.naiveWithSorting  18000000        750    ss    5  307357,881 ±  7395,930  us/op
MyBenchmark.naiveWithSorting  19000000        250    ss    5  818420,333 ±  4472,290  us/op
MyBenchmark.naiveWithSorting  19000000        500    ss    5  479533,918 ±  7497,235  us/op
MyBenchmark.naiveWithSorting  19000000        750    ss    5  323956,243 ±  9337,386  us/op
MyBenchmark.naiveWithSorting  20000000        250    ss    5  830573,954 ± 11070,655  us/op
MyBenchmark.naiveWithSorting  20000000        500    ss    5  520905,295 ± 24365,380  us/op
MyBenchmark.naiveWithSorting  20000000        750    ss    5  341615,684 ±  4972,781  us/op
