# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 1000, maxSize = 400)

# Run progress: 0,00% complete, ETA 00:15:00
# Fork: 1 of 1
# Warmup Iteration   1: 12636,778 ns/op
# Warmup Iteration   2: 12444,523 ns/op
# Warmup Iteration   3: 12783,764 ns/op
# Warmup Iteration   4: 12610,886 ns/op
# Warmup Iteration   5: 13315,047 ns/op
Iteration   1: 13671,880 ns/op
Iteration   2: 13218,753 ns/op
Iteration   3: 13094,454 ns/op
Iteration   4: 13047,271 ns/op
Iteration   5: 12941,462 ns/op


Result "benchmark.MyBenchmark.naive":
  13194,764 ±(99.9%) 1096,239 ns/op [Average]
  (min, avg, max) = (12941,462, 13194,764, 13671,880), stdev = 284,690
  CI (99.9%): [12098,525, 14291,003] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 2000, maxSize = 400)

# Run progress: 11,11% complete, ETA 00:13:22
# Fork: 1 of 1
# Warmup Iteration   1: 26584,438 ns/op
# Warmup Iteration   2: 27064,484 ns/op
# Warmup Iteration   3: 25881,639 ns/op
# Warmup Iteration   4: 27057,177 ns/op
# Warmup Iteration   5: 26640,312 ns/op
Iteration   1: 26245,184 ns/op
Iteration   2: 26782,220 ns/op
Iteration   3: 26825,030 ns/op
Iteration   4: 26795,369 ns/op
Iteration   5: 26941,147 ns/op


Result "benchmark.MyBenchmark.naive":
  26717,790 ±(99.9%) 1045,567 ns/op [Average]
  (min, avg, max) = (26245,184, 26717,790, 26941,147), stdev = 271,530
  CI (99.9%): [25672,223, 27763,357] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 3000, maxSize = 400)

# Run progress: 22,22% complete, ETA 00:11:41
# Fork: 1 of 1
# Warmup Iteration   1: 40906,540 ns/op
# Warmup Iteration   2: 39837,131 ns/op
# Warmup Iteration   3: 40500,287 ns/op
# Warmup Iteration   4: 42140,967 ns/op
# Warmup Iteration   5: 39304,232 ns/op
Iteration   1: 41648,292 ns/op
Iteration   2: 40918,348 ns/op
Iteration   3: 40806,287 ns/op
Iteration   4: 41254,181 ns/op
Iteration   5: 40582,406 ns/op


Result "benchmark.MyBenchmark.naive":
  41041,903 ±(99.9%) 1604,717 ns/op [Average]
  (min, avg, max) = (40582,406, 41041,903, 41648,292), stdev = 416,740
  CI (99.9%): [39437,186, 42646,620] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 1000, maxSize = 400)

# Run progress: 33,33% complete, ETA 00:10:01
# Fork: 1 of 1
# Warmup Iteration   1: 17241,852 ns/op
# Warmup Iteration   2: 19392,033 ns/op
# Warmup Iteration   3: 19003,574 ns/op
# Warmup Iteration   4: 19171,586 ns/op
# Warmup Iteration   5: 19106,013 ns/op
Iteration   1: 19515,667 ns/op
Iteration   2: 19482,668 ns/op
Iteration   3: 19193,328 ns/op
Iteration   4: 19771,302 ns/op
Iteration   5: 19043,901 ns/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  19401,373 ±(99.9%) 1101,965 ns/op [Average]
  (min, avg, max) = (19043,901, 19401,373, 19771,302), stdev = 286,177
  CI (99.9%): [18299,408, 20503,338] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 2000, maxSize = 400)

# Run progress: 44,44% complete, ETA 00:08:21
# Fork: 1 of 1
# Warmup Iteration   1: 39065,345 ns/op
# Warmup Iteration   2: 41068,181 ns/op
# Warmup Iteration   3: 41234,436 ns/op
# Warmup Iteration   4: 41394,543 ns/op
# Warmup Iteration   5: 40068,724 ns/op
Iteration   1: 40505,151 ns/op
Iteration   2: 41371,601 ns/op
Iteration   3: 41070,506 ns/op
Iteration   4: 41462,402 ns/op
Iteration   5: 41356,870 ns/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  41153,306 ±(99.9%) 1505,685 ns/op [Average]
  (min, avg, max) = (40505,151, 41153,306, 41462,402), stdev = 391,022
  CI (99.9%): [39647,621, 42658,992] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 3000, maxSize = 400)

# Run progress: 55,56% complete, ETA 00:06:41
# Fork: 1 of 1
# Warmup Iteration   1: 61320,218 ns/op
# Warmup Iteration   2: 59882,259 ns/op
# Warmup Iteration   3: 62444,671 ns/op
# Warmup Iteration   4: 64185,128 ns/op
# Warmup Iteration   5: 62055,739 ns/op
Iteration   1: 62560,151 ns/op
Iteration   2: 61280,464 ns/op
Iteration   3: 63297,625 ns/op
Iteration   4: 62512,267 ns/op
Iteration   5: 62565,743 ns/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  62443,250 ±(99.9%) 2800,310 ns/op [Average]
  (min, avg, max) = (61280,464, 62443,250, 63297,625), stdev = 727,232
  CI (99.9%): [59642,940, 65243,560] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 1000, maxSize = 400)

# Run progress: 66,67% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 7098681,841 ns/op
# Warmup Iteration   2: 7324627,171 ns/op
# Warmup Iteration   3: 7293571,168 ns/op
# Warmup Iteration   4: 7168612,483 ns/op
# Warmup Iteration   5: 7680155,922 ns/op
Iteration   1: 7901232,591 ns/op
Iteration   2: 7321982,279 ns/op
Iteration   3: 7072973,347 ns/op
Iteration   4: 7226910,866 ns/op
Iteration   5: 7084370,250 ns/op


Result "benchmark.MyBenchmark.shelf":
  7321493,867 ±(99.9%) 1310115,078 ns/op [Average]
  (min, avg, max) = (7072973,347, 7321493,867, 7901232,591), stdev = 340232,725
  CI (99.9%): [6011378,789, 8631608,944] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 2000, maxSize = 400)

# Run progress: 77,78% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 35221151,859 ns/op
# Warmup Iteration   2: 34952824,460 ns/op
# Warmup Iteration   3: 35177448,214 ns/op
# Warmup Iteration   4: 34325466,952 ns/op
# Warmup Iteration   5: 36301955,449 ns/op
Iteration   1: 37413423,403 ns/op
Iteration   2: 34508925,255 ns/op
Iteration   3: 35014825,091 ns/op
Iteration   4: 36843781,191 ns/op
Iteration   5: 34650805,519 ns/op


Result "benchmark.MyBenchmark.shelf":
  35686352,092 ±(99.9%) 5177668,887 ns/op [Average]
  (min, avg, max) = (34508925,255, 35686352,092, 37413423,403), stdev = 1344624,167
  CI (99.9%): [30508683,205, 40864020,978] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 3000, maxSize = 400)

# Run progress: 88,89% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 89084756,363 ns/op
# Warmup Iteration   2: 90627283,378 ns/op
# Warmup Iteration   3: 89034544,673 ns/op
# Warmup Iteration   4: 90012121,741 ns/op
# Warmup Iteration   5: 93650455,682 ns/op
Iteration   1: 90437209,432 ns/op
Iteration   2: 87268390,452 ns/op
Iteration   3: 89864329,018 ns/op
Iteration   4: 87690397,591 ns/op
Iteration   5: 88641969,204 ns/op


Result "benchmark.MyBenchmark.shelf":
  88780459,139 ±(99.9%) 5242167,988 ns/op [Average]
  (min, avg, max) = (87268390,452, 88780459,139, 90437209,432), stdev = 1361374,379
  CI (99.9%): [83538291,151, 94022627,128] (assumes normal distribution)


# Run complete. Total time: 00:15:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                     (count)  (maxSize)  Mode  Cnt         Score         Error  Units
MyBenchmark.naive                1000        400  avgt    5     13194,764 ±    1096,239  ns/op
MyBenchmark.naive                2000        400  avgt    5     26717,790 ±    1045,567  ns/op
MyBenchmark.naive                3000        400  avgt    5     41041,903 ±    1604,717  ns/op
MyBenchmark.naiveWithSorting     1000        400  avgt    5     19401,373 ±    1101,965  ns/op
MyBenchmark.naiveWithSorting     2000        400  avgt    5     41153,306 ±    1505,685  ns/op
MyBenchmark.naiveWithSorting     3000        400  avgt    5     62443,250 ±    2800,310  ns/op
MyBenchmark.shelf                1000        400  avgt    5   7321493,867 ± 1310115,078  ns/op
MyBenchmark.shelf                2000        400  avgt    5  35686352,092 ± 5177668,887  ns/op
MyBenchmark.shelf                3000        400  avgt    5  88780459,139 ± 5242167,988  ns/op
