# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 5000, maxSize = 250)

# Run progress: 0,00% complete, ETA 00:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 2300,000 us/op
# Warmup Iteration   2: 1048,954 us/op
# Warmup Iteration   3: 1926,290 us/op
Iteration   1: 1045,425 us/op
Iteration   2: 1039,330 us/op
Iteration   3: 925,774 us/op
Iteration   4: 906,848 us/op
Iteration   5: 890,809 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =    961,637 ±(99.9%) 287,906 us/op

  Histogram, us/op:
    [ 800,000,  825,000) = 0 
    [ 825,000,  850,000) = 0 
    [ 850,000,  875,000) = 0 
    [ 875,000,  900,000) = 1 
    [ 900,000,  925,000) = 1 
    [ 925,000,  950,000) = 1 
    [ 950,000,  975,000) = 0 
    [ 975,000, 1000,000) = 0 
    [1000,000, 1025,000) = 0 
    [1025,000, 1050,000) = 2 
    [1050,000, 1075,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    890,809 us/op
     p(50,0000) =    925,774 us/op
     p(90,0000) =   1045,425 us/op
     p(95,0000) =   1045,425 us/op
     p(99,0000) =   1045,425 us/op
     p(99,9000) =   1045,425 us/op
     p(99,9900) =   1045,425 us/op
     p(99,9990) =   1045,425 us/op
     p(99,9999) =   1045,425 us/op
    p(100,0000) =   1045,425 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 6000, maxSize = 250)

# Run progress: 4,17% complete, ETA 00:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 3029,777 us/op
# Warmup Iteration   2: 1161,548 us/op
# Warmup Iteration   3: 1159,624 us/op
Iteration   1: 1137,489 us/op
Iteration   2: 1137,489 us/op
Iteration   3: 1120,487 us/op
Iteration   4: 1119,526 us/op
Iteration   5: 1065,634 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =   1116,125 ±(99.9%) 113,786 us/op

  Histogram, us/op:
    [1060,000, 1065,000) = 0 
    [1065,000, 1070,000) = 1 
    [1070,000, 1075,000) = 0 
    [1075,000, 1080,000) = 0 
    [1080,000, 1085,000) = 0 
    [1085,000, 1090,000) = 0 
    [1090,000, 1095,000) = 0 
    [1095,000, 1100,000) = 0 
    [1100,000, 1105,000) = 0 
    [1105,000, 1110,000) = 0 
    [1110,000, 1115,000) = 0 
    [1115,000, 1120,000) = 1 
    [1120,000, 1125,000) = 1 
    [1125,000, 1130,000) = 0 
    [1130,000, 1135,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   1065,634 us/op
     p(50,0000) =   1120,487 us/op
     p(90,0000) =   1137,489 us/op
     p(95,0000) =   1137,489 us/op
     p(99,0000) =   1137,489 us/op
     p(99,9000) =   1137,489 us/op
     p(99,9900) =   1137,489 us/op
     p(99,9990) =   1137,489 us/op
     p(99,9999) =   1137,489 us/op
    p(100,0000) =   1137,489 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 7000, maxSize = 250)

# Run progress: 8,33% complete, ETA 00:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 2729,204 us/op
# Warmup Iteration   2: 1479,121 us/op
# Warmup Iteration   3: 1396,680 us/op
Iteration   1: 1303,654 us/op
Iteration   2: 1292,106 us/op
Iteration   3: 1301,729 us/op
Iteration   4: 1288,257 us/op
Iteration   5: 1329,317 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =   1303,013 ±(99.9%) 61,810 us/op

  Histogram, us/op:
    [1280,000, 1285,000) = 0 
    [1285,000, 1290,000) = 1 
    [1290,000, 1295,000) = 1 
    [1295,000, 1300,000) = 0 
    [1300,000, 1305,000) = 2 
    [1305,000, 1310,000) = 0 
    [1310,000, 1315,000) = 0 
    [1315,000, 1320,000) = 0 
    [1320,000, 1325,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   1288,257 us/op
     p(50,0000) =   1301,729 us/op
     p(90,0000) =   1329,317 us/op
     p(95,0000) =   1329,317 us/op
     p(99,0000) =   1329,317 us/op
     p(99,9000) =   1329,317 us/op
     p(99,9900) =   1329,317 us/op
     p(99,9990) =   1329,317 us/op
     p(99,9999) =   1329,317 us/op
    p(100,0000) =   1329,317 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 8000, maxSize = 250)

# Run progress: 12,50% complete, ETA 00:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 3215,829 us/op
# Warmup Iteration   2: 1706,234 us/op
# Warmup Iteration   3: 1443,193 us/op
Iteration   1: 1456,345 us/op
Iteration   2: 1410,474 us/op
Iteration   3: 1465,007 us/op
Iteration   4: 1450,892 us/op
Iteration   5: 1518,898 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =   1460,323 ±(99.9%) 149,664 us/op

  Histogram, us/op:
    [1400,000, 1412,500) = 1 
    [1412,500, 1425,000) = 0 
    [1425,000, 1437,500) = 0 
    [1437,500, 1450,000) = 0 
    [1450,000, 1462,500) = 2 
    [1462,500, 1475,000) = 1 
    [1475,000, 1487,500) = 0 
    [1487,500, 1500,000) = 0 
    [1500,000, 1512,500) = 0 
    [1512,500, 1525,000) = 1 
    [1525,000, 1537,500) = 0 
    [1537,500, 1550,000) = 0 
    [1550,000, 1562,500) = 0 
    [1562,500, 1575,000) = 0 
    [1575,000, 1587,500) = 0 

  Percentiles, us/op:
      p(0,0000) =   1410,474 us/op
     p(50,0000) =   1456,345 us/op
     p(90,0000) =   1518,898 us/op
     p(95,0000) =   1518,898 us/op
     p(99,0000) =   1518,898 us/op
     p(99,9000) =   1518,898 us/op
     p(99,9900) =   1518,898 us/op
     p(99,9990) =   1518,898 us/op
     p(99,9999) =   1518,898 us/op
    p(100,0000) =   1518,898 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 9000, maxSize = 250)

# Run progress: 16,67% complete, ETA 00:00:04
# Fork: 1 of 1
# Warmup Iteration   1: 3583,124 us/op
# Warmup Iteration   2: 1869,512 us/op
# Warmup Iteration   3: 1664,533 us/op
Iteration   1: 1630,851 us/op
Iteration   2: 1668,061 us/op
Iteration   3: 1666,136 us/op
Iteration   4: 1694,365 us/op
Iteration   5: 658,243 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =   1463,531 ±(99.9%) 1735,622 us/op

  Histogram, us/op:
    [   0,000,  125,000) = 0 
    [ 125,000,  250,000) = 0 
    [ 250,000,  375,000) = 0 
    [ 375,000,  500,000) = 0 
    [ 500,000,  625,000) = 0 
    [ 625,000,  750,000) = 1 
    [ 750,000,  875,000) = 0 
    [ 875,000, 1000,000) = 0 
    [1000,000, 1125,000) = 0 
    [1125,000, 1250,000) = 0 
    [1250,000, 1375,000) = 0 
    [1375,000, 1500,000) = 0 
    [1500,000, 1625,000) = 0 
    [1625,000, 1750,000) = 4 
    [1750,000, 1875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    658,243 us/op
     p(50,0000) =   1666,136 us/op
     p(90,0000) =   1694,365 us/op
     p(95,0000) =   1694,365 us/op
     p(99,0000) =   1694,365 us/op
     p(99,9000) =   1694,365 us/op
     p(99,9900) =   1694,365 us/op
     p(99,9990) =   1694,365 us/op
     p(99,9999) =   1694,365 us/op
    p(100,0000) =   1694,365 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 10000, maxSize = 250)

# Run progress: 20,83% complete, ETA 00:00:04
# Fork: 1 of 1
# Warmup Iteration   1: 4083,863 us/op
# Warmup Iteration   2: 1901,910 us/op
# Warmup Iteration   3: 1811,771 us/op
Iteration   1: 1789,316 us/op
Iteration   2: 1828,452 us/op
Iteration   3: 1815,620 us/op
Iteration   4: 1710,404 us/op
Iteration   5: 664,016 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =   1561,562 ±(99.9%) 1940,081 us/op

  Histogram, us/op:
    [   0,000,  125,000) = 0 
    [ 125,000,  250,000) = 0 
    [ 250,000,  375,000) = 0 
    [ 375,000,  500,000) = 0 
    [ 500,000,  625,000) = 0 
    [ 625,000,  750,000) = 1 
    [ 750,000,  875,000) = 0 
    [ 875,000, 1000,000) = 0 
    [1000,000, 1125,000) = 0 
    [1125,000, 1250,000) = 0 
    [1250,000, 1375,000) = 0 
    [1375,000, 1500,000) = 0 
    [1500,000, 1625,000) = 0 
    [1625,000, 1750,000) = 1 
    [1750,000, 1875,000) = 3 

  Percentiles, us/op:
      p(0,0000) =    664,016 us/op
     p(50,0000) =   1789,316 us/op
     p(90,0000) =   1828,452 us/op
     p(95,0000) =   1828,452 us/op
     p(99,0000) =   1828,452 us/op
     p(99,9000) =   1828,452 us/op
     p(99,9900) =   1828,452 us/op
     p(99,9990) =   1828,452 us/op
     p(99,9999) =   1828,452 us/op
    p(100,0000) =   1828,452 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 11000, maxSize = 250)

# Run progress: 25,00% complete, ETA 00:00:04
# Fork: 1 of 1
# Warmup Iteration   1: 4019,706 us/op
# Warmup Iteration   2: 2155,327 us/op
# Warmup Iteration   3: 1972,482 us/op
Iteration   1: 1936,555 us/op
Iteration   2: 1996,220 us/op
Iteration   3: 1963,180 us/op
Iteration   4: 770,515 us/op
Iteration   5: 650,864 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =   1463,467 ±(99.9%) 2652,376 us/op

  Histogram, us/op:
    [   0,000,  125,000) = 0 
    [ 125,000,  250,000) = 0 
    [ 250,000,  375,000) = 0 
    [ 375,000,  500,000) = 0 
    [ 500,000,  625,000) = 0 
    [ 625,000,  750,000) = 1 
    [ 750,000,  875,000) = 1 
    [ 875,000, 1000,000) = 0 
    [1000,000, 1125,000) = 0 
    [1125,000, 1250,000) = 0 
    [1250,000, 1375,000) = 0 
    [1375,000, 1500,000) = 0 
    [1500,000, 1625,000) = 0 
    [1625,000, 1750,000) = 0 
    [1750,000, 1875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    650,864 us/op
     p(50,0000) =   1936,555 us/op
     p(90,0000) =   1996,220 us/op
     p(95,0000) =   1996,220 us/op
     p(99,0000) =   1996,220 us/op
     p(99,9000) =   1996,220 us/op
     p(99,9900) =   1996,220 us/op
     p(99,9990) =   1996,220 us/op
     p(99,9999) =   1996,220 us/op
    p(100,0000) =   1996,220 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naive
# Parameters: (count = 12000, maxSize = 250)

# Run progress: 29,17% complete, ETA 00:00:04
# Fork: 1 of 1
# Warmup Iteration   1: 3905,829 us/op
# Warmup Iteration   2: 2249,957 us/op
# Warmup Iteration   3: 2221,087 us/op
Iteration   1: 2233,919 us/op
Iteration   2: 2216,597 us/op
Iteration   3: 2148,912 us/op
Iteration   4: 783,668 us/op
Iteration   5: 687,755 us/op


Result "benchmark.MyBenchmark.naive":
  N = 5
  mean =   1614,170 ±(99.9%) 3093,085 us/op

  Histogram, us/op:
    [   0,000,  250,000) = 0 
    [ 250,000,  500,000) = 0 
    [ 500,000,  750,000) = 1 
    [ 750,000, 1000,000) = 1 
    [1000,000, 1250,000) = 0 
    [1250,000, 1500,000) = 0 
    [1500,000, 1750,000) = 0 
    [1750,000, 2000,000) = 0 
    [2000,000, 2250,000) = 3 
    [2250,000, 2500,000) = 0 
    [2500,000, 2750,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    687,755 us/op
     p(50,0000) =   2148,912 us/op
     p(90,0000) =   2233,919 us/op
     p(95,0000) =   2233,919 us/op
     p(99,0000) =   2233,919 us/op
     p(99,9000) =   2233,919 us/op
     p(99,9900) =   2233,919 us/op
     p(99,9990) =   2233,919 us/op
     p(99,9999) =   2233,919 us/op
    p(100,0000) =   2233,919 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 5000, maxSize = 250)

# Run progress: 33,33% complete, ETA 00:00:04
# Fork: 1 of 1
# Warmup Iteration   1: 11883,652 us/op
# Warmup Iteration   2: 3944,322 us/op
# Warmup Iteration   3: 1558,996 us/op
Iteration   1: 1635,662 us/op
Iteration   2: 1645,927 us/op
Iteration   3: 1074,295 us/op
Iteration   4: 1067,559 us/op
Iteration   5: 1067,880 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =   1298,265 ±(99.9%) 1204,166 us/op

  Histogram, us/op:
    [1000,000, 1050,000) = 0 
    [1050,000, 1100,000) = 3 
    [1100,000, 1150,000) = 0 
    [1150,000, 1200,000) = 0 
    [1200,000, 1250,000) = 0 
    [1250,000, 1300,000) = 0 
    [1300,000, 1350,000) = 0 
    [1350,000, 1400,000) = 0 
    [1400,000, 1450,000) = 0 
    [1450,000, 1500,000) = 0 
    [1500,000, 1550,000) = 0 
    [1550,000, 1600,000) = 0 
    [1600,000, 1650,000) = 2 

  Percentiles, us/op:
      p(0,0000) =   1067,559 us/op
     p(50,0000) =   1074,295 us/op
     p(90,0000) =   1645,927 us/op
     p(95,0000) =   1645,927 us/op
     p(99,0000) =   1645,927 us/op
     p(99,9000) =   1645,927 us/op
     p(99,9900) =   1645,927 us/op
     p(99,9990) =   1645,927 us/op
     p(99,9999) =   1645,927 us/op
    p(100,0000) =   1645,927 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 6000, maxSize = 250)

# Run progress: 37,50% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 5531,547 us/op
# Warmup Iteration   2: 1266,123 us/op
# Warmup Iteration   3: 1214,797 us/op
Iteration   1: 1207,099 us/op
Iteration   2: 1186,248 us/op
Iteration   3: 1192,663 us/op
Iteration   4: 1212,872 us/op
Iteration   5: 1222,176 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =   1204,212 ±(99.9%) 56,531 us/op

  Histogram, us/op:
    [1180,000, 1185,000) = 0 
    [1185,000, 1190,000) = 1 
    [1190,000, 1195,000) = 1 
    [1195,000, 1200,000) = 0 
    [1200,000, 1205,000) = 0 
    [1205,000, 1210,000) = 1 
    [1210,000, 1215,000) = 1 
    [1215,000, 1220,000) = 0 
    [1220,000, 1225,000) = 1 

  Percentiles, us/op:
      p(0,0000) =   1186,248 us/op
     p(50,0000) =   1207,099 us/op
     p(90,0000) =   1222,176 us/op
     p(95,0000) =   1222,176 us/op
     p(99,0000) =   1222,176 us/op
     p(99,9000) =   1222,176 us/op
     p(99,9900) =   1222,176 us/op
     p(99,9990) =   1222,176 us/op
     p(99,9999) =   1222,176 us/op
    p(100,0000) =   1222,176 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 7000, maxSize = 250)

# Run progress: 41,67% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 5530,906 us/op
# Warmup Iteration   2: 1680,250 us/op
# Warmup Iteration   3: 1471,743 us/op
Iteration   1: 1552,580 us/op
Iteration   2: 1496,122 us/op
Iteration   3: 1437,420 us/op
Iteration   4: 1533,333 us/op
Iteration   5: 1474,630 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =   1498,817 ±(99.9%) 176,917 us/op

  Histogram, us/op:
    [1400,000, 1412,500) = 0 
    [1412,500, 1425,000) = 0 
    [1425,000, 1437,500) = 1 
    [1437,500, 1450,000) = 0 
    [1450,000, 1462,500) = 0 
    [1462,500, 1475,000) = 1 
    [1475,000, 1487,500) = 0 
    [1487,500, 1500,000) = 1 
    [1500,000, 1512,500) = 0 
    [1512,500, 1525,000) = 0 
    [1525,000, 1537,500) = 1 
    [1537,500, 1550,000) = 0 
    [1550,000, 1562,500) = 1 
    [1562,500, 1575,000) = 0 
    [1575,000, 1587,500) = 0 

  Percentiles, us/op:
      p(0,0000) =   1437,420 us/op
     p(50,0000) =   1496,122 us/op
     p(90,0000) =   1552,580 us/op
     p(95,0000) =   1552,580 us/op
     p(99,0000) =   1552,580 us/op
     p(99,9000) =   1552,580 us/op
     p(99,9900) =   1552,580 us/op
     p(99,9990) =   1552,580 us/op
     p(99,9999) =   1552,580 us/op
    p(100,0000) =   1552,580 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 8000, maxSize = 250)

# Run progress: 45,83% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 6142,314 us/op
# Warmup Iteration   2: 1850,264 us/op
# Warmup Iteration   3: 1722,593 us/op
Iteration   1: 1631,813 us/op
Iteration   2: 1660,042 us/op
Iteration   3: 1642,719 us/op
Iteration   4: 1637,266 us/op
Iteration   5: 1624,114 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =   1639,191 ±(99.9%) 52,114 us/op

  Histogram, us/op:
    [1620,000, 1625,000) = 1 
    [1625,000, 1630,000) = 0 
    [1630,000, 1635,000) = 1 
    [1635,000, 1640,000) = 1 
    [1640,000, 1645,000) = 1 
    [1645,000, 1650,000) = 0 
    [1650,000, 1655,000) = 0 
    [1655,000, 1660,000) = 0 
    [1660,000, 1665,000) = 1 

  Percentiles, us/op:
      p(0,0000) =   1624,114 us/op
     p(50,0000) =   1637,266 us/op
     p(90,0000) =   1660,042 us/op
     p(95,0000) =   1660,042 us/op
     p(99,0000) =   1660,042 us/op
     p(99,9000) =   1660,042 us/op
     p(99,9900) =   1660,042 us/op
     p(99,9990) =   1660,042 us/op
     p(99,9999) =   1660,042 us/op
    p(100,0000) =   1660,042 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 9000, maxSize = 250)

# Run progress: 50,00% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 6405,995 us/op
# Warmup Iteration   2: 2116,833 us/op
# Warmup Iteration   3: 2073,528 us/op
Iteration   1: 1877,852 us/op
Iteration   2: 1881,380 us/op
Iteration   3: 1867,907 us/op
Iteration   4: 1910,572 us/op
Iteration   5: 1046,708 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =   1716,884 ±(99.9%) 1443,900 us/op

  Histogram, us/op:
    [1000,000, 1100,000) = 1 
    [1100,000, 1200,000) = 0 
    [1200,000, 1300,000) = 0 
    [1300,000, 1400,000) = 0 
    [1400,000, 1500,000) = 0 
    [1500,000, 1600,000) = 0 
    [1600,000, 1700,000) = 0 
    [1700,000, 1800,000) = 0 
    [1800,000, 1900,000) = 3 

  Percentiles, us/op:
      p(0,0000) =   1046,708 us/op
     p(50,0000) =   1877,852 us/op
     p(90,0000) =   1910,572 us/op
     p(95,0000) =   1910,572 us/op
     p(99,0000) =   1910,572 us/op
     p(99,9000) =   1910,572 us/op
     p(99,9900) =   1910,572 us/op
     p(99,9990) =   1910,572 us/op
     p(99,9999) =   1910,572 us/op
    p(100,0000) =   1910,572 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 10000, maxSize = 250)

# Run progress: 54,17% complete, ETA 00:00:02
# Fork: 1 of 1
# Warmup Iteration   1: 6891,016 us/op
# Warmup Iteration   2: 2031,505 us/op
# Warmup Iteration   3: 1980,181 us/op
Iteration   1: 1967,991 us/op
Iteration   2: 2040,487 us/op
Iteration   3: 2046,583 us/op
Iteration   4: 2101,757 us/op
Iteration   5: 943,417 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =   1820,047 ±(99.9%) 1895,871 us/op

  Histogram, us/op:
    [   0,000,  250,000) = 0 
    [ 250,000,  500,000) = 0 
    [ 500,000,  750,000) = 0 
    [ 750,000, 1000,000) = 1 
    [1000,000, 1250,000) = 0 
    [1250,000, 1500,000) = 0 
    [1500,000, 1750,000) = 0 
    [1750,000, 2000,000) = 1 
    [2000,000, 2250,000) = 3 
    [2250,000, 2500,000) = 0 
    [2500,000, 2750,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    943,417 us/op
     p(50,0000) =   2040,487 us/op
     p(90,0000) =   2101,757 us/op
     p(95,0000) =   2101,757 us/op
     p(99,0000) =   2101,757 us/op
     p(99,9000) =   2101,757 us/op
     p(99,9900) =   2101,757 us/op
     p(99,9990) =   2101,757 us/op
     p(99,9999) =   2101,757 us/op
    p(100,0000) =   2101,757 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 11000, maxSize = 250)

# Run progress: 58,33% complete, ETA 00:00:02
# Fork: 1 of 1
# Warmup Iteration   1: 8736,149 us/op
# Warmup Iteration   2: 2260,543 us/op
# Warmup Iteration   3: 2291,659 us/op
Iteration   1: 2214,351 us/op
Iteration   2: 2334,002 us/op
Iteration   3: 2351,646 us/op
Iteration   4: 1217,684 us/op
Iteration   5: 950,474 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =   1813,631 ±(99.9%) 2598,126 us/op

  Histogram, us/op:
    [   0,000,  250,000) = 0 
    [ 250,000,  500,000) = 0 
    [ 500,000,  750,000) = 0 
    [ 750,000, 1000,000) = 1 
    [1000,000, 1250,000) = 1 
    [1250,000, 1500,000) = 0 
    [1500,000, 1750,000) = 0 
    [1750,000, 2000,000) = 0 
    [2000,000, 2250,000) = 1 
    [2250,000, 2500,000) = 2 
    [2500,000, 2750,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    950,474 us/op
     p(50,0000) =   2214,351 us/op
     p(90,0000) =   2351,646 us/op
     p(95,0000) =   2351,646 us/op
     p(99,0000) =   2351,646 us/op
     p(99,9000) =   2351,646 us/op
     p(99,9900) =   2351,646 us/op
     p(99,9990) =   2351,646 us/op
     p(99,9999) =   2351,646 us/op
    p(100,0000) =   2351,646 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.naiveWithSorting
# Parameters: (count = 12000, maxSize = 250)

# Run progress: 62,50% complete, ETA 00:00:02
# Fork: 1 of 1
# Warmup Iteration   1: 8066,678 us/op
# Warmup Iteration   2: 2517,489 us/op
# Warmup Iteration   3: 2389,819 us/op
Iteration   1: 2439,218 us/op
Iteration   2: 2452,049 us/op
Iteration   3: 2181,311 us/op
Iteration   4: 1055,048 us/op
Iteration   5: 1062,106 us/op


Result "benchmark.MyBenchmark.naiveWithSorting":
  N = 5
  mean =   1837,946 ±(99.9%) 2770,997 us/op

  Histogram, us/op:
    [1000,000, 1125,000) = 2 
    [1125,000, 1250,000) = 0 
    [1250,000, 1375,000) = 0 
    [1375,000, 1500,000) = 0 
    [1500,000, 1625,000) = 0 
    [1625,000, 1750,000) = 0 
    [1750,000, 1875,000) = 0 
    [1875,000, 2000,000) = 0 
    [2000,000, 2125,000) = 0 
    [2125,000, 2250,000) = 1 
    [2250,000, 2375,000) = 0 
    [2375,000, 2500,000) = 2 
    [2500,000, 2625,000) = 0 
    [2625,000, 2750,000) = 0 
    [2750,000, 2875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   1055,048 us/op
     p(50,0000) =   2181,311 us/op
     p(90,0000) =   2452,049 us/op
     p(95,0000) =   2452,049 us/op
     p(99,0000) =   2452,049 us/op
     p(99,9000) =   2452,049 us/op
     p(99,9900) =   2452,049 us/op
     p(99,9990) =   2452,049 us/op
     p(99,9999) =   2452,049 us/op
    p(100,0000) =   2452,049 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 5000, maxSize = 250)

# Run progress: 66,67% complete, ETA 00:00:02
# Fork: 1 of 1
# Warmup Iteration   1: 322869,565 us/op
# Warmup Iteration   2: 251070,125 us/op
# Warmup Iteration   3: 249540,000 us/op
Iteration   1: 257528,729 us/op
Iteration   2: 268219,717 us/op
Iteration   3: 268292,855 us/op
Iteration   4: 258080,472 us/op
Iteration   5: 256585,954 us/op


Result "benchmark.MyBenchmark.shelf":
  N = 5
  mean = 261741,545 ±(99.9%) 22992,711 us/op

  Histogram, us/op:
    [250000,000, 251250,000) = 0 
    [251250,000, 252500,000) = 0 
    [252500,000, 253750,000) = 0 
    [253750,000, 255000,000) = 0 
    [255000,000, 256250,000) = 0 
    [256250,000, 257500,000) = 1 
    [257500,000, 258750,000) = 2 
    [258750,000, 260000,000) = 0 
    [260000,000, 261250,000) = 0 
    [261250,000, 262500,000) = 0 
    [262500,000, 263750,000) = 0 
    [263750,000, 265000,000) = 0 
    [265000,000, 266250,000) = 0 
    [266250,000, 267500,000) = 0 
    [267500,000, 268750,000) = 2 

  Percentiles, us/op:
      p(0,0000) = 256585,954 us/op
     p(50,0000) = 258080,472 us/op
     p(90,0000) = 268292,855 us/op
     p(95,0000) = 268292,855 us/op
     p(99,0000) = 268292,855 us/op
     p(99,9000) = 268292,855 us/op
     p(99,9900) = 268292,855 us/op
     p(99,9990) = 268292,855 us/op
     p(99,9999) = 268292,855 us/op
    p(100,0000) = 268292,855 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 6000, maxSize = 250)

# Run progress: 70,83% complete, ETA 00:00:02
# Fork: 1 of 1
# Warmup Iteration   1: 460219,953 us/op
# Warmup Iteration   2: 374182,650 us/op
# Warmup Iteration   3: 373755,370 us/op
Iteration   1: 374286,263 us/op
Iteration   2: 362753,866 us/op
Iteration   3: 358568,957 us/op
Iteration   4: 351241,679 us/op
Iteration   5: 361148,358 us/op


Result "benchmark.MyBenchmark.shelf":
  N = 5
  mean = 361599,825 ±(99.9%) 32156,836 us/op

  Histogram, us/op:
    [350000,000, 352500,000) = 1 
    [352500,000, 355000,000) = 0 
    [355000,000, 357500,000) = 0 
    [357500,000, 360000,000) = 1 
    [360000,000, 362500,000) = 1 
    [362500,000, 365000,000) = 1 
    [365000,000, 367500,000) = 0 
    [367500,000, 370000,000) = 0 
    [370000,000, 372500,000) = 0 
    [372500,000, 375000,000) = 1 
    [375000,000, 377500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 351241,679 us/op
     p(50,0000) = 361148,358 us/op
     p(90,0000) = 374286,263 us/op
     p(95,0000) = 374286,263 us/op
     p(99,0000) = 374286,263 us/op
     p(99,9000) = 374286,263 us/op
     p(99,9900) = 374286,263 us/op
     p(99,9990) = 374286,263 us/op
     p(99,9999) = 374286,263 us/op
    p(100,0000) = 374286,263 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 7000, maxSize = 250)

# Run progress: 75,00% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 607202,110 us/op
# Warmup Iteration   2: 507591,923 us/op
# Warmup Iteration   3: 499777,698 us/op
Iteration   1: 492634,228 us/op
Iteration   2: 496522,734 us/op
Iteration   3: 491344,688 us/op
Iteration   4: 464008,056 us/op
Iteration   5: 493930,182 us/op


Result "benchmark.MyBenchmark.shelf":
  N = 5
  mean = 487687,978 ±(99.9%) 51503,483 us/op

  Histogram, us/op:
    [460000,000, 462500,000) = 0 
    [462500,000, 465000,000) = 1 
    [465000,000, 467500,000) = 0 
    [467500,000, 470000,000) = 0 
    [470000,000, 472500,000) = 0 
    [472500,000, 475000,000) = 0 
    [475000,000, 477500,000) = 0 
    [477500,000, 480000,000) = 0 
    [480000,000, 482500,000) = 0 
    [482500,000, 485000,000) = 0 
    [485000,000, 487500,000) = 0 
    [487500,000, 490000,000) = 0 
    [490000,000, 492500,000) = 1 
    [492500,000, 495000,000) = 2 
    [495000,000, 497500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 464008,056 us/op
     p(50,0000) = 492634,228 us/op
     p(90,0000) = 496522,734 us/op
     p(95,0000) = 496522,734 us/op
     p(99,0000) = 496522,734 us/op
     p(99,9000) = 496522,734 us/op
     p(99,9900) = 496522,734 us/op
     p(99,9990) = 496522,734 us/op
     p(99,9999) = 496522,734 us/op
    p(100,0000) = 496522,734 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 8000, maxSize = 250)

# Run progress: 79,17% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 736467,213 us/op
# Warmup Iteration   2: 653861,946 us/op
# Warmup Iteration   3: 649830,371 us/op
Iteration   1: 657764,567 us/op
Iteration   2: 654112,476 us/op
Iteration   3: 645289,075 us/op
Iteration   4: 626645,285 us/op
Iteration   5: 647227,554 us/op


Result "benchmark.MyBenchmark.shelf":
  N = 5
  mean = 646207,791 ±(99.9%) 46392,618 us/op

  Histogram, us/op:
    [620000,000, 622500,000) = 0 
    [622500,000, 625000,000) = 0 
    [625000,000, 627500,000) = 1 
    [627500,000, 630000,000) = 0 
    [630000,000, 632500,000) = 0 
    [632500,000, 635000,000) = 0 
    [635000,000, 637500,000) = 0 
    [637500,000, 640000,000) = 0 
    [640000,000, 642500,000) = 0 
    [642500,000, 645000,000) = 0 
    [645000,000, 647500,000) = 2 
    [647500,000, 650000,000) = 0 
    [650000,000, 652500,000) = 0 
    [652500,000, 655000,000) = 1 
    [655000,000, 657500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 626645,285 us/op
     p(50,0000) = 647227,554 us/op
     p(90,0000) = 657764,567 us/op
     p(95,0000) = 657764,567 us/op
     p(99,0000) = 657764,567 us/op
     p(99,9000) = 657764,567 us/op
     p(99,9900) = 657764,567 us/op
     p(99,9990) = 657764,567 us/op
     p(99,9999) = 657764,567 us/op
    p(100,0000) = 657764,567 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 9000, maxSize = 250)

# Run progress: 83,33% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 912532,655 us/op
# Warmup Iteration   2: 814651,799 us/op
# Warmup Iteration   3: 824250,527 us/op
Iteration   1: 819715,647 us/op
Iteration   2: 839863,899 us/op
Iteration   3: 811385,286 us/op
Iteration   4: 822300,821 us/op
Iteration   5: 826720,541 us/op


Result "benchmark.MyBenchmark.shelf":
  N = 5
  mean = 823997,239 ±(99.9%) 40360,117 us/op

  Histogram, us/op:
    [810000,000, 812500,000) = 1 
    [812500,000, 815000,000) = 0 
    [815000,000, 817500,000) = 0 
    [817500,000, 820000,000) = 1 
    [820000,000, 822500,000) = 1 
    [822500,000, 825000,000) = 0 
    [825000,000, 827500,000) = 1 
    [827500,000, 830000,000) = 0 
    [830000,000, 832500,000) = 0 
    [832500,000, 835000,000) = 0 
    [835000,000, 837500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 811385,286 us/op
     p(50,0000) = 822300,821 us/op
     p(90,0000) = 839863,899 us/op
     p(95,0000) = 839863,899 us/op
     p(99,0000) = 839863,899 us/op
     p(99,9000) = 839863,899 us/op
     p(99,9900) = 839863,899 us/op
     p(99,9990) = 839863,899 us/op
     p(99,9999) = 839863,899 us/op
    p(100,0000) = 839863,899 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 10000, maxSize = 250)

# Run progress: 87,50% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 1100897,481 us/op
# Warmup Iteration   2: 1020885,407 us/op
# Warmup Iteration   3: 1016866,021 us/op
Iteration   1: 1015287,459 us/op
Iteration   2: 1009179,147 us/op
Iteration   3: 1015589,634 us/op
Iteration   4: 1015580,973 us/op
Iteration   5: 1023024,054 us/op


Result "benchmark.MyBenchmark.shelf":
  N = 5
  mean = 1015732,253 ±(99.9%) 18899,036 us/op

  Histogram, us/op:
    [1000000,000, 1002500,000) = 0 
    [1002500,000, 1005000,000) = 0 
    [1005000,000, 1007500,000) = 0 
    [1007500,000, 1010000,000) = 1 
    [1010000,000, 1012500,000) = 0 
    [1012500,000, 1015000,000) = 0 
    [1015000,000, 1017500,000) = 3 
    [1017500,000, 1020000,000) = 0 
    [1020000,000, 1022500,000) = 0 
    [1022500,000, 1025000,000) = 1 
    [1025000,000, 1027500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 1009179,147 us/op
     p(50,0000) = 1015580,973 us/op
     p(90,0000) = 1023024,054 us/op
     p(95,0000) = 1023024,054 us/op
     p(99,0000) = 1023024,054 us/op
     p(99,9000) = 1023024,054 us/op
     p(99,9900) = 1023024,054 us/op
     p(99,9990) = 1023024,054 us/op
     p(99,9999) = 1023024,054 us/op
    p(100,0000) = 1023024,054 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 11000, maxSize = 250)

# Run progress: 91,67% complete, ETA 00:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 1351331,818 us/op
# Warmup Iteration   2: 1288099,155 us/op
# Warmup Iteration   3: 1273408,991 us/op
Iteration   1: 1242415,776 us/op
Iteration   2: 1236116,921 us/op
Iteration   3: 1234321,831 us/op
Iteration   4: 1234019,655 us/op
Iteration   5: 1225061,847 us/op


Result "benchmark.MyBenchmark.shelf":
  N = 5
  mean = 1234387,206 ±(99.9%) 23935,364 us/op

  Histogram, us/op:
    [1220000,000, 1222500,000) = 0 
    [1222500,000, 1225000,000) = 0 
    [1225000,000, 1227500,000) = 1 
    [1227500,000, 1230000,000) = 0 
    [1230000,000, 1232500,000) = 0 
    [1232500,000, 1235000,000) = 2 
    [1235000,000, 1237500,000) = 1 
    [1237500,000, 1240000,000) = 0 
    [1240000,000, 1242500,000) = 1 
    [1242500,000, 1245000,000) = 0 
    [1245000,000, 1247500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 1225061,847 us/op
     p(50,0000) = 1234321,831 us/op
     p(90,0000) = 1242415,776 us/op
     p(95,0000) = 1242415,776 us/op
     p(99,0000) = 1242415,776 us/op
     p(99,9000) = 1242415,776 us/op
     p(99,9900) = 1242415,776 us/op
     p(99,9990) = 1242415,776 us/op
     p(99,9999) = 1242415,776 us/op
    p(100,0000) = 1242415,776 us/op


# JMH version: 1.21
# VM version: JDK 1.8.0_171, Java HotSpot(TM) 64-Bit Server VM, 25.171-b11
# VM invoker: C:\Program Files\Java\jre1.8.0_171\bin\java.exe
# VM options: <none>
# Warmup: 3 iterations, single-shot each
# Measurement: 5 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: benchmark.MyBenchmark.shelf
# Parameters: (count = 12000, maxSize = 250)

# Run progress: 95,83% complete, ETA 00:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 1561465,802 us/op
# Warmup Iteration   2: 1457222,896 us/op
# Warmup Iteration   3: 1477377,886 us/op
Iteration   1: 1503208,451 us/op
Iteration   2: 1578818,769 us/op
Iteration   3: 1485578,009 us/op
Iteration   4: 1469969,770 us/op
Iteration   5: 1445379,984 us/op


Result "benchmark.MyBenchmark.shelf":
  N = 5
  mean = 1496590,997 ±(99.9%) 194997,581 us/op

  Histogram, us/op:
    [1400000,000, 1412500,000) = 0 
    [1412500,000, 1425000,000) = 0 
    [1425000,000, 1437500,000) = 0 
    [1437500,000, 1450000,000) = 1 
    [1450000,000, 1462500,000) = 0 
    [1462500,000, 1475000,000) = 1 
    [1475000,000, 1487500,000) = 1 
    [1487500,000, 1500000,000) = 0 
    [1500000,000, 1512500,000) = 1 
    [1512500,000, 1525000,000) = 0 
    [1525000,000, 1537500,000) = 0 
    [1537500,000, 1550000,000) = 0 
    [1550000,000, 1562500,000) = 0 
    [1562500,000, 1575000,000) = 0 
    [1575000,000, 1587500,000) = 1 

  Percentiles, us/op:
      p(0,0000) = 1445379,984 us/op
     p(50,0000) = 1485578,009 us/op
     p(90,0000) = 1578818,769 us/op
     p(95,0000) = 1578818,769 us/op
     p(99,0000) = 1578818,769 us/op
     p(99,9000) = 1578818,769 us/op
     p(99,9900) = 1578818,769 us/op
     p(99,9990) = 1578818,769 us/op
     p(99,9999) = 1578818,769 us/op
    p(100,0000) = 1578818,769 us/op


# Run complete. Total time: 00:00:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                     (count)  (maxSize)  Mode  Cnt        Score        Error  Units
MyBenchmark.naive                5000        250    ss    5      961,637 ±    287,906  us/op
MyBenchmark.naive                6000        250    ss    5     1116,125 ±    113,786  us/op
MyBenchmark.naive                7000        250    ss    5     1303,013 ±     61,810  us/op
MyBenchmark.naive                8000        250    ss    5     1460,323 ±    149,664  us/op
MyBenchmark.naive                9000        250    ss    5     1463,531 ±   1735,622  us/op
MyBenchmark.naive               10000        250    ss    5     1561,562 ±   1940,081  us/op
MyBenchmark.naive               11000        250    ss    5     1463,467 ±   2652,376  us/op
MyBenchmark.naive               12000        250    ss    5     1614,170 ±   3093,085  us/op
MyBenchmark.naiveWithSorting     5000        250    ss    5     1298,265 ±   1204,166  us/op
MyBenchmark.naiveWithSorting     6000        250    ss    5     1204,212 ±     56,531  us/op
MyBenchmark.naiveWithSorting     7000        250    ss    5     1498,817 ±    176,917  us/op
MyBenchmark.naiveWithSorting     8000        250    ss    5     1639,191 ±     52,114  us/op
MyBenchmark.naiveWithSorting     9000        250    ss    5     1716,884 ±   1443,900  us/op
MyBenchmark.naiveWithSorting    10000        250    ss    5     1820,047 ±   1895,871  us/op
MyBenchmark.naiveWithSorting    11000        250    ss    5     1813,631 ±   2598,126  us/op
MyBenchmark.naiveWithSorting    12000        250    ss    5     1837,946 ±   2770,997  us/op
MyBenchmark.shelf                5000        250    ss    5   261741,545 ±  22992,711  us/op
MyBenchmark.shelf                6000        250    ss    5   361599,825 ±  32156,836  us/op
MyBenchmark.shelf                7000        250    ss    5   487687,978 ±  51503,483  us/op
MyBenchmark.shelf                8000        250    ss    5   646207,791 ±  46392,618  us/op
MyBenchmark.shelf                9000        250    ss    5   823997,239 ±  40360,117  us/op
MyBenchmark.shelf               10000        250    ss    5  1015732,253 ±  18899,036  us/op
MyBenchmark.shelf               11000        250    ss    5  1234387,206 ±  23935,364  us/op
MyBenchmark.shelf               12000        250    ss    5  1496590,997 ± 194997,581  us/op
